// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.erecyclingcorps.job.migration;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: TradePreModelMigration Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.0.20141024_1545
 * @status 
 */
public class TradePreModelMigration implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (cesearch_Server != null) {

				this.setProperty("cesearch_Server", cesearch_Server.toString());

			}

			if (cesearch_Database != null) {

				this.setProperty("cesearch_Database",
						cesearch_Database.toString());

			}

			if (cesearch_Port != null) {

				this.setProperty("cesearch_Port", cesearch_Port.toString());

			}

			if (cesearch_Password != null) {

				this.setProperty("cesearch_Password",
						cesearch_Password.toString());

			}

			if (cesearch_Login != null) {

				this.setProperty("cesearch_Login", cesearch_Login.toString());

			}

			if (cesearch_Schema != null) {

				this.setProperty("cesearch_Schema", cesearch_Schema.toString());

			}

			if (ceadmindb_Port != null) {

				this.setProperty("ceadmindb_Port", ceadmindb_Port.toString());

			}

			if (ceadmindb_Schema != null) {

				this.setProperty("ceadmindb_Schema",
						ceadmindb_Schema.toString());

			}

			if (ceadmindb_Server != null) {

				this.setProperty("ceadmindb_Server",
						ceadmindb_Server.toString());

			}

			if (ceadmindb_Password != null) {

				this.setProperty("ceadmindb_Password",
						ceadmindb_Password.toString());

			}

			if (ceadmindb_Database != null) {

				this.setProperty("ceadmindb_Database",
						ceadmindb_Database.toString());

			}

			if (ceadmindb_Login != null) {

				this.setProperty("ceadmindb_Login", ceadmindb_Login.toString());

			}

		}

		public String cesearch_Server;

		public String getCesearch_Server() {
			return this.cesearch_Server;
		}

		public String cesearch_Database;

		public String getCesearch_Database() {
			return this.cesearch_Database;
		}

		public String cesearch_Port;

		public String getCesearch_Port() {
			return this.cesearch_Port;
		}

		public java.lang.String cesearch_Password;

		public java.lang.String getCesearch_Password() {
			return this.cesearch_Password;
		}

		public String cesearch_Login;

		public String getCesearch_Login() {
			return this.cesearch_Login;
		}

		public String cesearch_Schema;

		public String getCesearch_Schema() {
			return this.cesearch_Schema;
		}

		public String ceadmindb_Port;

		public String getCeadmindb_Port() {
			return this.ceadmindb_Port;
		}

		public String ceadmindb_Schema;

		public String getCeadmindb_Schema() {
			return this.ceadmindb_Schema;
		}

		public String ceadmindb_Server;

		public String getCeadmindb_Server() {
			return this.ceadmindb_Server;
		}

		public java.lang.String ceadmindb_Password;

		public java.lang.String getCeadmindb_Password() {
			return this.ceadmindb_Password;
		}

		public String ceadmindb_Database;

		public String getCeadmindb_Database() {
			return this.ceadmindb_Database;
		}

		public String ceadmindb_Login;

		public String getCeadmindb_Login() {
			return this.ceadmindb_Login;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "TradePreModelMigration";
	private final String projectName = "SEARCHMIGRATION";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TradePreModelMigration.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(TradePreModelMigration.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostgresqlInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class output1Struct implements
			routines.system.IPersistableRow<output1Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradePreModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradePreModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long manufacturerid;

		public long getManufacturerid() {
			return this.manufacturerid;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String code;

		public String getCode() {
			return this.code;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String skucode;

		public String getSkucode() {
			return this.skucode;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.manufacturerid;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final output1Struct other = (output1Struct) obj;

			if (this.manufacturerid != other.manufacturerid)
				return false;

			return true;
		}

		public void copyDataTo(output1Struct other) {

			other.manufacturerid = this.manufacturerid;
			other.version = this.version;
			other.code = this.code;
			other.description = this.description;
			other.skucode = this.skucode;

		}

		public void copyKeysDataTo(output1Struct other) {

			other.manufacturerid = this.manufacturerid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradePreModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradePreModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradePreModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradePreModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradePreModelMigration,
						0, length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradePreModelMigration,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradePreModelMigration) {

				try {

					int length = 0;

					this.manufacturerid = dis.readLong();

					this.version = dis.readInt();

					this.code = readString(dis);

					this.description = readString(dis);

					this.skucode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.manufacturerid);

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.code, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.skucode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("manufacturerid=" + String.valueOf(manufacturerid));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",code=" + code);
			sb.append(",description=" + description);
			sb.append(",skucode=" + skucode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(output1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.manufacturerid,
					other.manufacturerid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradePreModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradePreModelMigration = new byte[0];

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String code;

		public String getCode() {
			return this.code;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String skucode;

		public String getSkucode() {
			return this.skucode;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradePreModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradePreModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradePreModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradePreModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradePreModelMigration,
						0, length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradePreModelMigration,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradePreModelMigration) {

				try {

					int length = 0;

					this.version = dis.readInt();

					this.code = readString(dis);

					this.description = readString(dis);

					this.skucode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.code, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.skucode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("version=" + String.valueOf(version));
			sb.append(",code=" + code);
			sb.append(",description=" + description);
			sb.append(",skucode=" + skucode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				output1Struct output1 = new output1Struct();

				/**
				 * [tPostgresqlOutput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_2", false);
				start_Hash.put("tPostgresqlOutput_2",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_2";

				int tos_count_tPostgresqlOutput_2 = 0;

				String dbschema_tPostgresqlOutput_2 = null;
				dbschema_tPostgresqlOutput_2 = context.cesearch_Schema;

				String tableName_tPostgresqlOutput_2 = null;
				if (dbschema_tPostgresqlOutput_2 == null
						|| dbschema_tPostgresqlOutput_2.trim().length() == 0) {
					tableName_tPostgresqlOutput_2 = "ref_manufacturer";
				} else {
					tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2
							+ "\".\"" + "ref_manufacturer";
				}

				int updateKeyCount_tPostgresqlOutput_2 = 2;
				if (updateKeyCount_tPostgresqlOutput_2 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_2 = 0;
				int nb_line_update_tPostgresqlOutput_2 = 0;
				int nb_line_inserted_tPostgresqlOutput_2 = 0;
				int nb_line_deleted_tPostgresqlOutput_2 = 0;
				int nb_line_rejected_tPostgresqlOutput_2 = 0;

				int deletedCount_tPostgresqlOutput_2 = 0;
				int updatedCount_tPostgresqlOutput_2 = 0;
				int insertedCount_tPostgresqlOutput_2 = 0;
				int rejectedCount_tPostgresqlOutput_2 = 0;

				boolean whetherReject_tPostgresqlOutput_2 = false;

				java.sql.Connection conn_tPostgresqlOutput_2 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_2 = "jdbc:postgresql://"
						+ context.cesearch_Server + ":" + context.cesearch_Port
						+ "/" + context.cesearch_Database;
				String dbUser_tPostgresqlOutput_2 = context.cesearch_Login;

				final String decryptedPassword_tPostgresqlOutput_2 = context.cesearch_Password;

				String dbPwd_tPostgresqlOutput_2 = decryptedPassword_tPostgresqlOutput_2;

				conn_tPostgresqlOutput_2 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_2,
								dbUser_tPostgresqlOutput_2,
								dbPwd_tPostgresqlOutput_2);

				resourceMap.put("conn_tPostgresqlOutput_2",
						conn_tPostgresqlOutput_2);
				conn_tPostgresqlOutput_2.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_2 = 10000;
				int commitCounter_tPostgresqlOutput_2 = 0;

				int batchSize_tPostgresqlOutput_2 = 10000;
				int batchSizeCounter_tPostgresqlOutput_2 = 0;

				int count_tPostgresqlOutput_2 = 0;
				String update_tPostgresqlOutput_2 = "UPDATE \""
						+ tableName_tPostgresqlOutput_2
						+ "\" SET \"version\" = ?,\"description\" = ? WHERE \"code\" = ? AND \"skucode\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
						.prepareStatement(update_tPostgresqlOutput_2);
				String insert_tPostgresqlOutput_2 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_2
						+ "\" (\""
						+ "manufacturerid"
						+ "\",\"version\",\"code\",\"description\",\"skucode\") VALUES ("
						+ "nextval('ref_manufacturer_manufacturerid_seq')"
						+ ",?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
						.prepareStatement(insert_tPostgresqlOutput_2);

				/**
				 * [tPostgresqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				output1Struct output1_tmp = new output1Struct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_2);
				String dbUser_tPostgresqlInput_2 = context.ceadmindb_Login;

				final String decryptedPassword_tPostgresqlInput_2 = context.ceadmindb_Password;

				String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;

				String url_tPostgresqlInput_2 = "jdbc:postgresql://"
						+ context.ceadmindb_Server + ":"
						+ context.ceadmindb_Port + "/"
						+ context.ceadmindb_Database;

				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_2, dbUser_tPostgresqlInput_2,
						dbPwd_tPostgresqlInput_2);

				conn_tPostgresqlInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "SELECT \nversion,\ncode,\ndescription,\nskucode\nFROM ref_manufacturer";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);
				java.sql.ResultSet rs_tPostgresqlInput_2 = null;
				try {
					rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
							.executeQuery(dbquery_tPostgresqlInput_2);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
							.getColumnCount();

					String tmpContent_tPostgresqlInput_2 = null;

					while (rs_tPostgresqlInput_2.next()) {
						nb_line_tPostgresqlInput_2++;

						if (colQtyInRs_tPostgresqlInput_2 < 1) {
							row2.version = 0;
						} else {

							if (rs_tPostgresqlInput_2.getObject(1) != null) {
								row2.version = rs_tPostgresqlInput_2.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 2) {
							row2.code = null;
						} else {

							tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
									.getString(2);
							if (tmpContent_tPostgresqlInput_2 != null) {
								row2.code = tmpContent_tPostgresqlInput_2;
							} else {
								row2.code = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 3) {
							row2.description = null;
						} else {

							tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
									.getString(3);
							if (tmpContent_tPostgresqlInput_2 != null) {
								row2.description = tmpContent_tPostgresqlInput_2;
							} else {
								row2.description = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 4) {
							row2.skucode = null;
						} else {

							tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
									.getString(4);
							if (tmpContent_tPostgresqlInput_2 != null) {
								row2.skucode = tmpContent_tPostgresqlInput_2;
							} else {
								row2.skucode = null;
							}
						}

						/**
						 * [tPostgresqlInput_2 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_2 main ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						tos_count_tPostgresqlInput_2++;

						/**
						 * [tPostgresqlInput_2 main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							output1 = null;

							// # Output table : 'output1'
							output1_tmp.manufacturerid = 0;
							output1_tmp.version = row2.version;
							output1_tmp.code = row2.code == null ? row2.skucode
									: row2.code;
							output1_tmp.description = row2.description;
							output1_tmp.skucode = row2.skucode;
							output1 = output1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "output1"
						if (output1 != null) {

							/**
							 * [tPostgresqlOutput_2 main ] start
							 */

							currentComponent = "tPostgresqlOutput_2";

							whetherReject_tPostgresqlOutput_2 = false;
							int updateFlag_tPostgresqlOutput_2 = 0;
							pstmtUpdate_tPostgresqlOutput_2.setInt(1,
									output1.version);

							if (output1.description == null) {
								pstmtUpdate_tPostgresqlOutput_2.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_2.setString(2,
										output1.description);
							}

							if (output1.code == null) {
								pstmtUpdate_tPostgresqlOutput_2.setNull(
										3 + count_tPostgresqlOutput_2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_2.setString(
										3 + count_tPostgresqlOutput_2,
										output1.code);
							}

							if (output1.skucode == null) {
								pstmtUpdate_tPostgresqlOutput_2.setNull(
										4 + count_tPostgresqlOutput_2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_2.setString(
										4 + count_tPostgresqlOutput_2,
										output1.skucode);
							}

							try {

								updateFlag_tPostgresqlOutput_2 = pstmtUpdate_tPostgresqlOutput_2
										.executeUpdate();
								updatedCount_tPostgresqlOutput_2 = updatedCount_tPostgresqlOutput_2
										+ updateFlag_tPostgresqlOutput_2;

								if (updateFlag_tPostgresqlOutput_2 == 0) {

									pstmtInsert_tPostgresqlOutput_2.setInt(1,
											output1.version);

									if (output1.code == null) {
										pstmtInsert_tPostgresqlOutput_2
												.setNull(2,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_2
												.setString(2, output1.code);
									}

									if (output1.description == null) {
										pstmtInsert_tPostgresqlOutput_2
												.setNull(3,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_2
												.setString(3,
														output1.description);
									}

									if (output1.skucode == null) {
										pstmtInsert_tPostgresqlOutput_2
												.setNull(4,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_2
												.setString(4, output1.skucode);
									}

									insertedCount_tPostgresqlOutput_2 = insertedCount_tPostgresqlOutput_2
											+ pstmtInsert_tPostgresqlOutput_2
													.executeUpdate();
									nb_line_tPostgresqlOutput_2++;

								} else {
									nb_line_tPostgresqlOutput_2++;

								}
							} catch (java.lang.Exception e) {

								whetherReject_tPostgresqlOutput_2 = true;
								throw (e);
							}
							if (!whetherReject_tPostgresqlOutput_2) {
							}
							if (batchSize_tPostgresqlOutput_2 <= batchSizeCounter_tPostgresqlOutput_2) {

							}

							commitCounter_tPostgresqlOutput_2++;
							if (commitEvery_tPostgresqlOutput_2 <= commitCounter_tPostgresqlOutput_2) {

								conn_tPostgresqlOutput_2.commit();

								commitCounter_tPostgresqlOutput_2 = 0;
							}

							tos_count_tPostgresqlOutput_2++;

							/**
							 * [tPostgresqlOutput_2 main ] stop
							 */

						} // End of branch "output1"

						/**
						 * [tPostgresqlInput_2 end ] start
						 */

						currentComponent = "tPostgresqlInput_2";

					}
				} finally {
					stmt_tPostgresqlInput_2.close();

					if (conn_tPostgresqlInput_2 != null
							&& !conn_tPostgresqlInput_2.isClosed()) {

						conn_tPostgresqlInput_2.commit();

						conn_tPostgresqlInput_2.close();

					}

				}
				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_2 end ] start
				 */

				currentComponent = "tPostgresqlOutput_2";

				if (pstmtUpdate_tPostgresqlOutput_2 != null) {

					pstmtUpdate_tPostgresqlOutput_2.close();

				}
				if (pstmtInsert_tPostgresqlOutput_2 != null) {

					pstmtInsert_tPostgresqlOutput_2.close();

				}

				conn_tPostgresqlOutput_2.commit();

				conn_tPostgresqlOutput_2.close();

				resourceMap.put("finish_tPostgresqlOutput_2", true);

				nb_line_deleted_tPostgresqlOutput_2 = nb_line_deleted_tPostgresqlOutput_2
						+ deletedCount_tPostgresqlOutput_2;
				nb_line_update_tPostgresqlOutput_2 = nb_line_update_tPostgresqlOutput_2
						+ updatedCount_tPostgresqlOutput_2;
				nb_line_inserted_tPostgresqlOutput_2 = nb_line_inserted_tPostgresqlOutput_2
						+ insertedCount_tPostgresqlOutput_2;
				nb_line_rejected_tPostgresqlOutput_2 = nb_line_rejected_tPostgresqlOutput_2
						+ rejectedCount_tPostgresqlOutput_2;

				globalMap.put("tPostgresqlOutput_2_NB_LINE",
						nb_line_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_2);

				ok_Hash.put("tPostgresqlOutput_2", true);
				end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_2 finally ] start
				 */

				currentComponent = "tPostgresqlInput_2";

				/**
				 * [tPostgresqlInput_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_2 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_2";

				if (resourceMap.get("finish_tPostgresqlOutput_2") == null) {
					if (resourceMap.get("conn_tPostgresqlOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tPostgresqlOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_2) {
							String errorMessage_tPostgresqlOutput_2 = "failed to close the connection in tPostgresqlOutput_2 :"
									+ sqlEx_tPostgresqlOutput_2.getMessage();

							System.err
									.println(errorMessage_tPostgresqlOutput_2);
						}
					}
				}

				/**
				 * [tPostgresqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("Trade-in: Total manufacturers inserted: "
						+ ((Integer) globalMap
								.get("tPostgresqlOutput_2_NB_LINE_INSERTED")));
				System.out.println("Trade-in: Total manufacturers updated: "
						+ ((Integer) globalMap
								.get("tPostgresqlOutput_2_NB_LINE_UPDATED")));

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final TradePreModelMigration TradePreModelMigrationClass = new TradePreModelMigration();

		int exitCode = TradePreModelMigrationClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = TradePreModelMigration.class
					.getClassLoader().getResourceAsStream(contextStr.toLowerCase() + ".talend.properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.cesearch_Server = (String) context
					.getProperty("cesearch_Server");
			context.cesearch_Database = (String) context
					.getProperty("cesearch_Database");
			context.cesearch_Port = (String) context
					.getProperty("cesearch_Port");
			String pwd_cesearch_Password_value = context
					.getProperty("cesearch_Password");
			context.cesearch_Password = null;
			if (pwd_cesearch_Password_value != null) {
				if (context_param.containsKey("cesearch_Password")) {// no need
																		// to
																		// decrypt
																		// if it
																		// come
																		// from
																		// program
																		// argument
																		// or
																		// parent
																		// job
																		// runtime
					context.cesearch_Password = pwd_cesearch_Password_value;
				} else if (!pwd_cesearch_Password_value.isEmpty()) {
					try {
						context.cesearch_Password = pwd_cesearch_Password_value;
						context.put("cesearch_Password",
								context.cesearch_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.cesearch_Login = (String) context
					.getProperty("cesearch_Login");
			context.cesearch_Schema = (String) context
					.getProperty("cesearch_Schema");
			context.ceadmindb_Port = (String) context
					.getProperty("ceadmindb_Port");
			context.ceadmindb_Schema = (String) context
					.getProperty("ceadmindb_Schema");
			context.ceadmindb_Server = (String) context
					.getProperty("ceadmindb_Server");
			String pwd_ceadmindb_Password_value = context
					.getProperty("ceadmindb_Password");
			context.ceadmindb_Password = null;
			if (pwd_ceadmindb_Password_value != null) {
				if (context_param.containsKey("ceadmindb_Password")) {// no need
																		// to
																		// decrypt
																		// if it
																		// come
																		// from
																		// program
																		// argument
																		// or
																		// parent
																		// job
																		// runtime
					context.ceadmindb_Password = pwd_ceadmindb_Password_value;
				} else if (!pwd_ceadmindb_Password_value.isEmpty()) {
					try {
						context.ceadmindb_Password = pwd_ceadmindb_Password_value;
						context.put("ceadmindb_Password",
								context.ceadmindb_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.ceadmindb_Database = (String) context
					.getProperty("ceadmindb_Database");
			context.ceadmindb_Login = (String) context
					.getProperty("ceadmindb_Login");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("cesearch_Server")) {
				context.cesearch_Server = (String) parentContextMap
						.get("cesearch_Server");
			}
			if (parentContextMap.containsKey("cesearch_Database")) {
				context.cesearch_Database = (String) parentContextMap
						.get("cesearch_Database");
			}
			if (parentContextMap.containsKey("cesearch_Port")) {
				context.cesearch_Port = (String) parentContextMap
						.get("cesearch_Port");
			}
			if (parentContextMap.containsKey("cesearch_Password")) {
				context.cesearch_Password = (java.lang.String) parentContextMap
						.get("cesearch_Password");
			}
			if (parentContextMap.containsKey("cesearch_Login")) {
				context.cesearch_Login = (String) parentContextMap
						.get("cesearch_Login");
			}
			if (parentContextMap.containsKey("cesearch_Schema")) {
				context.cesearch_Schema = (String) parentContextMap
						.get("cesearch_Schema");
			}
			if (parentContextMap.containsKey("ceadmindb_Port")) {
				context.ceadmindb_Port = (String) parentContextMap
						.get("ceadmindb_Port");
			}
			if (parentContextMap.containsKey("ceadmindb_Schema")) {
				context.ceadmindb_Schema = (String) parentContextMap
						.get("ceadmindb_Schema");
			}
			if (parentContextMap.containsKey("ceadmindb_Server")) {
				context.ceadmindb_Server = (String) parentContextMap
						.get("ceadmindb_Server");
			}
			if (parentContextMap.containsKey("ceadmindb_Password")) {
				context.ceadmindb_Password = (java.lang.String) parentContextMap
						.get("ceadmindb_Password");
			}
			if (parentContextMap.containsKey("ceadmindb_Database")) {
				context.ceadmindb_Database = (String) parentContextMap
						.get("ceadmindb_Database");
			}
			if (parentContextMap.containsKey("ceadmindb_Login")) {
				context.ceadmindb_Login = (String) parentContextMap
						.get("ceadmindb_Login");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("cesearch_Password");
		parametersToEncrypt.add("ceadmindb_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlInput_2) {
			globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", -1);

			e_tPostgresqlInput_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : TradePreModelMigration");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 57439 characters generated by Talend Open Studio for Data Integration on the
 * 21 November, 2014 6:59:45 PM IST
 ************************************************************************************************/
