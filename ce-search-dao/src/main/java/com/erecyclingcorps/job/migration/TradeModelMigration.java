// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.erecyclingcorps.job.migration;

import routines.Tokenizer;
import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: TradeModelMigration Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.0.20141024_1545
 * @status 
 */
public class TradeModelMigration implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (categorystring != null) {

				this.setProperty("categorystring", categorystring.toString());

			}

			if (ce_dealercategoryid != null) {

				this.setProperty("ce_dealercategoryid",
						ce_dealercategoryid.toString());

			}

			if (cesearchbatchuser != null) {

				this.setProperty("cesearchbatchuser",
						cesearchbatchuser.toString());

			}

			if (cew_dealercategoryid != null) {

				this.setProperty("cew_dealercategoryid",
						cew_dealercategoryid.toString());

			}

			if (jobdate != null) {

				String pattern_jobdate = "yyyy-MM-dd HH:mm:ss";
				String value_jobdate = "2011-11-21 17:05:50";
				String[] parts_jobdate = value_jobdate.split(";");
				if (parts_jobdate.length > 1) {
					pattern_jobdate = parts_jobdate[0];
					this.setProperty(
							"jobdate",
							pattern_jobdate
									+ ";"
									+ FormatterUtils.format_Date(jobdate,
											pattern_jobdate));
				} else {
					this.setProperty("jobdate", FormatterUtils.format_Date(
							jobdate, pattern_jobdate));
				}

			}

			if (programname != null) {

				this.setProperty("programname", programname.toString());

			}

			if (cesearch_Port != null) {

				this.setProperty("cesearch_Port", cesearch_Port.toString());

			}

			if (cesearch_Database != null) {

				this.setProperty("cesearch_Database",
						cesearch_Database.toString());

			}

			if (cesearch_Password != null) {

				this.setProperty("cesearch_Password",
						cesearch_Password.toString());

			}

			if (cesearch_Schema != null) {

				this.setProperty("cesearch_Schema", cesearch_Schema.toString());

			}

			if (cesearch_Server != null) {

				this.setProperty("cesearch_Server", cesearch_Server.toString());

			}

			if (cesearch_Login != null) {

				this.setProperty("cesearch_Login", cesearch_Login.toString());

			}

			if (ceadmindb_Port != null) {

				this.setProperty("ceadmindb_Port", ceadmindb_Port.toString());

			}

			if (ceadmindb_Schema != null) {

				this.setProperty("ceadmindb_Schema",
						ceadmindb_Schema.toString());

			}

			if (ceadmindb_Server != null) {

				this.setProperty("ceadmindb_Server",
						ceadmindb_Server.toString());

			}

			if (ceadmindb_Password != null) {

				this.setProperty("ceadmindb_Password",
						ceadmindb_Password.toString());

			}

			if (ceadmindb_Database != null) {

				this.setProperty("ceadmindb_Database",
						ceadmindb_Database.toString());

			}

			if (ceadmindb_Login != null) {

				this.setProperty("ceadmindb_Login", ceadmindb_Login.toString());

			}

		}

		public String categorystring;

		public String getCategorystring() {
			return this.categorystring;
		}

		public Long ce_dealercategoryid;

		public Long getCe_dealercategoryid() {
			return this.ce_dealercategoryid;
		}

		public Long cesearchbatchuser;

		public Long getCesearchbatchuser() {
			return this.cesearchbatchuser;
		}

		public Long cew_dealercategoryid;

		public Long getCew_dealercategoryid() {
			return this.cew_dealercategoryid;
		}

		public java.util.Date jobdate;

		public java.util.Date getJobdate() {
			return this.jobdate;
		}

		public String programname;

		public String getProgramname() {
			return this.programname;
		}

		public String cesearch_Port;

		public String getCesearch_Port() {
			return this.cesearch_Port;
		}

		public String cesearch_Database;

		public String getCesearch_Database() {
			return this.cesearch_Database;
		}

		public java.lang.String cesearch_Password;

		public java.lang.String getCesearch_Password() {
			return this.cesearch_Password;
		}

		public String cesearch_Schema;

		public String getCesearch_Schema() {
			return this.cesearch_Schema;
		}

		public String cesearch_Server;

		public String getCesearch_Server() {
			return this.cesearch_Server;
		}

		public String cesearch_Login;

		public String getCesearch_Login() {
			return this.cesearch_Login;
		}

		public String ceadmindb_Port;

		public String getCeadmindb_Port() {
			return this.ceadmindb_Port;
		}

		public String ceadmindb_Schema;

		public String getCeadmindb_Schema() {
			return this.ceadmindb_Schema;
		}

		public String ceadmindb_Server;

		public String getCeadmindb_Server() {
			return this.ceadmindb_Server;
		}

		public java.lang.String ceadmindb_Password;

		public java.lang.String getCeadmindb_Password() {
			return this.ceadmindb_Password;
		}

		public String ceadmindb_Database;

		public String getCeadmindb_Database() {
			return this.ceadmindb_Database;
		}

		public String ceadmindb_Login;

		public String getCeadmindb_Login() {
			return this.ceadmindb_Login;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "TradeModelMigration";
	private final String projectName = "SEARCHMIGRATION";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TradeModelMigration.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(TradeModelMigration.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostgresqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_cesearch_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_cesearch2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_18_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_20_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_21_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class manumodeloutStruct implements
			routines.system.IPersistableRow<manumodeloutStruct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long manufacturermodelid;

		public long getManufacturermodelid() {
			return this.manufacturermodelid;
		}

		public String modelnumber;

		public String getModelnumber() {
			return this.modelnumber;
		}

		public String modelcode;

		public String getModelcode() {
			return this.modelcode;
		}

		public long manufacturerid;

		public long getManufacturerid() {
			return this.manufacturerid;
		}

		public long description;

		public long getDescription() {
			return this.description;
		}

		public boolean noimage;

		public boolean getNoimage() {
			return this.noimage;
		}

		public String imageurl;

		public String getImageurl() {
			return this.imageurl;
		}

		public int imageversion;

		public int getImageversion() {
			return this.imageversion;
		}

		public String product;

		public String getProduct() {
			return this.product;
		}

		public String generation;

		public String getGeneration() {
			return this.generation;
		}

		public long createdby;

		public long getCreatedby() {
			return this.createdby;
		}

		public java.util.Date createddate;

		public java.util.Date getCreateddate() {
			return this.createddate;
		}

		public java.util.Date lastupdateddate;

		public java.util.Date getLastupdateddate() {
			return this.lastupdateddate;
		}

		public Long updatedby;

		public Long getUpdatedby() {
			return this.updatedby;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String weight;

		public String getWeight() {
			return this.weight;
		}

		public String fcccode;

		public String getFcccode() {
			return this.fcccode;
		}

		public boolean active;

		public boolean getActive() {
			return this.active;
		}

		public String batterytype;

		public String getBatterytype() {
			return this.batterytype;
		}

		public String adjustmentremindertext;

		public String getAdjustmentremindertext() {
			return this.adjustmentremindertext;
		}

		public Long identification_number;

		public Long getIdentification_number() {
			return this.identification_number;
		}

		public String colors;

		public String getColors() {
			return this.colors;
		}

		public String operatingsystem;

		public String getOperatingsystem() {
			return this.operatingsystem;
		}

		public String operatingsystemversion;

		public String getOperatingsystemversion() {
			return this.operatingsystemversion;
		}

		public String capacity;

		public String getCapacity() {
			return this.capacity;
		}

		public String productclass;

		public String getProductclass() {
			return this.productclass;
		}

		public String productfamily;

		public String getProductfamily() {
			return this.productfamily;
		}

		public Boolean lteenabled;

		public Boolean getLteenabled() {
			return this.lteenabled;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.modelcode == null) ? 0 : this.modelcode
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final manumodeloutStruct other = (manumodeloutStruct) obj;

			if (this.modelcode == null) {
				if (other.modelcode != null)
					return false;

			} else if (!this.modelcode.equals(other.modelcode))

				return false;

			return true;
		}

		public void copyDataTo(manumodeloutStruct other) {

			other.manufacturermodelid = this.manufacturermodelid;
			other.modelnumber = this.modelnumber;
			other.modelcode = this.modelcode;
			other.manufacturerid = this.manufacturerid;
			other.description = this.description;
			other.noimage = this.noimage;
			other.imageurl = this.imageurl;
			other.imageversion = this.imageversion;
			other.product = this.product;
			other.generation = this.generation;
			other.createdby = 1;
			other.createddate = this.createddate;
			other.lastupdateddate = this.lastupdateddate;
			other.updatedby = this.updatedby;
			other.version = this.version;
			other.weight = this.weight;
			other.fcccode = this.fcccode;
			other.active = this.active;
			other.batterytype = this.batterytype;
			other.adjustmentremindertext = this.adjustmentremindertext;
			other.identification_number = this.identification_number;
			other.colors = this.colors;
			other.operatingsystem = this.operatingsystem;
			other.operatingsystemversion = this.operatingsystemversion;
			other.capacity = this.capacity;
			other.productclass = this.productclass;
			other.productfamily = this.productfamily;
			other.lteenabled = this.lteenabled;

		}

		public void copyKeysDataTo(manumodeloutStruct other) {

			other.modelcode = this.modelcode;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradeModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradeModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.manufacturermodelid = dis.readLong();

					this.modelnumber = readString(dis);

					this.modelcode = readString(dis);

					this.manufacturerid = dis.readLong();

					this.description = dis.readLong();

					this.noimage = dis.readBoolean();

					this.imageurl = readString(dis);

					this.imageversion = dis.readInt();

					this.product = readString(dis);

					this.generation = readString(dis);

					this.createdby = dis.readLong();

					this.createddate = readDate(dis);

					this.lastupdateddate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.updatedby = null;
					} else {
						this.updatedby = dis.readLong();
					}

					this.version = dis.readInt();

					this.weight = readString(dis);

					this.fcccode = readString(dis);

					this.active = dis.readBoolean();

					this.batterytype = readString(dis);

					this.adjustmentremindertext = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.identification_number = null;
					} else {
						this.identification_number = dis.readLong();
					}

					this.colors = readString(dis);

					this.operatingsystem = readString(dis);

					this.operatingsystemversion = readString(dis);

					this.capacity = readString(dis);

					this.productclass = readString(dis);

					this.productfamily = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.lteenabled = null;
					} else {
						this.lteenabled = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.manufacturermodelid);

				// String

				writeString(this.modelnumber, dos);

				// String

				writeString(this.modelcode, dos);

				// long

				dos.writeLong(this.manufacturerid);

				// long

				dos.writeLong(this.description);

				// boolean

				dos.writeBoolean(this.noimage);

				// String

				writeString(this.imageurl, dos);

				// int

				dos.writeInt(this.imageversion);

				// String

				writeString(this.product, dos);

				// String

				writeString(this.generation, dos);

				// long

				dos.writeLong(this.createdby);

				// java.util.Date

				writeDate(this.createddate, dos);

				// java.util.Date

				writeDate(this.lastupdateddate, dos);

				// Long

				if (this.updatedby == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.updatedby);
				}

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.weight, dos);

				// String

				writeString(this.fcccode, dos);

				// boolean

				dos.writeBoolean(this.active);

				// String

				writeString(this.batterytype, dos);

				// String

				writeString(this.adjustmentremindertext, dos);

				// Long

				if (this.identification_number == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.identification_number);
				}

				// String

				writeString(this.colors, dos);

				// String

				writeString(this.operatingsystem, dos);

				// String

				writeString(this.operatingsystemversion, dos);

				// String

				writeString(this.capacity, dos);

				// String

				writeString(this.productclass, dos);

				// String

				writeString(this.productfamily, dos);

				// Boolean

				if (this.lteenabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.lteenabled);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("manufacturermodelid="
					+ String.valueOf(manufacturermodelid));
			sb.append(",modelnumber=" + modelnumber);
			sb.append(",modelcode=" + modelcode);
			sb.append(",manufacturerid=" + String.valueOf(manufacturerid));
			sb.append(",description=" + String.valueOf(description));
			sb.append(",noimage=" + String.valueOf(noimage));
			sb.append(",imageurl=" + imageurl);
			sb.append(",imageversion=" + String.valueOf(imageversion));
			sb.append(",product=" + product);
			sb.append(",generation=" + generation);
			sb.append(",createdby=" + 1);
			sb.append(",createddate=" + String.valueOf(createddate));
			sb.append(",lastupdateddate=" + String.valueOf(lastupdateddate));
			sb.append(",updatedby=" + String.valueOf(updatedby));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",weight=" + weight);
			sb.append(",fcccode=" + fcccode);
			sb.append(",active=" + String.valueOf(active));
			sb.append(",batterytype=" + batterytype);
			sb.append(",adjustmentremindertext=" + adjustmentremindertext);
			sb.append(",identification_number="
					+ String.valueOf(identification_number));
			sb.append(",colors=" + colors);
			sb.append(",operatingsystem=" + operatingsystem);
			sb.append(",operatingsystemversion=" + operatingsystemversion);
			sb.append(",capacity=" + capacity);
			sb.append(",productclass=" + productclass);
			sb.append(",productfamily=" + productfamily);
			sb.append(",lteenabled=" + String.valueOf(lteenabled));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(manumodeloutStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.modelcode, other.modelcode);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];

		public long manufacturermodelid;

		public long getManufacturermodelid() {
			return this.manufacturermodelid;
		}

		public String modelnumber;

		public String getModelnumber() {
			return this.modelnumber;
		}

		public String modelcode;

		public String getModelcode() {
			return this.modelcode;
		}

		public long manufacturerid;

		public long getManufacturerid() {
			return this.manufacturerid;
		}

		public String manufacturercode;

		public String getManufacturercode() {
			return this.manufacturercode;
		}

		public String description_labelcode;

		public String getDescription_labelcode() {
			return this.description_labelcode;
		}

		public boolean noimage;

		public boolean getNoimage() {
			return this.noimage;
		}

		public String imageurl;

		public String getImageurl() {
			return this.imageurl;
		}

		public int imageversion;

		public int getImageversion() {
			return this.imageversion;
		}

		public String product;

		public String getProduct() {
			return this.product;
		}

		public String generation;

		public String getGeneration() {
			return this.generation;
		}

		public Integer createdby;

		public Integer getCreatedby() {
			return this.createdby;
		}

		public java.util.Date createddate;

		public java.util.Date getCreateddate() {
			return this.createddate;
		}

		public java.util.Date lastupdateddate;

		public java.util.Date getLastupdateddate() {
			return this.lastupdateddate;
		}

		public String updatedby;

		public String getUpdatedby() {
			return this.updatedby;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String weight;

		public String getWeight() {
			return this.weight;
		}

		public String fcccode;

		public String getFcccode() {
			return this.fcccode;
		}

		public boolean active;

		public boolean getActive() {
			return this.active;
		}

		public String batterytype;

		public String getBatterytype() {
			return this.batterytype;
		}

		public String adjustmentremindertext;

		public String getAdjustmentremindertext() {
			return this.adjustmentremindertext;
		}

		public Long identification_number;

		public Long getIdentification_number() {
			return this.identification_number;
		}

		public String colors;

		public String getColors() {
			return this.colors;
		}

		public String operatingsystem;

		public String getOperatingsystem() {
			return this.operatingsystem;
		}

		public String operatingsystemversion;

		public String getOperatingsystemversion() {
			return this.operatingsystemversion;
		}

		public String capacity;

		public String getCapacity() {
			return this.capacity;
		}

		public String productclass;

		public String getProductclass() {
			return this.productclass;
		}

		public String productfamily;

		public String getProductfamily() {
			return this.productfamily;
		}

		public Boolean lteenabled;

		public Boolean getLteenabled() {
			return this.lteenabled;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradeModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradeModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.manufacturermodelid = dis.readLong();

					this.modelnumber = readString(dis);

					this.modelcode = readString(dis);

					this.manufacturerid = dis.readLong();

					this.manufacturercode = readString(dis);

					this.description_labelcode = readString(dis);

					this.noimage = dis.readBoolean();

					this.imageurl = readString(dis);

					this.imageversion = dis.readInt();

					this.product = readString(dis);

					this.generation = readString(dis);

					this.createdby = readInteger(dis);

					this.createddate = readDate(dis);

					this.lastupdateddate = readDate(dis);

					this.updatedby = readString(dis);

					this.version = dis.readInt();

					this.weight = readString(dis);

					this.fcccode = readString(dis);

					this.active = dis.readBoolean();

					this.batterytype = readString(dis);

					this.adjustmentremindertext = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.identification_number = null;
					} else {
						this.identification_number = dis.readLong();
					}

					this.colors = readString(dis);

					this.operatingsystem = readString(dis);

					this.operatingsystemversion = readString(dis);

					this.capacity = readString(dis);

					this.productclass = readString(dis);

					this.productfamily = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.lteenabled = null;
					} else {
						this.lteenabled = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.manufacturermodelid);

				// String

				writeString(this.modelnumber, dos);

				// String

				writeString(this.modelcode, dos);

				// long

				dos.writeLong(this.manufacturerid);

				// String

				writeString(this.manufacturercode, dos);

				// String

				writeString(this.description_labelcode, dos);

				// boolean

				dos.writeBoolean(this.noimage);

				// String

				writeString(this.imageurl, dos);

				// int

				dos.writeInt(this.imageversion);

				// String

				writeString(this.product, dos);

				// String

				writeString(this.generation, dos);

				// Integer

				writeInteger(this.createdby, dos);

				// java.util.Date

				writeDate(this.createddate, dos);

				// java.util.Date

				writeDate(this.lastupdateddate, dos);

				// String

				writeString(this.updatedby, dos);

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.weight, dos);

				// String

				writeString(this.fcccode, dos);

				// boolean

				dos.writeBoolean(this.active);

				// String

				writeString(this.batterytype, dos);

				// String

				writeString(this.adjustmentremindertext, dos);

				// Long

				if (this.identification_number == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.identification_number);
				}

				// String

				writeString(this.colors, dos);

				// String

				writeString(this.operatingsystem, dos);

				// String

				writeString(this.operatingsystemversion, dos);

				// String

				writeString(this.capacity, dos);

				// String

				writeString(this.productclass, dos);

				// String

				writeString(this.productfamily, dos);

				// Boolean

				if (this.lteenabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.lteenabled);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("manufacturermodelid="
					+ String.valueOf(manufacturermodelid));
			sb.append(",modelnumber=" + modelnumber);
			sb.append(",modelcode=" + modelcode);
			sb.append(",manufacturerid=" + String.valueOf(manufacturerid));
			sb.append(",manufacturercode=" + manufacturercode);
			sb.append(",description_labelcode=" + description_labelcode);
			sb.append(",noimage=" + String.valueOf(noimage));
			sb.append(",imageurl=" + imageurl);
			sb.append(",imageversion=" + String.valueOf(imageversion));
			sb.append(",product=" + product);
			sb.append(",generation=" + generation);
			sb.append(",createdby=" + 1);
			sb.append(",createddate=" + String.valueOf(createddate));
			sb.append(",lastupdateddate=" + String.valueOf(lastupdateddate));
			sb.append(",updatedby=" + updatedby);
			sb.append(",version=" + String.valueOf(version));
			sb.append(",weight=" + weight);
			sb.append(",fcccode=" + fcccode);
			sb.append(",active=" + String.valueOf(active));
			sb.append(",batterytype=" + batterytype);
			sb.append(",adjustmentremindertext=" + adjustmentremindertext);
			sb.append(",identification_number="
					+ String.valueOf(identification_number));
			sb.append(",colors=" + colors);
			sb.append(",operatingsystem=" + operatingsystem);
			sb.append(",operatingsystemversion=" + operatingsystemversion);
			sb.append(",capacity=" + capacity);
			sb.append(",productclass=" + productclass);
			sb.append(",productfamily=" + productfamily);
			sb.append(",lteenabled=" + String.valueOf(lteenabled));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_1Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_1Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long manufacturermodelid;

		public long getManufacturermodelid() {
			return this.manufacturermodelid;
		}

		public String modelnumber;

		public String getModelnumber() {
			return this.modelnumber;
		}

		public String modelcode;

		public String getModelcode() {
			return this.modelcode;
		}

		public long manufacturerid;

		public long getManufacturerid() {
			return this.manufacturerid;
		}

		public String manufacturercode;

		public String getManufacturercode() {
			return this.manufacturercode;
		}

		public String description_labelcode;

		public String getDescription_labelcode() {
			return this.description_labelcode;
		}

		public boolean noimage;

		public boolean getNoimage() {
			return this.noimage;
		}

		public String imageurl;

		public String getImageurl() {
			return this.imageurl;
		}

		public int imageversion;

		public int getImageversion() {
			return this.imageversion;
		}

		public String product;

		public String getProduct() {
			return this.product;
		}

		public String generation;

		public String getGeneration() {
			return this.generation;
		}

		public Integer createdby;

		public Integer getCreatedby() {
			return this.createdby;
		}

		public java.util.Date createddate;

		public java.util.Date getCreateddate() {
			return this.createddate;
		}

		public java.util.Date lastupdateddate;

		public java.util.Date getLastupdateddate() {
			return this.lastupdateddate;
		}

		public String updatedby;

		public String getUpdatedby() {
			return this.updatedby;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String weight;

		public String getWeight() {
			return this.weight;
		}

		public String fcccode;

		public String getFcccode() {
			return this.fcccode;
		}

		public boolean active;

		public boolean getActive() {
			return this.active;
		}

		public String batterytype;

		public String getBatterytype() {
			return this.batterytype;
		}

		public String adjustmentremindertext;

		public String getAdjustmentremindertext() {
			return this.adjustmentremindertext;
		}

		public Long identification_number;

		public Long getIdentification_number() {
			return this.identification_number;
		}

		public String colors;

		public String getColors() {
			return this.colors;
		}

		public String operatingsystem;

		public String getOperatingsystem() {
			return this.operatingsystem;
		}

		public String operatingsystemversion;

		public String getOperatingsystemversion() {
			return this.operatingsystemversion;
		}

		public String capacity;

		public String getCapacity() {
			return this.capacity;
		}

		public String productclass;

		public String getProductclass() {
			return this.productclass;
		}

		public String productfamily;

		public String getProductfamily() {
			return this.productfamily;
		}

		public Boolean lteenabled;

		public Boolean getLteenabled() {
			return this.lteenabled;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.modelcode == null) ? 0 : this.modelcode
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tPostgresqlInput_1Struct other = (after_tPostgresqlInput_1Struct) obj;

			if (this.modelcode == null) {
				if (other.modelcode != null)
					return false;

			} else if (!this.modelcode.equals(other.modelcode))

				return false;

			return true;
		}

		public void copyDataTo(after_tPostgresqlInput_1Struct other) {

			other.manufacturermodelid = this.manufacturermodelid;
			other.modelnumber = this.modelnumber;
			other.modelcode = this.modelcode;
			other.manufacturerid = this.manufacturerid;
			other.manufacturercode = this.manufacturercode;
			other.description_labelcode = this.description_labelcode;
			other.noimage = this.noimage;
			other.imageurl = this.imageurl;
			other.imageversion = this.imageversion;
			other.product = this.product;
			other.generation = this.generation;
			other.createdby = 1;
			other.createddate = this.createddate;
			other.lastupdateddate = this.lastupdateddate;
			other.updatedby = this.updatedby;
			other.version = this.version;
			other.weight = this.weight;
			other.fcccode = this.fcccode;
			other.active = this.active;
			other.batterytype = this.batterytype;
			other.adjustmentremindertext = this.adjustmentremindertext;
			other.identification_number = this.identification_number;
			other.colors = this.colors;
			other.operatingsystem = this.operatingsystem;
			other.operatingsystemversion = this.operatingsystemversion;
			other.capacity = this.capacity;
			other.productclass = this.productclass;
			other.productfamily = this.productfamily;
			other.lteenabled = this.lteenabled;

		}

		public void copyKeysDataTo(after_tPostgresqlInput_1Struct other) {

			other.modelcode = this.modelcode;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradeModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradeModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.manufacturermodelid = dis.readLong();

					this.modelnumber = readString(dis);

					this.modelcode = readString(dis);

					this.manufacturerid = dis.readLong();

					this.manufacturercode = readString(dis);

					this.description_labelcode = readString(dis);

					this.noimage = dis.readBoolean();

					this.imageurl = readString(dis);

					this.imageversion = dis.readInt();

					this.product = readString(dis);

					this.generation = readString(dis);

					this.createdby = readInteger(dis);

					this.createddate = readDate(dis);

					this.lastupdateddate = readDate(dis);

					this.updatedby = readString(dis);

					this.version = dis.readInt();

					this.weight = readString(dis);

					this.fcccode = readString(dis);

					this.active = dis.readBoolean();

					this.batterytype = readString(dis);

					this.adjustmentremindertext = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.identification_number = null;
					} else {
						this.identification_number = dis.readLong();
					}

					this.colors = readString(dis);

					this.operatingsystem = readString(dis);

					this.operatingsystemversion = readString(dis);

					this.capacity = readString(dis);

					this.productclass = readString(dis);

					this.productfamily = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.lteenabled = null;
					} else {
						this.lteenabled = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.manufacturermodelid);

				// String

				writeString(this.modelnumber, dos);

				// String

				writeString(this.modelcode, dos);

				// long

				dos.writeLong(this.manufacturerid);

				// String

				writeString(this.manufacturercode, dos);

				// String

				writeString(this.description_labelcode, dos);

				// boolean

				dos.writeBoolean(this.noimage);

				// String

				writeString(this.imageurl, dos);

				// int

				dos.writeInt(this.imageversion);

				// String

				writeString(this.product, dos);

				// String

				writeString(this.generation, dos);

				// Integer

				writeInteger(this.createdby, dos);

				// java.util.Date

				writeDate(this.createddate, dos);

				// java.util.Date

				writeDate(this.lastupdateddate, dos);

				// String

				writeString(this.updatedby, dos);

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.weight, dos);

				// String

				writeString(this.fcccode, dos);

				// boolean

				dos.writeBoolean(this.active);

				// String

				writeString(this.batterytype, dos);

				// String

				writeString(this.adjustmentremindertext, dos);

				// Long

				if (this.identification_number == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.identification_number);
				}

				// String

				writeString(this.colors, dos);

				// String

				writeString(this.operatingsystem, dos);

				// String

				writeString(this.operatingsystemversion, dos);

				// String

				writeString(this.capacity, dos);

				// String

				writeString(this.productclass, dos);

				// String

				writeString(this.productfamily, dos);

				// Boolean

				if (this.lteenabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.lteenabled);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("manufacturermodelid="
					+ String.valueOf(manufacturermodelid));
			sb.append(",modelnumber=" + modelnumber);
			sb.append(",modelcode=" + modelcode);
			sb.append(",manufacturerid=" + String.valueOf(manufacturerid));
			sb.append(",manufacturercode=" + manufacturercode);
			sb.append(",description_labelcode=" + description_labelcode);
			sb.append(",noimage=" + String.valueOf(noimage));
			sb.append(",imageurl=" + imageurl);
			sb.append(",imageversion=" + String.valueOf(imageversion));
			sb.append(",product=" + product);
			sb.append(",generation=" + generation);
			sb.append(",createdby=" +1);
			sb.append(",createddate=" + String.valueOf(createddate));
			sb.append(",lastupdateddate=" + String.valueOf(lastupdateddate));
			sb.append(",updatedby=" + updatedby);
			sb.append(",version=" + String.valueOf(version));
			sb.append(",weight=" + weight);
			sb.append(",fcccode=" + fcccode);
			sb.append(",active=" + String.valueOf(active));
			sb.append(",batterytype=" + batterytype);
			sb.append(",adjustmentremindertext=" + adjustmentremindertext);
			sb.append(",identification_number="
					+ String.valueOf(identification_number));
			sb.append(",colors=" + colors);
			sb.append(",operatingsystem=" + operatingsystem);
			sb.append(",operatingsystemversion=" + operatingsystemversion);
			sb.append(",capacity=" + capacity);
			sb.append(",productclass=" + productclass);
			sb.append(",productfamily=" + productfamily);
			sb.append(",lteenabled=" + String.valueOf(lteenabled));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.modelcode, other.modelcode);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				manumodeloutStruct manumodelout = new manumodeloutStruct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_1";

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = context.cesearch_Schema;

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "ref_manufacturermodel";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\"" + "ref_manufacturermodel";
				}

				int updateKeyCount_tPostgresqlOutput_1 = 1;
				if (updateKeyCount_tPostgresqlOutput_1 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_1 = "jdbc:postgresql://"
						+ context.cesearch_Server + ":" + context.cesearch_Port
						+ "/" + context.cesearch_Database;
				String dbUser_tPostgresqlOutput_1 = context.cesearch_Login;

				final String decryptedPassword_tPostgresqlOutput_1 = context.cesearch_Password;

				String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

				conn_tPostgresqlOutput_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_1,
								dbUser_tPostgresqlOutput_1,
								dbPwd_tPostgresqlOutput_1);

				resourceMap.put("conn_tPostgresqlOutput_1",
						conn_tPostgresqlOutput_1);
				conn_tPostgresqlOutput_1.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_1 = 10000;
				int commitCounter_tPostgresqlOutput_1 = 0;

				int batchSize_tPostgresqlOutput_1 = 10000;
				int batchSizeCounter_tPostgresqlOutput_1 = 0;

				int count_tPostgresqlOutput_1 = 0;
				String update_tPostgresqlOutput_1 = "UPDATE \""
						+ tableName_tPostgresqlOutput_1
						+ "\" SET \"modelnumber\" = ?,\"manufacturerid\" = ?,\"description\" = ?,\"noimage\" = ?,\"imageurl\" = ?,\"imageversion\" = ?,\"product\" = ?,\"generation\" = ?,\"createdby\" = ?,\"createddate\" = ?,\"lastupdateddate\" = ?,\"updatedby\" = ?,\"version\" = ?,\"weight\" = ?,\"fcccode\" = ?,\"active\" = ?,\"batterytype\" = ?,\"adjustmentremindertext\" = ?,\"identification_number\" = ?,\"colors\" = ?,\"operatingsystem\" = ?,\"operatingsystemversion\" = ?,\"capacity\" = ?,\"productclass\" = ?,\"productfamily\" = ?,\"lteenabled\" = ? WHERE \"modelcode\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(update_tPostgresqlOutput_1);
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\""
						+ "manufacturermodelid"
						+ "\",\"modelnumber\",\"modelcode\",\"manufacturerid\",\"description\",\"noimage\",\"imageurl\",\"imageversion\",\"product\",\"generation\",\"createdby\",\"createddate\",\"lastupdateddate\",\"updatedby\",\"version\",\"weight\",\"fcccode\",\"active\",\"batterytype\",\"adjustmentremindertext\",\"identification_number\",\"colors\",\"operatingsystem\",\"operatingsystemversion\",\"capacity\",\"productclass\",\"productfamily\",\"lteenabled\") VALUES ("
						+ "nextval('ref_manufacturermodel_manufacturermodelid_seq')"
						+ ",?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				manumodeloutStruct manumodelout_tmp = new manumodeloutStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_1);
				String dbUser_tPostgresqlInput_1 = context.ceadmindb_Login;

				final String decryptedPassword_tPostgresqlInput_1 = context.ceadmindb_Password;

				String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;

				String url_tPostgresqlInput_1 = "jdbc:postgresql://"
						+ context.ceadmindb_Server + ":"
						+ context.ceadmindb_Port + "/"
						+ context.ceadmindb_Database;

				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_1, dbUser_tPostgresqlInput_1,
						dbPwd_tPostgresqlInput_1);

				conn_tPostgresqlInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "SELECT\nmm.manufacturermodelid,\n   mm.modelnumber,\n  mm.modelcode,\n  m.manufacturerid,\n m.code as manufacturercode,\n  null as description_labelcode,\n  mm.noimage,\n  mm.imageurl,\n  mm.imageversion,\n  c.code as product, \n  c1.code as generation,\n  1 as createdby,\n  mm.createddate,\n  mm.lastupdateddate,\n  null as updatedby,\n  mm.version,\n  mm.weight,\n  mm.fcccode,\n  mm.active,\n  coalesce(c2.code,'OTHER') as batterytype,\n  mm.adjustmentremindertext,\n  mm.identification_number, \n  mm.colors,\n  mm.operatingsystem,\n  mm.operatingsystemversion,\n  mm.capacity,\n  mm.productclass,\n  mm.productfamily,\n  mm.lteenabled\n FROM\n    ref_manufacturermodel mm\n    inner join ref_manufacturer m on m.manufacturerid = mm.manufacturerid\n    left outer join ref_constant c on (c.constantid=mm.productid)\n    left outer join ref_constant c1 on (c1.constantid=mm.generationid)\n    left outer join ref_constant c2 on (c2.constantid=mm.batterytype)\nwhere mm.createddate >= '"
						+ context.jobdate
						+ "' or mm.lastupdateddate >='"
						+ context.jobdate + "'";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);
				java.sql.ResultSet rs_tPostgresqlInput_1 = null;
				try {
					rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
							.executeQuery(dbquery_tPostgresqlInput_1);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
							.getColumnCount();

					String tmpContent_tPostgresqlInput_1 = null;

					while (rs_tPostgresqlInput_1.next()) {
						nb_line_tPostgresqlInput_1++;

						if (colQtyInRs_tPostgresqlInput_1 < 1) {
							row1.manufacturermodelid = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(1) != null) {
								row1.manufacturermodelid = rs_tPostgresqlInput_1
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 2) {
							row1.modelnumber = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(2);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.modelnumber = tmpContent_tPostgresqlInput_1;
							} else {
								row1.modelnumber = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 3) {
							row1.modelcode = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(3);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.modelcode = tmpContent_tPostgresqlInput_1;
							} else {
								row1.modelcode = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 4) {
							row1.manufacturerid = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(4) != null) {
								row1.manufacturerid = rs_tPostgresqlInput_1
										.getLong(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 5) {
							row1.manufacturercode = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(5);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.manufacturercode = tmpContent_tPostgresqlInput_1;
							} else {
								row1.manufacturercode = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 6) {
							row1.description_labelcode = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(6);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.description_labelcode = tmpContent_tPostgresqlInput_1;
							} else {
								row1.description_labelcode = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 7) {
							row1.noimage = false;
						} else {

							if (rs_tPostgresqlInput_1.getObject(7) != null) {
								row1.noimage = rs_tPostgresqlInput_1
										.getBoolean(7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 8) {
							row1.imageurl = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(8);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.imageurl = tmpContent_tPostgresqlInput_1;
							} else {
								row1.imageurl = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 9) {
							row1.imageversion = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(9) != null) {
								row1.imageversion = rs_tPostgresqlInput_1
										.getInt(9);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 10) {
							row1.product = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(10);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.product = tmpContent_tPostgresqlInput_1;
							} else {
								row1.product = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 11) {
							row1.generation = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(11);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.generation = tmpContent_tPostgresqlInput_1;
							} else {
								row1.generation = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 12) {
							row1.createdby = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(12) != null) {
								row1.createdby = rs_tPostgresqlInput_1
										.getInt(12);
							} else {
								row1.createdby = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 13) {
							row1.createddate = null;
						} else {

							if (rs_tPostgresqlInput_1.getTimestamp(13) != null) {
								row1.createddate = new java.util.Date(
										rs_tPostgresqlInput_1.getTimestamp(13)
												.getTime());
							} else {
								row1.createddate = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 14) {
							row1.lastupdateddate = null;
						} else {

							if (rs_tPostgresqlInput_1.getTimestamp(14) != null) {
								row1.lastupdateddate = new java.util.Date(
										rs_tPostgresqlInput_1.getTimestamp(14)
												.getTime());
							} else {
								row1.lastupdateddate = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 15) {
							row1.updatedby = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(15);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.updatedby = tmpContent_tPostgresqlInput_1;
							} else {
								row1.updatedby = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 16) {
							row1.version = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(16) != null) {
								row1.version = rs_tPostgresqlInput_1.getInt(16);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 17) {
							row1.weight = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(17);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.weight = tmpContent_tPostgresqlInput_1;
							} else {
								row1.weight = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 18) {
							row1.fcccode = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(18);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.fcccode = tmpContent_tPostgresqlInput_1;
							} else {
								row1.fcccode = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 19) {
							row1.active = false;
						} else {

							if (rs_tPostgresqlInput_1.getObject(19) != null) {
								row1.active = rs_tPostgresqlInput_1
										.getBoolean(19);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 20) {
							row1.batterytype = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(20);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.batterytype = tmpContent_tPostgresqlInput_1;
							} else {
								row1.batterytype = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 21) {
							row1.adjustmentremindertext = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(21);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.adjustmentremindertext = tmpContent_tPostgresqlInput_1;
							} else {
								row1.adjustmentremindertext = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 22) {
							row1.identification_number = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(22) != null) {
								row1.identification_number = rs_tPostgresqlInput_1
										.getLong(22);
							} else {
								row1.identification_number = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 23) {
							row1.colors = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(23);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.colors = tmpContent_tPostgresqlInput_1;
							} else {
								row1.colors = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 24) {
							row1.operatingsystem = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(24);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.operatingsystem = tmpContent_tPostgresqlInput_1;
							} else {
								row1.operatingsystem = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 25) {
							row1.operatingsystemversion = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(25);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.operatingsystemversion = tmpContent_tPostgresqlInput_1;
							} else {
								row1.operatingsystemversion = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 26) {
							row1.capacity = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(26);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.capacity = tmpContent_tPostgresqlInput_1;
							} else {
								row1.capacity = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 27) {
							row1.productclass = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(27);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.productclass = tmpContent_tPostgresqlInput_1;
							} else {
								row1.productclass = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 28) {
							row1.productfamily = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(28);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.productfamily = tmpContent_tPostgresqlInput_1;
							} else {
								row1.productfamily = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 29) {
							row1.lteenabled = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(29) != null) {
								row1.lteenabled = rs_tPostgresqlInput_1
										.getBoolean(29);
							} else {
								row1.lteenabled = null;
							}
						}

						/**
						 * [tPostgresqlInput_1 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_1 main ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						tos_count_tPostgresqlInput_1++;

						/**
						 * [tPostgresqlInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.code = row1.manufacturercode;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

							if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

								forceLooprow2 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow2 = true;
						} // G 21

						row2Struct row2 = null;

						while ((tHash_Lookup_row2 != null && tHash_Lookup_row2
								.hasNext()) || forceLooprow2) { // G_TM_M_043

							// CALL close loop of lookup 'row2'

							row2Struct fromLookup_row2 = null;
							row2 = row2Default;

							if (!forceLooprow2) { // G 46

								fromLookup_row2 = tHash_Lookup_row2.next();

								if (fromLookup_row2 != null) {
									row2 = fromLookup_row2;
								}

							} // G 46

							forceLooprow2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								manumodelout = null;

								if (!rejectedInnerJoin_tMap_1) {

									// # Output table : 'manumodelout'
									manumodelout_tmp.manufacturermodelid = row1.manufacturermodelid;
									manumodelout_tmp.modelnumber = row1.modelnumber;
									manumodelout_tmp.modelcode = row1.modelcode;
									manumodelout_tmp.manufacturerid = row2.manufacturerid;
									manumodelout_tmp.description = 1;
									manumodelout_tmp.noimage = row1.noimage;
									manumodelout_tmp.imageurl = row1.imageurl;
									manumodelout_tmp.imageversion = row1.imageversion;
									manumodelout_tmp.product = row1.product;
									manumodelout_tmp.generation = row1.generation;
									manumodelout_tmp.createdby = 1;
									manumodelout_tmp.createddate = row1.createddate;
									manumodelout_tmp.lastupdateddate = row1.lastupdateddate;
									manumodelout_tmp.updatedby = null;
									manumodelout_tmp.version = row1.version;
									manumodelout_tmp.weight = row1.weight;
									manumodelout_tmp.fcccode = row1.fcccode;
									manumodelout_tmp.active = row1.active;
									manumodelout_tmp.batterytype = row1.batterytype;
									manumodelout_tmp.adjustmentremindertext = row1.adjustmentremindertext;
									manumodelout_tmp.identification_number = row1.identification_number;
									manumodelout_tmp.colors = row1.colors;
									manumodelout_tmp.operatingsystem = row1.operatingsystem;
									manumodelout_tmp.operatingsystemversion = row1.operatingsystemversion;
									manumodelout_tmp.capacity = row1.capacity;
									manumodelout_tmp.productclass = row1.productclass;
									manumodelout_tmp.productfamily = row1.productfamily;
									manumodelout_tmp.lteenabled = row1.lteenabled;
									manumodelout = manumodelout_tmp;
								} // closing inner join bracket (2)
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "manumodelout"
							if (manumodelout != null) {

								/**
								 * [tPostgresqlOutput_1 main ] start
								 */

								currentComponent = "tPostgresqlOutput_1";

								whetherReject_tPostgresqlOutput_1 = false;
								int updateFlag_tPostgresqlOutput_1 = 0;
								if (manumodelout.modelnumber == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											1, manumodelout.modelnumber);
								}

								pstmtUpdate_tPostgresqlOutput_1.setLong(2,
										manumodelout.manufacturerid);

								pstmtUpdate_tPostgresqlOutput_1.setLong(3,
										manumodelout.description);

								pstmtUpdate_tPostgresqlOutput_1.setBoolean(4,
										manumodelout.noimage);

								if (manumodelout.imageurl == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											5, manumodelout.imageurl);
								}

								pstmtUpdate_tPostgresqlOutput_1.setInt(6,
										manumodelout.imageversion);

								if (manumodelout.product == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											7, manumodelout.product);
								}

								if (manumodelout.generation == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											8, manumodelout.generation);
								}

								pstmtUpdate_tPostgresqlOutput_1.setLong(9,
										manumodelout.createdby);

								if (manumodelout.createddate != null) {
									pstmtUpdate_tPostgresqlOutput_1
											.setTimestamp(
													10,
													new java.sql.Timestamp(
															manumodelout.createddate
																	.getTime()));
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setNull(10,
											java.sql.Types.TIMESTAMP);
								}

								if (manumodelout.lastupdateddate != null) {
									pstmtUpdate_tPostgresqlOutput_1
											.setTimestamp(
													11,
													new java.sql.Timestamp(
															manumodelout.lastupdateddate
																	.getTime()));
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setNull(11,
											java.sql.Types.TIMESTAMP);
								}

								if (manumodelout.updatedby == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(12,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setLong(12,
											manumodelout.updatedby);
								}

								pstmtUpdate_tPostgresqlOutput_1.setInt(13,
										manumodelout.version);

								if (manumodelout.weight == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(14,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											14, manumodelout.weight);
								}

								if (manumodelout.fcccode == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(15,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											15, manumodelout.fcccode);
								}

								pstmtUpdate_tPostgresqlOutput_1.setBoolean(16,
										manumodelout.active);

								if (manumodelout.batterytype == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(17,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											17, manumodelout.batterytype);
								}

								if (manumodelout.adjustmentremindertext == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(18,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1
											.setString(
													18,
													manumodelout.adjustmentremindertext);
								}

								if (manumodelout.identification_number == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(19,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setLong(19,
											manumodelout.identification_number);
								}

								if (manumodelout.colors == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(20,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											20, manumodelout.colors);
								}

								if (manumodelout.operatingsystem == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(21,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											21, manumodelout.operatingsystem);
								}

								if (manumodelout.operatingsystemversion == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(22,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1
											.setString(
													22,
													manumodelout.operatingsystemversion);
								}

								if (manumodelout.capacity == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(23,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											23, manumodelout.capacity);
								}

								if (manumodelout.productclass == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(24,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											24, manumodelout.productclass);
								}

								if (manumodelout.productfamily == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(25,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											25, manumodelout.productfamily);
								}

								if (manumodelout.lteenabled == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(26,
											java.sql.Types.BOOLEAN);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setBoolean(
											26, manumodelout.lteenabled);
								}

								if (manumodelout.modelcode == null) {
									pstmtUpdate_tPostgresqlOutput_1.setNull(
											27 + count_tPostgresqlOutput_1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_1.setString(
											27 + count_tPostgresqlOutput_1,
											manumodelout.modelcode);
								}

								try {

									updateFlag_tPostgresqlOutput_1 = pstmtUpdate_tPostgresqlOutput_1
											.executeUpdate();
									updatedCount_tPostgresqlOutput_1 = updatedCount_tPostgresqlOutput_1
											+ updateFlag_tPostgresqlOutput_1;

									if (updateFlag_tPostgresqlOutput_1 == 0) {

										if (manumodelout.modelnumber == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															1,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(
															1,
															manumodelout.modelnumber);
										}

										if (manumodelout.modelcode == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															2,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(
															2,
															manumodelout.modelcode);
										}

										pstmtInsert_tPostgresqlOutput_1
												.setLong(
														3,
														manumodelout.manufacturerid);

										pstmtInsert_tPostgresqlOutput_1
												.setLong(
														4,
														manumodelout.description);

										pstmtInsert_tPostgresqlOutput_1
												.setBoolean(5,
														manumodelout.noimage);

										if (manumodelout.imageurl == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															6,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(
															6,
															manumodelout.imageurl);
										}

										pstmtInsert_tPostgresqlOutput_1.setInt(
												7, manumodelout.imageversion);

										if (manumodelout.product == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															8,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(
															8,
															manumodelout.product);
										}

										if (manumodelout.generation == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															9,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(
															9,
															manumodelout.generation);
										}

										pstmtInsert_tPostgresqlOutput_1
												.setLong(10,
														manumodelout.createdby);

										if (manumodelout.createddate != null) {
											pstmtInsert_tPostgresqlOutput_1
													.setTimestamp(
															11,
															new java.sql.Timestamp(
																	manumodelout.createddate
																			.getTime()));
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															11,
															java.sql.Types.TIMESTAMP);
										}

										if (manumodelout.lastupdateddate != null) {
											pstmtInsert_tPostgresqlOutput_1
													.setTimestamp(
															12,
															new java.sql.Timestamp(
																	manumodelout.lastupdateddate
																			.getTime()));
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															12,
															java.sql.Types.TIMESTAMP);
										}

										if (manumodelout.updatedby == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															13,
															java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setLong(
															13,
															manumodelout.updatedby);
										}

										pstmtInsert_tPostgresqlOutput_1.setInt(
												14, manumodelout.version);

										if (manumodelout.weight == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															15,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(15,
															manumodelout.weight);
										}

										if (manumodelout.fcccode == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															16,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(
															16,
															manumodelout.fcccode);
										}

										pstmtInsert_tPostgresqlOutput_1
												.setBoolean(17,
														manumodelout.active);

										if (manumodelout.batterytype == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															18,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(
															18,
															manumodelout.batterytype);
										}

										if (manumodelout.adjustmentremindertext == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															19,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(
															19,
															manumodelout.adjustmentremindertext);
										}

										if (manumodelout.identification_number == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															20,
															java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setLong(
															20,
															manumodelout.identification_number);
										}

										if (manumodelout.colors == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															21,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(21,
															manumodelout.colors);
										}

										if (manumodelout.operatingsystem == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															22,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(
															22,
															manumodelout.operatingsystem);
										}

										if (manumodelout.operatingsystemversion == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															23,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(
															23,
															manumodelout.operatingsystemversion);
										}

										if (manumodelout.capacity == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															24,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(
															24,
															manumodelout.capacity);
										}

										if (manumodelout.productclass == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															25,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(
															25,
															manumodelout.productclass);
										}

										if (manumodelout.productfamily == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															26,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setString(
															26,
															manumodelout.productfamily);
										}

										if (manumodelout.lteenabled == null) {
											pstmtInsert_tPostgresqlOutput_1
													.setNull(
															27,
															java.sql.Types.BOOLEAN);
										} else {
											pstmtInsert_tPostgresqlOutput_1
													.setBoolean(
															27,
															manumodelout.lteenabled);
										}

										insertedCount_tPostgresqlOutput_1 = insertedCount_tPostgresqlOutput_1
												+ pstmtInsert_tPostgresqlOutput_1
														.executeUpdate();
										nb_line_tPostgresqlOutput_1++;

									} else {
										nb_line_tPostgresqlOutput_1++;

									}
								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_1 = true;
									throw (e);
								}
								if (!whetherReject_tPostgresqlOutput_1) {
								}
								if (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1) {

								}

								commitCounter_tPostgresqlOutput_1++;
								if (commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {

									conn_tPostgresqlOutput_1.commit();

									commitCounter_tPostgresqlOutput_1 = 0;
								}

								tos_count_tPostgresqlOutput_1++;

								/**
								 * [tPostgresqlOutput_1 main ] stop
								 */

							} // End of branch "manumodelout"

						} // close loop of lookup 'row2' // G_TM_M_043

						/**
						 * [tPostgresqlInput_1 end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

					}
				} finally {
					stmt_tPostgresqlInput_1.close();

					if (conn_tPostgresqlInput_1 != null
							&& !conn_tPostgresqlInput_1.isClosed()) {

						conn_tPostgresqlInput_1.commit();

						conn_tPostgresqlInput_1.close();

					}

				}
				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (pstmtUpdate_tPostgresqlOutput_1 != null) {

					pstmtUpdate_tPostgresqlOutput_1.close();

				}
				if (pstmtInsert_tPostgresqlOutput_1 != null) {

					pstmtInsert_tPostgresqlOutput_1.close();

				}

				conn_tPostgresqlOutput_1.commit();

				conn_tPostgresqlOutput_1.close();

				resourceMap.put("finish_tPostgresqlOutput_1", true);

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tPostgresqlInput_1 finally ] start
				 */

				currentComponent = "tPostgresqlInput_1";

				/**
				 * [tPostgresqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (resourceMap.get("finish_tPostgresqlOutput_1") == null) {
					if (resourceMap.get("conn_tPostgresqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tPostgresqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
							String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :"
									+ sqlEx_tPostgresqlOutput_1.getMessage();

							System.err
									.println(errorMessage_tPostgresqlOutput_1);
						}
					}
				}

				/**
				 * [tPostgresqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out
						.println("Trade-in: Total Manufacturer models (program independent) inserted: "
								+ ((Integer) globalMap
										.get("tPostgresqlOutput_1_NB_LINE_UPDATED")));

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tPostgresqlInput_4Process(globalMap);

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class fs_attachmentStruct implements
			routines.system.IPersistableRow<fs_attachmentStruct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long attachmentid;

		public long getAttachmentid() {
			return this.attachmentid;
		}

		public Object attachment;

		public Object getAttachment() {
			return this.attachment;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.attachmentid;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final fs_attachmentStruct other = (fs_attachmentStruct) obj;

			if (this.attachmentid != other.attachmentid)
				return false;

			return true;
		}

		public void copyDataTo(fs_attachmentStruct other) {

			other.attachmentid = this.attachmentid;
			other.attachment = this.attachment;
			other.version = this.version;

		}

		public void copyKeysDataTo(fs_attachmentStruct other) {

			other.attachmentid = this.attachmentid;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.attachmentid = dis.readLong();

					this.attachment = (Object) dis.readObject();

					this.version = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.attachmentid);

				// Object

				dos.writeObject(this.attachment);

				// int

				dos.writeInt(this.version);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("attachmentid=" + String.valueOf(attachmentid));
			sb.append(",attachment=" + String.valueOf(attachment));
			sb.append(",version=" + String.valueOf(version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fs_attachmentStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.attachmentid,
					other.attachmentid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];

		public long attachmentid;

		public long getAttachmentid() {
			return this.attachmentid;
		}

		public Object attachment;

		public Object getAttachment() {
			return this.attachment;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.attachmentid = dis.readLong();

					this.attachment = (Object) dis.readObject();

					this.version = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.attachmentid);

				// Object

				dos.writeObject(this.attachment);

				// int

				dos.writeInt(this.version);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("attachmentid=" + String.valueOf(attachmentid));
			sb.append(",attachment=" + String.valueOf(attachment));
			sb.append(",version=" + String.valueOf(version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				fs_attachmentStruct fs_attachment = new fs_attachmentStruct();

				/**
				 * [tPostgresqlOutput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_3", false);
				start_Hash.put("tPostgresqlOutput_3",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_3";

				int tos_count_tPostgresqlOutput_3 = 0;

				String dbschema_tPostgresqlOutput_3 = null;
				dbschema_tPostgresqlOutput_3 = context.cesearch_Schema;

				String tableName_tPostgresqlOutput_3 = null;
				if (dbschema_tPostgresqlOutput_3 == null
						|| dbschema_tPostgresqlOutput_3.trim().length() == 0) {
					tableName_tPostgresqlOutput_3 = "fs_attachment";
				} else {
					tableName_tPostgresqlOutput_3 = dbschema_tPostgresqlOutput_3
							+ "\".\"" + "fs_attachment";
				}

				int updateKeyCount_tPostgresqlOutput_3 = 1;
				if (updateKeyCount_tPostgresqlOutput_3 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_3 = 0;
				int nb_line_update_tPostgresqlOutput_3 = 0;
				int nb_line_inserted_tPostgresqlOutput_3 = 0;
				int nb_line_deleted_tPostgresqlOutput_3 = 0;
				int nb_line_rejected_tPostgresqlOutput_3 = 0;

				int deletedCount_tPostgresqlOutput_3 = 0;
				int updatedCount_tPostgresqlOutput_3 = 0;
				int insertedCount_tPostgresqlOutput_3 = 0;
				int rejectedCount_tPostgresqlOutput_3 = 0;

				boolean whetherReject_tPostgresqlOutput_3 = false;

				java.sql.Connection conn_tPostgresqlOutput_3 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_3 = "jdbc:postgresql://"
						+ context.cesearch_Server + ":" + context.cesearch_Port
						+ "/" + context.cesearch_Database;
				String dbUser_tPostgresqlOutput_3 = context.cesearch_Login;

				final String decryptedPassword_tPostgresqlOutput_3 = context.cesearch_Password;

				String dbPwd_tPostgresqlOutput_3 = decryptedPassword_tPostgresqlOutput_3;

				conn_tPostgresqlOutput_3 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_3,
								dbUser_tPostgresqlOutput_3,
								dbPwd_tPostgresqlOutput_3);

				resourceMap.put("conn_tPostgresqlOutput_3",
						conn_tPostgresqlOutput_3);
				conn_tPostgresqlOutput_3.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_3 = 10000;
				int commitCounter_tPostgresqlOutput_3 = 0;

				int count_tPostgresqlOutput_3 = 0;
				String update_tPostgresqlOutput_3 = "UPDATE \""
						+ tableName_tPostgresqlOutput_3
						+ "\" SET \"attachment\" = ?,\"version\" = ? WHERE \"attachmentid\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
						.prepareStatement(update_tPostgresqlOutput_3);
				String insert_tPostgresqlOutput_3 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_3
						+ "\" (\"attachmentid\",\"attachment\",\"version\") VALUES (?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
						.prepareStatement(insert_tPostgresqlOutput_3);

				/**
				 * [tPostgresqlOutput_3 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				fs_attachmentStruct fs_attachment_tmp = new fs_attachmentStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_4", false);
				start_Hash
						.put("tPostgresqlInput_4", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_4";

				int tos_count_tPostgresqlInput_4 = 0;

				int nb_line_tPostgresqlInput_4 = 0;
				java.sql.Connection conn_tPostgresqlInput_4 = null;
				String driverClass_tPostgresqlInput_4 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_4);
				String dbUser_tPostgresqlInput_4 = context.ceadmindb_Login;

				final String decryptedPassword_tPostgresqlInput_4 = context.ceadmindb_Password;

				String dbPwd_tPostgresqlInput_4 = decryptedPassword_tPostgresqlInput_4;

				String url_tPostgresqlInput_4 = "jdbc:postgresql://"
						+ context.ceadmindb_Server + ":"
						+ context.ceadmindb_Port + "/"
						+ context.ceadmindb_Database;

				conn_tPostgresqlInput_4 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_4, dbUser_tPostgresqlInput_4,
						dbPwd_tPostgresqlInput_4);

				conn_tPostgresqlInput_4.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4
						.createStatement();

				String dbquery_tPostgresqlInput_4 = "select * from fs_attachment";

				globalMap.put("tPostgresqlInput_4_QUERY",
						dbquery_tPostgresqlInput_4);
				java.sql.ResultSet rs_tPostgresqlInput_4 = null;
				try {
					rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4
							.executeQuery(dbquery_tPostgresqlInput_4);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4
							.getColumnCount();

					String tmpContent_tPostgresqlInput_4 = null;

					while (rs_tPostgresqlInput_4.next()) {
						nb_line_tPostgresqlInput_4++;

						if (colQtyInRs_tPostgresqlInput_4 < 1) {
							row4.attachmentid = 0;
						} else {

							if (rs_tPostgresqlInput_4.getObject(1) != null) {
								row4.attachmentid = rs_tPostgresqlInput_4
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 2) {
							row4.attachment = null;
						} else {

							if (rs_tPostgresqlInput_4.getObject(2) != null) {
								row4.attachment = rs_tPostgresqlInput_4
										.getObject(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 3) {
							row4.version = 0;
						} else {

							if (rs_tPostgresqlInput_4.getObject(3) != null) {
								row4.version = rs_tPostgresqlInput_4.getInt(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_4 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_4 main ] start
						 */

						currentComponent = "tPostgresqlInput_4";

						tos_count_tPostgresqlInput_4++;

						/**
						 * [tPostgresqlInput_4 main ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							fs_attachment = null;

							// # Output table : 'fs_attachment'
							fs_attachment_tmp.attachmentid = row4.attachmentid;
							fs_attachment_tmp.attachment = row4.attachment;
							fs_attachment_tmp.version = row4.version;
							fs_attachment = fs_attachment_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */
						// Start of branch "fs_attachment"
						if (fs_attachment != null) {

							/**
							 * [tPostgresqlOutput_3 main ] start
							 */

							currentComponent = "tPostgresqlOutput_3";

							whetherReject_tPostgresqlOutput_3 = false;
							int updateFlag_tPostgresqlOutput_3 = 0;
							if (fs_attachment.attachment == null) {
								pstmtUpdate_tPostgresqlOutput_3.setNull(1,
										java.sql.Types.OTHER);
							} else {
								pstmtUpdate_tPostgresqlOutput_3.setObject(1,
										fs_attachment.attachment);
							}

							pstmtUpdate_tPostgresqlOutput_3.setInt(2,
									fs_attachment.version);

							pstmtUpdate_tPostgresqlOutput_3.setLong(
									3 + count_tPostgresqlOutput_3,
									fs_attachment.attachmentid);

							try {

								updateFlag_tPostgresqlOutput_3 = pstmtUpdate_tPostgresqlOutput_3
										.executeUpdate();
								updatedCount_tPostgresqlOutput_3 = updatedCount_tPostgresqlOutput_3
										+ updateFlag_tPostgresqlOutput_3;

								if (updateFlag_tPostgresqlOutput_3 == 0) {

									pstmtInsert_tPostgresqlOutput_3.setLong(1,
											fs_attachment.attachmentid);

									if (fs_attachment.attachment == null) {
										pstmtInsert_tPostgresqlOutput_3
												.setNull(2,
														java.sql.Types.OTHER);
									} else {
										pstmtInsert_tPostgresqlOutput_3
												.setObject(
														2,
														fs_attachment.attachment);
									}

									pstmtInsert_tPostgresqlOutput_3.setInt(3,
											fs_attachment.version);

									insertedCount_tPostgresqlOutput_3 = insertedCount_tPostgresqlOutput_3
											+ pstmtInsert_tPostgresqlOutput_3
													.executeUpdate();
									nb_line_tPostgresqlOutput_3++;

								} else {
									nb_line_tPostgresqlOutput_3++;

								}
							} catch (java.lang.Exception e) {

								whetherReject_tPostgresqlOutput_3 = true;
								nb_line_tPostgresqlOutput_3++;
								System.err.print(e.getMessage());
							}
							if (!whetherReject_tPostgresqlOutput_3) {
							}
							commitCounter_tPostgresqlOutput_3++;
							if (commitEvery_tPostgresqlOutput_3 <= commitCounter_tPostgresqlOutput_3) {

								conn_tPostgresqlOutput_3.commit();

								commitCounter_tPostgresqlOutput_3 = 0;
							}

							tos_count_tPostgresqlOutput_3++;

							/**
							 * [tPostgresqlOutput_3 main ] stop
							 */

						} // End of branch "fs_attachment"

						/**
						 * [tPostgresqlInput_4 end ] start
						 */

						currentComponent = "tPostgresqlInput_4";

					}
				} finally {
					stmt_tPostgresqlInput_4.close();

					if (conn_tPostgresqlInput_4 != null
							&& !conn_tPostgresqlInput_4.isClosed()) {

						conn_tPostgresqlInput_4.commit();

						conn_tPostgresqlInput_4.close();

					}

				}
				globalMap.put("tPostgresqlInput_4_NB_LINE",
						nb_line_tPostgresqlInput_4);

				ok_Hash.put("tPostgresqlInput_4", true);
				end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_3 end ] start
				 */

				currentComponent = "tPostgresqlOutput_3";

				if (pstmtUpdate_tPostgresqlOutput_3 != null) {

					pstmtUpdate_tPostgresqlOutput_3.close();

				}
				if (pstmtInsert_tPostgresqlOutput_3 != null) {

					pstmtInsert_tPostgresqlOutput_3.close();

				}

				conn_tPostgresqlOutput_3.commit();

				conn_tPostgresqlOutput_3.close();

				resourceMap.put("finish_tPostgresqlOutput_3", true);

				nb_line_deleted_tPostgresqlOutput_3 = nb_line_deleted_tPostgresqlOutput_3
						+ deletedCount_tPostgresqlOutput_3;
				nb_line_update_tPostgresqlOutput_3 = nb_line_update_tPostgresqlOutput_3
						+ updatedCount_tPostgresqlOutput_3;
				nb_line_inserted_tPostgresqlOutput_3 = nb_line_inserted_tPostgresqlOutput_3
						+ insertedCount_tPostgresqlOutput_3;
				nb_line_rejected_tPostgresqlOutput_3 = nb_line_rejected_tPostgresqlOutput_3
						+ rejectedCount_tPostgresqlOutput_3;

				globalMap.put("tPostgresqlOutput_3_NB_LINE",
						nb_line_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_3);

				ok_Hash.put("tPostgresqlOutput_3", true);
				end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());

				tPostgresqlInput_3Process(globalMap);

				/**
				 * [tPostgresqlOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_4 finally ] start
				 */

				currentComponent = "tPostgresqlInput_4";

				/**
				 * [tPostgresqlInput_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_3 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_3";

				if (resourceMap.get("finish_tPostgresqlOutput_3") == null) {
					if (resourceMap.get("conn_tPostgresqlOutput_3") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tPostgresqlOutput_3")).close();

						} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_3) {
							String errorMessage_tPostgresqlOutput_3 = "failed to close the connection in tPostgresqlOutput_3 :"
									+ sqlEx_tPostgresqlOutput_3.getMessage();

							System.err
									.println(errorMessage_tPostgresqlOutput_3);
						}
					}
				}

				/**
				 * [tPostgresqlOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}

	public static class out_mf_attachmentStruct implements
			routines.system.IPersistableRow<out_mf_attachmentStruct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long modelattachmentid;

		public long getModelattachmentid() {
			return this.modelattachmentid;
		}

		public long manufacturermodelid;

		public long getManufacturermodelid() {
			return this.manufacturermodelid;
		}

		public long attachmentid;

		public long getAttachmentid() {
			return this.attachmentid;
		}

		public String attachmenttype;

		public String getAttachmenttype() {
			return this.attachmenttype;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.attachmentid;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out_mf_attachmentStruct other = (out_mf_attachmentStruct) obj;

			if (this.attachmentid != other.attachmentid)
				return false;

			return true;
		}

		public void copyDataTo(out_mf_attachmentStruct other) {

			other.modelattachmentid = this.modelattachmentid;
			other.manufacturermodelid = this.manufacturermodelid;
			other.attachmentid = this.attachmentid;
			other.attachmenttype = this.attachmenttype;
			other.version = this.version;

		}

		public void copyKeysDataTo(out_mf_attachmentStruct other) {

			other.attachmentid = this.attachmentid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradeModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradeModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.modelattachmentid = dis.readLong();

					this.manufacturermodelid = dis.readLong();

					this.attachmentid = dis.readLong();

					this.attachmenttype = readString(dis);

					this.version = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.modelattachmentid);

				// long

				dos.writeLong(this.manufacturermodelid);

				// long

				dos.writeLong(this.attachmentid);

				// String

				writeString(this.attachmenttype, dos);

				// int

				dos.writeInt(this.version);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("modelattachmentid=" + String.valueOf(modelattachmentid));
			sb.append(",manufacturermodelid="
					+ String.valueOf(manufacturermodelid));
			sb.append(",attachmentid=" + String.valueOf(attachmentid));
			sb.append(",attachmenttype=" + attachmenttype);
			sb.append(",version=" + String.valueOf(version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out_mf_attachmentStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.attachmentid,
					other.attachmentid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];

		public long modelattachmentid;

		public long getModelattachmentid() {
			return this.modelattachmentid;
		}

		public long manufacturermodelid;

		public long getManufacturermodelid() {
			return this.manufacturermodelid;
		}

		public String modelcode;

		public String getModelcode() {
			return this.modelcode;
		}

		public long attachmentid;

		public long getAttachmentid() {
			return this.attachmentid;
		}

		public String attachmenttype;

		public String getAttachmenttype() {
			return this.attachmenttype;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradeModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradeModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.modelattachmentid = dis.readLong();

					this.manufacturermodelid = dis.readLong();

					this.modelcode = readString(dis);

					this.attachmentid = dis.readLong();

					this.attachmenttype = readString(dis);

					this.version = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.modelattachmentid);

				// long

				dos.writeLong(this.manufacturermodelid);

				// String

				writeString(this.modelcode, dos);

				// long

				dos.writeLong(this.attachmentid);

				// String

				writeString(this.attachmenttype, dos);

				// int

				dos.writeInt(this.version);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("modelattachmentid=" + String.valueOf(modelattachmentid));
			sb.append(",manufacturermodelid="
					+ String.valueOf(manufacturermodelid));
			sb.append(",modelcode=" + modelcode);
			sb.append(",attachmentid=" + String.valueOf(attachmentid));
			sb.append(",attachmenttype=" + attachmenttype);
			sb.append(",version=" + String.valueOf(version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_3Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_3Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long modelattachmentid;

		public long getModelattachmentid() {
			return this.modelattachmentid;
		}

		public long manufacturermodelid;

		public long getManufacturermodelid() {
			return this.manufacturermodelid;
		}

		public String modelcode;

		public String getModelcode() {
			return this.modelcode;
		}

		public long attachmentid;

		public long getAttachmentid() {
			return this.attachmentid;
		}

		public String attachmenttype;

		public String getAttachmenttype() {
			return this.attachmenttype;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.attachmentid;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tPostgresqlInput_3Struct other = (after_tPostgresqlInput_3Struct) obj;

			if (this.attachmentid != other.attachmentid)
				return false;

			return true;
		}

		public void copyDataTo(after_tPostgresqlInput_3Struct other) {

			other.modelattachmentid = this.modelattachmentid;
			other.manufacturermodelid = this.manufacturermodelid;
			other.modelcode = this.modelcode;
			other.attachmentid = this.attachmentid;
			other.attachmenttype = this.attachmenttype;
			other.version = this.version;

		}

		public void copyKeysDataTo(after_tPostgresqlInput_3Struct other) {

			other.attachmentid = this.attachmentid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradeModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradeModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.modelattachmentid = dis.readLong();

					this.manufacturermodelid = dis.readLong();

					this.modelcode = readString(dis);

					this.attachmentid = dis.readLong();

					this.attachmenttype = readString(dis);

					this.version = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.modelattachmentid);

				// long

				dos.writeLong(this.manufacturermodelid);

				// String

				writeString(this.modelcode, dos);

				// long

				dos.writeLong(this.attachmentid);

				// String

				writeString(this.attachmenttype, dos);

				// int

				dos.writeInt(this.version);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("modelattachmentid=" + String.valueOf(modelattachmentid));
			sb.append(",manufacturermodelid="
					+ String.valueOf(manufacturermodelid));
			sb.append(",modelcode=" + modelcode);
			sb.append(",attachmentid=" + String.valueOf(attachmentid));
			sb.append(",attachmenttype=" + attachmenttype);
			sb.append(",version=" + String.valueOf(version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.attachmentid,
					other.attachmentid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_6Process(globalMap);

				row3Struct row3 = new row3Struct();
				out_mf_attachmentStruct out_mf_attachment = new out_mf_attachmentStruct();

				/**
				 * [tPostgresqlOutput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_2", false);
				start_Hash.put("tPostgresqlOutput_2",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_2";

				int tos_count_tPostgresqlOutput_2 = 0;

				String dbschema_tPostgresqlOutput_2 = null;
				dbschema_tPostgresqlOutput_2 = context.cesearch_Schema;

				String tableName_tPostgresqlOutput_2 = null;
				if (dbschema_tPostgresqlOutput_2 == null
						|| dbschema_tPostgresqlOutput_2.trim().length() == 0) {
					tableName_tPostgresqlOutput_2 = "ref_modelattachment";
				} else {
					tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2
							+ "\".\"" + "ref_modelattachment";
				}

				int updateKeyCount_tPostgresqlOutput_2 = 1;
				if (updateKeyCount_tPostgresqlOutput_2 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_2 = 0;
				int nb_line_update_tPostgresqlOutput_2 = 0;
				int nb_line_inserted_tPostgresqlOutput_2 = 0;
				int nb_line_deleted_tPostgresqlOutput_2 = 0;
				int nb_line_rejected_tPostgresqlOutput_2 = 0;

				int deletedCount_tPostgresqlOutput_2 = 0;
				int updatedCount_tPostgresqlOutput_2 = 0;
				int insertedCount_tPostgresqlOutput_2 = 0;
				int rejectedCount_tPostgresqlOutput_2 = 0;

				boolean whetherReject_tPostgresqlOutput_2 = false;

				java.sql.Connection conn_tPostgresqlOutput_2 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_2 = "jdbc:postgresql://"
						+ context.cesearch_Server + ":" + context.cesearch_Port
						+ "/" + context.cesearch_Database;
				String dbUser_tPostgresqlOutput_2 = context.cesearch_Login;

				final String decryptedPassword_tPostgresqlOutput_2 = context.cesearch_Password;

				String dbPwd_tPostgresqlOutput_2 = decryptedPassword_tPostgresqlOutput_2;

				conn_tPostgresqlOutput_2 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_2,
								dbUser_tPostgresqlOutput_2,
								dbPwd_tPostgresqlOutput_2);

				resourceMap.put("conn_tPostgresqlOutput_2",
						conn_tPostgresqlOutput_2);
				conn_tPostgresqlOutput_2.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_2 = 10000;
				int commitCounter_tPostgresqlOutput_2 = 0;

				int batchSize_tPostgresqlOutput_2 = 10000;
				int batchSizeCounter_tPostgresqlOutput_2 = 0;

				int count_tPostgresqlOutput_2 = 0;
				String update_tPostgresqlOutput_2 = "UPDATE \""
						+ tableName_tPostgresqlOutput_2
						+ "\" SET \"attachmentid\" = ?,\"attachmenttype\" = ?,\"version\" = ? WHERE \"attachmentid\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
						.prepareStatement(update_tPostgresqlOutput_2);
				String insert_tPostgresqlOutput_2 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_2
						+ "\" (\""
						+ "modelattachmentid"
						+ "\",\"manufacturermodelid\",\"attachmentid\",\"attachmenttype\",\"version\") VALUES ("
						+ "nextval('ref_modelattachment_modelattachmentid_seq')"
						+ ",?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
						.prepareStatement(insert_tPostgresqlOutput_2);

				/**
				 * [tPostgresqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out_mf_attachmentStruct out_mf_attachment_tmp = new out_mf_attachmentStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_3", false);
				start_Hash
						.put("tPostgresqlInput_3", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_3";

				int tos_count_tPostgresqlInput_3 = 0;

				int nb_line_tPostgresqlInput_3 = 0;
				java.sql.Connection conn_tPostgresqlInput_3 = null;
				String driverClass_tPostgresqlInput_3 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_3);
				String dbUser_tPostgresqlInput_3 = context.ceadmindb_Login;

				final String decryptedPassword_tPostgresqlInput_3 = context.ceadmindb_Password;

				String dbPwd_tPostgresqlInput_3 = decryptedPassword_tPostgresqlInput_3;

				String url_tPostgresqlInput_3 = "jdbc:postgresql://"
						+ context.ceadmindb_Server + ":"
						+ context.ceadmindb_Port + "/"
						+ context.ceadmindb_Database;

				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_3, dbUser_tPostgresqlInput_3,
						dbPwd_tPostgresqlInput_3);

				conn_tPostgresqlInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3
						.createStatement();

				String dbquery_tPostgresqlInput_3 = "select modelattachmentid,mm.manufacturermodelid,mm.modelcode,attachmentid,attachmenttype,ma.version \nfrom ref_modelattachment ma \njoin ref_manufacturermodel mm on (mm.manufacturermodelid=ma.manufacturermodelid)";

				globalMap.put("tPostgresqlInput_3_QUERY",
						dbquery_tPostgresqlInput_3);
				java.sql.ResultSet rs_tPostgresqlInput_3 = null;
				try {
					rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3
							.executeQuery(dbquery_tPostgresqlInput_3);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3
							.getColumnCount();

					String tmpContent_tPostgresqlInput_3 = null;

					while (rs_tPostgresqlInput_3.next()) {
						nb_line_tPostgresqlInput_3++;

						if (colQtyInRs_tPostgresqlInput_3 < 1) {
							row3.modelattachmentid = 0;
						} else {

							if (rs_tPostgresqlInput_3.getObject(1) != null) {
								row3.modelattachmentid = rs_tPostgresqlInput_3
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 2) {
							row3.manufacturermodelid = 0;
						} else {

							if (rs_tPostgresqlInput_3.getObject(2) != null) {
								row3.manufacturermodelid = rs_tPostgresqlInput_3
										.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 3) {
							row3.modelcode = null;
						} else {

							tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
									.getString(3);
							if (tmpContent_tPostgresqlInput_3 != null) {
								row3.modelcode = tmpContent_tPostgresqlInput_3;
							} else {
								row3.modelcode = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 4) {
							row3.attachmentid = 0;
						} else {

							if (rs_tPostgresqlInput_3.getObject(4) != null) {
								row3.attachmentid = rs_tPostgresqlInput_3
										.getLong(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 5) {
							row3.attachmenttype = null;
						} else {

							tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
									.getString(5);
							if (tmpContent_tPostgresqlInput_3 != null) {
								row3.attachmenttype = tmpContent_tPostgresqlInput_3;
							} else {
								row3.attachmenttype = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 6) {
							row3.version = 0;
						} else {

							if (rs_tPostgresqlInput_3.getObject(6) != null) {
								row3.version = rs_tPostgresqlInput_3.getInt(6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_3 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_3 main ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						tos_count_tPostgresqlInput_3++;

						/**
						 * [tPostgresqlInput_3 main ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row5"
						// /////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							row5HashKey.modelcode = row3.modelcode;

							row5HashKey.hashCodeDirty = true;

							tHash_Lookup_row5.lookup(row5HashKey);

							if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_3 = true;

								forceLooprow5 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow5 = true;
						} // G 21

						row5Struct row5 = null;

						while ((tHash_Lookup_row5 != null && tHash_Lookup_row5
								.hasNext()) || forceLooprow5) { // G_TM_M_043

							// CALL close loop of lookup 'row5'

							row5Struct fromLookup_row5 = null;
							row5 = row5Default;

							if (!forceLooprow5) { // G 46

								fromLookup_row5 = tHash_Lookup_row5.next();

								if (fromLookup_row5 != null) {
									row5 = fromLookup_row5;
								}

							} // G 46

							forceLooprow5 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								out_mf_attachment = null;

								if (!rejectedInnerJoin_tMap_3) {

									// # Output table : 'out_mf_attachment'
									out_mf_attachment_tmp.modelattachmentid = 1;
									out_mf_attachment_tmp.manufacturermodelid = row5.manufacturermodelid;
									out_mf_attachment_tmp.attachmentid = row3.attachmentid;
									out_mf_attachment_tmp.attachmenttype = row3.attachmenttype;
									out_mf_attachment_tmp.version = row3.version;
									out_mf_attachment = out_mf_attachment_tmp;
								} // closing inner join bracket (2)
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */
							// Start of branch "out_mf_attachment"
							if (out_mf_attachment != null) {

								/**
								 * [tPostgresqlOutput_2 main ] start
								 */

								currentComponent = "tPostgresqlOutput_2";

								whetherReject_tPostgresqlOutput_2 = false;
								int updateFlag_tPostgresqlOutput_2 = 0;
								pstmtUpdate_tPostgresqlOutput_2.setLong(1,
										out_mf_attachment.attachmentid);

								if (out_mf_attachment.attachmenttype == null) {
									pstmtUpdate_tPostgresqlOutput_2.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_2
											.setString(
													2,
													out_mf_attachment.attachmenttype);
								}

								pstmtUpdate_tPostgresqlOutput_2.setInt(3,
										out_mf_attachment.version);

								pstmtUpdate_tPostgresqlOutput_2.setLong(
										4 + count_tPostgresqlOutput_2,
										out_mf_attachment.attachmentid);

								try {

									updateFlag_tPostgresqlOutput_2 = pstmtUpdate_tPostgresqlOutput_2
											.executeUpdate();
									updatedCount_tPostgresqlOutput_2 = updatedCount_tPostgresqlOutput_2
											+ updateFlag_tPostgresqlOutput_2;

									if (updateFlag_tPostgresqlOutput_2 == 0) {

										pstmtInsert_tPostgresqlOutput_2
												.setLong(
														1,
														out_mf_attachment.manufacturermodelid);

										pstmtInsert_tPostgresqlOutput_2
												.setLong(
														2,
														out_mf_attachment.attachmentid);

										if (out_mf_attachment.attachmenttype == null) {
											pstmtInsert_tPostgresqlOutput_2
													.setNull(
															3,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_2
													.setString(
															3,
															out_mf_attachment.attachmenttype);
										}

										pstmtInsert_tPostgresqlOutput_2.setInt(
												4, out_mf_attachment.version);

										insertedCount_tPostgresqlOutput_2 = insertedCount_tPostgresqlOutput_2
												+ pstmtInsert_tPostgresqlOutput_2
														.executeUpdate();
										nb_line_tPostgresqlOutput_2++;

									} else {
										nb_line_tPostgresqlOutput_2++;

									}
								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_2 = true;
									nb_line_tPostgresqlOutput_2++;
									System.err.print(e.getMessage());
								}
								if (!whetherReject_tPostgresqlOutput_2) {
								}
								if (batchSize_tPostgresqlOutput_2 <= batchSizeCounter_tPostgresqlOutput_2) {

								}

								commitCounter_tPostgresqlOutput_2++;
								if (commitEvery_tPostgresqlOutput_2 <= commitCounter_tPostgresqlOutput_2) {

									conn_tPostgresqlOutput_2.commit();

									commitCounter_tPostgresqlOutput_2 = 0;
								}

								tos_count_tPostgresqlOutput_2++;

								/**
								 * [tPostgresqlOutput_2 main ] stop
								 */

							} // End of branch "out_mf_attachment"

						} // close loop of lookup 'row5' // G_TM_M_043

						/**
						 * [tPostgresqlInput_3 end ] start
						 */

						currentComponent = "tPostgresqlInput_3";

					}
				} finally {
					stmt_tPostgresqlInput_3.close();

					if (conn_tPostgresqlInput_3 != null
							&& !conn_tPostgresqlInput_3.isClosed()) {

						conn_tPostgresqlInput_3.commit();

						conn_tPostgresqlInput_3.close();

					}

				}
				globalMap.put("tPostgresqlInput_3_NB_LINE",
						nb_line_tPostgresqlInput_3);

				ok_Hash.put("tPostgresqlInput_3", true);
				end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_2 end ] start
				 */

				currentComponent = "tPostgresqlOutput_2";

				if (pstmtUpdate_tPostgresqlOutput_2 != null) {

					pstmtUpdate_tPostgresqlOutput_2.close();

				}
				if (pstmtInsert_tPostgresqlOutput_2 != null) {

					pstmtInsert_tPostgresqlOutput_2.close();

				}

				conn_tPostgresqlOutput_2.commit();

				conn_tPostgresqlOutput_2.close();

				resourceMap.put("finish_tPostgresqlOutput_2", true);

				nb_line_deleted_tPostgresqlOutput_2 = nb_line_deleted_tPostgresqlOutput_2
						+ deletedCount_tPostgresqlOutput_2;
				nb_line_update_tPostgresqlOutput_2 = nb_line_update_tPostgresqlOutput_2
						+ updatedCount_tPostgresqlOutput_2;
				nb_line_inserted_tPostgresqlOutput_2 = nb_line_inserted_tPostgresqlOutput_2
						+ insertedCount_tPostgresqlOutput_2;
				nb_line_rejected_tPostgresqlOutput_2 = nb_line_rejected_tPostgresqlOutput_2
						+ rejectedCount_tPostgresqlOutput_2;

				globalMap.put("tPostgresqlOutput_2_NB_LINE",
						nb_line_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_2);

				ok_Hash.put("tPostgresqlOutput_2", true);
				end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());

				tPostgresqlInput_18Process(globalMap);

				/**
				 * [tPostgresqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row5");

			try {

				/**
				 * [tPostgresqlInput_3 finally ] start
				 */

				currentComponent = "tPostgresqlInput_3";

				/**
				 * [tPostgresqlInput_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_2 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_2";

				if (resourceMap.get("finish_tPostgresqlOutput_2") == null) {
					if (resourceMap.get("conn_tPostgresqlOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tPostgresqlOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_2) {
							String errorMessage_tPostgresqlOutput_2 = "failed to close the connection in tPostgresqlOutput_2 :"
									+ sqlEx_tPostgresqlOutput_2.getMessage();

							System.err
									.println(errorMessage_tPostgresqlOutput_2);
						}
					}
				}

				/**
				 * [tPostgresqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class programmanufacturermodelStruct implements
			routines.system.IPersistableRow<programmanufacturermodelStruct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long programmodelcatgid;

		public long getProgrammodelcatgid() {
			return this.programmodelcatgid;
		}

		public long manufacturermodelid;

		public long getManufacturermodelid() {
			return this.manufacturermodelid;
		}

		public long programcategoryid;

		public long getProgramcategoryid() {
			return this.programcategoryid;
		}

		public Integer version;

		public Integer getVersion() {
			return this.version;
		}

		public String carriersku;

		public String getCarriersku() {
			return this.carriersku;
		}

		public Integer search_order;

		public Integer getSearch_order() {
			return this.search_order;
		}

		public long createdby;

		public long getCreatedby() {
			return this.createdby;
		}

		public java.util.Date createddate;

		public java.util.Date getCreateddate() {
			return this.createddate;
		}

		public java.util.Date lastupdateddate;

		public java.util.Date getLastupdateddate() {
			return this.lastupdateddate;
		}

		public Long updatedby;

		public Long getUpdatedby() {
			return this.updatedby;
		}

		public Object carrier;

		public Object getCarrier() {
			return this.carrier;
		}

		public String modelaliases;

		public String getModelaliases() {
			return this.modelaliases;
		}

		public String manufactureraliases;

		public String getManufactureraliases() {
			return this.manufactureraliases;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.programmodelcatgid;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final programmanufacturermodelStruct other = (programmanufacturermodelStruct) obj;

			if (this.programmodelcatgid != other.programmodelcatgid)
				return false;

			return true;
		}

		public void copyDataTo(programmanufacturermodelStruct other) {

			other.programmodelcatgid = this.programmodelcatgid;
			other.manufacturermodelid = this.manufacturermodelid;
			other.programcategoryid = this.programcategoryid;
			other.version = this.version;
			other.carriersku = this.carriersku;
			other.search_order = this.search_order;
			other.createdby = 1;
			other.createddate = this.createddate;
			other.lastupdateddate = this.lastupdateddate;
			other.updatedby = this.updatedby;
			other.carrier = this.carrier;
			other.modelaliases = this.modelaliases;
			other.manufactureraliases = this.manufactureraliases;

		}

		public void copyKeysDataTo(programmanufacturermodelStruct other) {

			other.programmodelcatgid = this.programmodelcatgid;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradeModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradeModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.programmodelcatgid = dis.readLong();

					this.manufacturermodelid = dis.readLong();

					this.programcategoryid = dis.readLong();

					this.version = readInteger(dis);

					this.carriersku = readString(dis);

					this.search_order = readInteger(dis);

					this.createdby = dis.readLong();

					this.createddate = readDate(dis);

					this.lastupdateddate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.updatedby = null;
					} else {
						this.updatedby = dis.readLong();
					}

					this.carrier = (Object) dis.readObject();

					this.modelaliases = readString(dis);

					this.manufactureraliases = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.programmodelcatgid);

				// long

				dos.writeLong(this.manufacturermodelid);

				// long

				dos.writeLong(this.programcategoryid);

				// Integer

				writeInteger(this.version, dos);

				// String

				writeString(this.carriersku, dos);

				// Integer

				writeInteger(this.search_order, dos);

				// long

				dos.writeLong(this.createdby);

				// java.util.Date

				writeDate(this.createddate, dos);

				// java.util.Date

				writeDate(this.lastupdateddate, dos);

				// Long

				if (this.updatedby == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.updatedby);
				}

				// Object

				dos.writeObject(this.carrier);

				// String

				writeString(this.modelaliases, dos);

				// String

				writeString(this.manufactureraliases, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("programmodelcatgid="
					+ String.valueOf(programmodelcatgid));
			sb.append(",manufacturermodelid="
					+ String.valueOf(manufacturermodelid));
			sb.append(",programcategoryid=" + String.valueOf(programcategoryid));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",carriersku=" + carriersku);
			sb.append(",search_order=" + String.valueOf(search_order));
			sb.append(",createdby=" + String.valueOf(createdby));
			sb.append(",createddate=" + String.valueOf(createddate));
			sb.append(",lastupdateddate=" + String.valueOf(lastupdateddate));
			sb.append(",updatedby=" + String.valueOf(updatedby));
			sb.append(",carrier=" + String.valueOf(carrier));
			sb.append(",modelaliases=" + modelaliases);
			sb.append(",manufactureraliases=" + manufactureraliases);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(programmanufacturermodelStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.programmodelcatgid,
					other.programmodelcatgid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ceadminStruct implements
			routines.system.IPersistableRow<ceadminStruct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];

		public String programname;

		public String getProgramname() {
			return this.programname;
		}

		public long manufacturerid;

		public long getManufacturerid() {
			return this.manufacturerid;
		}

		public String manufacturercode;

		public String getManufacturercode() {
			return this.manufacturercode;
		}

		public long manufacturermodelid;

		public long getManufacturermodelid() {
			return this.manufacturermodelid;
		}

		public long manufacturermodel_pkey;

		public long getManufacturermodel_pkey() {
			return this.manufacturermodel_pkey;
		}

		public String modelcode;

		public String getModelcode() {
			return this.modelcode;
		}

		public String manufactureraliases;

		public String getManufactureraliases() {
			return this.manufactureraliases;
		}

		public String modelaliases;

		public String getModelaliases() {
			return this.modelaliases;
		}

		public String carrier;

		public String getCarrier() {
			return this.carrier;
		}

		public String carriersku;

		public String getCarriersku() {
			return this.carriersku;
		}

		public Integer search_order;

		public Integer getSearch_order() {
			return this.search_order;
		}

		public Integer version;

		public Integer getVersion() {
			return this.version;
		}

		public long createdby;

		public long getCreatedby() {
			return this.createdby;
		}

		public java.util.Date createddate;

		public java.util.Date getCreateddate() {
			return this.createddate;
		}

		public java.util.Date lastupdateddate;

		public java.util.Date getLastupdateddate() {
			return this.lastupdateddate;
		}

		public Long updatedby;

		public Long getUpdatedby() {
			return this.updatedby;
		}

		public Long datawipemethod;

		public Long getDatawipemethod() {
			return this.datawipemethod;
		}

		public String modeltitle;

		public String getModeltitle() {
			return this.modeltitle;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradeModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradeModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.programname = readString(dis);

					this.manufacturerid = dis.readLong();

					this.manufacturercode = readString(dis);

					this.manufacturermodelid = dis.readLong();

					this.manufacturermodel_pkey = dis.readLong();

					this.modelcode = readString(dis);

					this.manufactureraliases = readString(dis);

					this.modelaliases = readString(dis);

					this.carrier = readString(dis);

					this.carriersku = readString(dis);

					this.search_order = readInteger(dis);

					this.version = readInteger(dis);

					this.createdby = dis.readLong();

					this.createddate = readDate(dis);

					this.lastupdateddate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.updatedby = null;
					} else {
						this.updatedby = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.datawipemethod = null;
					} else {
						this.datawipemethod = dis.readLong();
					}

					this.modeltitle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.programname, dos);

				// long

				dos.writeLong(this.manufacturerid);

				// String

				writeString(this.manufacturercode, dos);

				// long

				dos.writeLong(this.manufacturermodelid);

				// long

				dos.writeLong(this.manufacturermodel_pkey);

				// String

				writeString(this.modelcode, dos);

				// String

				writeString(this.manufactureraliases, dos);

				// String

				writeString(this.modelaliases, dos);

				// String

				writeString(this.carrier, dos);

				// String

				writeString(this.carriersku, dos);

				// Integer

				writeInteger(this.search_order, dos);

				// Integer

				writeInteger(this.version, dos);

				// long

				dos.writeLong(this.createdby);

				// java.util.Date

				writeDate(this.createddate, dos);

				// java.util.Date

				writeDate(this.lastupdateddate, dos);

				// Long

				if (this.updatedby == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.updatedby);
				}

				// Long

				if (this.datawipemethod == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.datawipemethod);
				}

				// String

				writeString(this.modeltitle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("programname=" + programname);
			sb.append(",manufacturerid=" + String.valueOf(manufacturerid));
			sb.append(",manufacturercode=" + manufacturercode);
			sb.append(",manufacturermodelid="
					+ String.valueOf(manufacturermodelid));
			sb.append(",manufacturermodel_pkey="
					+ String.valueOf(manufacturermodel_pkey));
			sb.append(",modelcode=" + modelcode);
			sb.append(",manufactureraliases=" + manufactureraliases);
			sb.append(",modelaliases=" + modelaliases);
			sb.append(",carrier=" + carrier);
			sb.append(",carriersku=" + carriersku);
			sb.append(",search_order=" + String.valueOf(search_order));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",createdby=" + String.valueOf(createdby));
			sb.append(",createddate=" + String.valueOf(createddate));
			sb.append(",lastupdateddate=" + String.valueOf(lastupdateddate));
			sb.append(",updatedby=" + String.valueOf(updatedby));
			sb.append(",datawipemethod=" + String.valueOf(datawipemethod));
			sb.append(",modeltitle=" + modeltitle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ceadminStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_18Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_18Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];

		public String programname;

		public String getProgramname() {
			return this.programname;
		}

		public long manufacturerid;

		public long getManufacturerid() {
			return this.manufacturerid;
		}

		public String manufacturercode;

		public String getManufacturercode() {
			return this.manufacturercode;
		}

		public long manufacturermodelid;

		public long getManufacturermodelid() {
			return this.manufacturermodelid;
		}

		public long manufacturermodel_pkey;

		public long getManufacturermodel_pkey() {
			return this.manufacturermodel_pkey;
		}

		public String modelcode;

		public String getModelcode() {
			return this.modelcode;
		}

		public String manufactureraliases;

		public String getManufactureraliases() {
			return this.manufactureraliases;
		}

		public String modelaliases;

		public String getModelaliases() {
			return this.modelaliases;
		}

		public String carrier;

		public String getCarrier() {
			return this.carrier;
		}

		public String carriersku;

		public String getCarriersku() {
			return this.carriersku;
		}

		public Integer search_order;

		public Integer getSearch_order() {
			return this.search_order;
		}

		public Integer version;

		public Integer getVersion() {
			return this.version;
		}

		public long createdby;

		public long getCreatedby() {
			return this.createdby;
		}

		public java.util.Date createddate;

		public java.util.Date getCreateddate() {
			return this.createddate;
		}

		public java.util.Date lastupdateddate;

		public java.util.Date getLastupdateddate() {
			return this.lastupdateddate;
		}

		public Long updatedby;

		public Long getUpdatedby() {
			return this.updatedby;
		}

		public Long datawipemethod;

		public Long getDatawipemethod() {
			return this.datawipemethod;
		}

		public String modeltitle;

		public String getModeltitle() {
			return this.modeltitle;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradeModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradeModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.programname = readString(dis);

					this.manufacturerid = dis.readLong();

					this.manufacturercode = readString(dis);

					this.manufacturermodelid = dis.readLong();

					this.manufacturermodel_pkey = dis.readLong();

					this.modelcode = readString(dis);

					this.manufactureraliases = readString(dis);

					this.modelaliases = readString(dis);

					this.carrier = readString(dis);

					this.carriersku = readString(dis);

					this.search_order = readInteger(dis);

					this.version = readInteger(dis);

					this.createdby = dis.readLong();

					this.createddate = readDate(dis);

					this.lastupdateddate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.updatedby = null;
					} else {
						this.updatedby = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.datawipemethod = null;
					} else {
						this.datawipemethod = dis.readLong();
					}

					this.modeltitle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.programname, dos);

				// long

				dos.writeLong(this.manufacturerid);

				// String

				writeString(this.manufacturercode, dos);

				// long

				dos.writeLong(this.manufacturermodelid);

				// long

				dos.writeLong(this.manufacturermodel_pkey);

				// String

				writeString(this.modelcode, dos);

				// String

				writeString(this.manufactureraliases, dos);

				// String

				writeString(this.modelaliases, dos);

				// String

				writeString(this.carrier, dos);

				// String

				writeString(this.carriersku, dos);

				// Integer

				writeInteger(this.search_order, dos);

				// Integer

				writeInteger(this.version, dos);

				// long

				dos.writeLong(this.createdby);

				// java.util.Date

				writeDate(this.createddate, dos);

				// java.util.Date

				writeDate(this.lastupdateddate, dos);

				// Long

				if (this.updatedby == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.updatedby);
				}

				// Long

				if (this.datawipemethod == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.datawipemethod);
				}

				// String

				writeString(this.modeltitle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("programname=" + programname);
			sb.append(",manufacturerid=" + String.valueOf(manufacturerid));
			sb.append(",manufacturercode=" + manufacturercode);
			sb.append(",manufacturermodelid="
					+ String.valueOf(manufacturermodelid));
			sb.append(",manufacturermodel_pkey="
					+ String.valueOf(manufacturermodel_pkey));
			sb.append(",modelcode=" + modelcode);
			sb.append(",manufactureraliases=" + manufactureraliases);
			sb.append(",modelaliases=" + modelaliases);
			sb.append(",carrier=" + carrier);
			sb.append(",carriersku=" + carriersku);
			sb.append(",search_order=" + String.valueOf(search_order));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",createdby=" + String.valueOf(createdby));
			sb.append(",createddate=" + String.valueOf(createddate));
			sb.append(",lastupdateddate=" + String.valueOf(lastupdateddate));
			sb.append(",updatedby=" + String.valueOf(updatedby));
			sb.append(",datawipemethod=" + String.valueOf(datawipemethod));
			sb.append(",modeltitle=" + modeltitle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_18Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_20Process(globalMap);
				tPostgresqlInput_21Process(globalMap);

				ceadminStruct ceadmin = new ceadminStruct();
				programmanufacturermodelStruct programmanufacturermodel = new programmanufacturermodelStruct();

				/**
				 * [tPostgresqlOutput_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_4", false);
				start_Hash.put("tPostgresqlOutput_4",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_4";

				int tos_count_tPostgresqlOutput_4 = 0;

				String dbschema_tPostgresqlOutput_4 = null;
				dbschema_tPostgresqlOutput_4 = context.cesearch_Schema;

				String tableName_tPostgresqlOutput_4 = null;
				if (dbschema_tPostgresqlOutput_4 == null
						|| dbschema_tPostgresqlOutput_4.trim().length() == 0) {
					tableName_tPostgresqlOutput_4 = "ref_program_manufacturer_model";
				} else {
					tableName_tPostgresqlOutput_4 = dbschema_tPostgresqlOutput_4
							+ "\".\"" + "ref_program_manufacturer_model";
				}

				int updateKeyCount_tPostgresqlOutput_4 = 2;
				if (updateKeyCount_tPostgresqlOutput_4 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_4 = 0;
				int nb_line_update_tPostgresqlOutput_4 = 0;
				int nb_line_inserted_tPostgresqlOutput_4 = 0;
				int nb_line_deleted_tPostgresqlOutput_4 = 0;
				int nb_line_rejected_tPostgresqlOutput_4 = 0;

				int deletedCount_tPostgresqlOutput_4 = 0;
				int updatedCount_tPostgresqlOutput_4 = 0;
				int insertedCount_tPostgresqlOutput_4 = 0;
				int rejectedCount_tPostgresqlOutput_4 = 0;

				boolean whetherReject_tPostgresqlOutput_4 = false;

				java.sql.Connection conn_tPostgresqlOutput_4 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_4 = "jdbc:postgresql://"
						+ context.cesearch_Server + ":" + context.cesearch_Port
						+ "/" + context.cesearch_Database;
				String dbUser_tPostgresqlOutput_4 = context.cesearch_Login;

				final String decryptedPassword_tPostgresqlOutput_4 = context.cesearch_Password;

				String dbPwd_tPostgresqlOutput_4 = decryptedPassword_tPostgresqlOutput_4;

				conn_tPostgresqlOutput_4 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_4,
								dbUser_tPostgresqlOutput_4,
								dbPwd_tPostgresqlOutput_4);

				resourceMap.put("conn_tPostgresqlOutput_4",
						conn_tPostgresqlOutput_4);
				conn_tPostgresqlOutput_4.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_4 = 10000;
				int commitCounter_tPostgresqlOutput_4 = 0;

				int batchSize_tPostgresqlOutput_4 = 10000;
				int batchSizeCounter_tPostgresqlOutput_4 = 0;

				int count_tPostgresqlOutput_4 = 0;
				String update_tPostgresqlOutput_4 = "UPDATE \""
						+ tableName_tPostgresqlOutput_4
						+ "\" SET \"version\" = ?,\"carriersku\" = ?,\"search_order\" = ?,\"createdby\" = ?,\"createddate\" = ?,\"lastupdateddate\" = ?,\"updatedby\" = ?,\""
						+ "carrier"
						+ "\" = "
						+ "?::text[]"
						+ ",\"modelaliases\" = ?,\"manufactureraliases\" = ? WHERE \"manufacturermodelid\" = ? AND \"programcategoryid\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4
						.prepareStatement(update_tPostgresqlOutput_4);
				String insert_tPostgresqlOutput_4 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_4
						+ "\" (\""
						+ "programmodelcatgid"
						+ "\",\"manufacturermodelid\",\"programcategoryid\",\"version\",\"carriersku\",\"search_order\",\"createdby\",\"createddate\",\"lastupdateddate\",\"updatedby\",\""
						+ "carrier"
						+ "\",\"modelaliases\",\"manufactureraliases\") VALUES ("
						+ "nextval('ref_program_manufacturer_model_programmodelcatgid_seq')"
						+ ",?,?,?,?,?,?,?,?,?," + "?::text[]" + ",?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4
						.prepareStatement(insert_tPostgresqlOutput_4);

				/**
				 * [tPostgresqlOutput_4 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearch2Struct> tHash_Lookup_cesearch2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearch2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearch2Struct>) globalMap
						.get("tHash_Lookup_cesearch2"));

				cesearch2Struct cesearch2HashKey = new cesearch2Struct();
				cesearch2Struct cesearch2Default = new cesearch2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearchStruct> tHash_Lookup_cesearch = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearchStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearchStruct>) globalMap
						.get("tHash_Lookup_cesearch"));

				cesearchStruct cesearchHashKey = new cesearchStruct();
				cesearchStruct cesearchDefault = new cesearchStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				programmanufacturermodelStruct programmanufacturermodel_tmp = new programmanufacturermodelStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_18 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_18", false);
				start_Hash.put("tPostgresqlInput_18",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_18";

				int tos_count_tPostgresqlInput_18 = 0;

				int nb_line_tPostgresqlInput_18 = 0;
				java.sql.Connection conn_tPostgresqlInput_18 = null;
				String driverClass_tPostgresqlInput_18 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_18);
				String dbUser_tPostgresqlInput_18 = context.ceadmindb_Login;

				final String decryptedPassword_tPostgresqlInput_18 = context.ceadmindb_Password;

				String dbPwd_tPostgresqlInput_18 = decryptedPassword_tPostgresqlInput_18;

				String url_tPostgresqlInput_18 = "jdbc:postgresql://"
						+ context.ceadmindb_Server + ":"
						+ context.ceadmindb_Port + "/"
						+ context.ceadmindb_Database;

				conn_tPostgresqlInput_18 = java.sql.DriverManager
						.getConnection(url_tPostgresqlInput_18,
								dbUser_tPostgresqlInput_18,
								dbPwd_tPostgresqlInput_18);

				conn_tPostgresqlInput_18.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_18 = conn_tPostgresqlInput_18
						.createStatement();

				String dbquery_tPostgresqlInput_18 = "SELECT\n  pm.programname,\n  m.manufacturerid,\n  m.code as manufacturercode,\n  pa.manufacturermodelid,\n  mm.manufacturermodelid as manufacturermodel_pkey,\n  mm.modelcode,\n  pa.manufactureraliases,\n  pa.modelaliases,\n  pa.carrier,\n  pa.carriersku,\n  0 as search_order,\n  pa.version,\n  pa.createdby,\n  pa.createddate as createddate,\n  pa.lastupdateddate,\n  pa.updatedby,\n  pa.datawipemethod\nFROM ref_manufacturermodel mm\ninner join ref_manufacturer m on m.manufacturerid = mm.manufacturerid\ninner join ref_programattribute pa on pa.manufacturermodelid = mm.manufacturermodelid \ninner join ref_program pm on (pa.programid=pm.programid)	\nwhere mm.createddate >= '"
						+ context.jobdate
						+ "' or mm.lastupdateddate >='"
						+ context.jobdate + "'";

				globalMap.put("tPostgresqlInput_18_QUERY",
						dbquery_tPostgresqlInput_18);
				java.sql.ResultSet rs_tPostgresqlInput_18 = null;
				try {
					rs_tPostgresqlInput_18 = stmt_tPostgresqlInput_18
							.executeQuery(dbquery_tPostgresqlInput_18);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_18 = rs_tPostgresqlInput_18
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_18 = rsmd_tPostgresqlInput_18
							.getColumnCount();

					String tmpContent_tPostgresqlInput_18 = null;

					while (rs_tPostgresqlInput_18.next()) {
						nb_line_tPostgresqlInput_18++;

						if (colQtyInRs_tPostgresqlInput_18 < 1) {
							ceadmin.programname = null;
						} else {

							tmpContent_tPostgresqlInput_18 = rs_tPostgresqlInput_18
									.getString(1);
							if (tmpContent_tPostgresqlInput_18 != null) {
								ceadmin.programname = tmpContent_tPostgresqlInput_18;
							} else {
								ceadmin.programname = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 2) {
							ceadmin.manufacturerid = 0;
						} else {

							if (rs_tPostgresqlInput_18.getObject(2) != null) {
								ceadmin.manufacturerid = rs_tPostgresqlInput_18
										.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 3) {
							ceadmin.manufacturercode = null;
						} else {

							tmpContent_tPostgresqlInput_18 = rs_tPostgresqlInput_18
									.getString(3);
							if (tmpContent_tPostgresqlInput_18 != null) {
								ceadmin.manufacturercode = tmpContent_tPostgresqlInput_18;
							} else {
								ceadmin.manufacturercode = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 4) {
							ceadmin.manufacturermodelid = 0;
						} else {

							if (rs_tPostgresqlInput_18.getObject(4) != null) {
								ceadmin.manufacturermodelid = rs_tPostgresqlInput_18
										.getLong(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 5) {
							ceadmin.manufacturermodel_pkey = 0;
						} else {

							if (rs_tPostgresqlInput_18.getObject(5) != null) {
								ceadmin.manufacturermodel_pkey = rs_tPostgresqlInput_18
										.getLong(5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 6) {
							ceadmin.modelcode = null;
						} else {

							tmpContent_tPostgresqlInput_18 = rs_tPostgresqlInput_18
									.getString(6);
							if (tmpContent_tPostgresqlInput_18 != null) {
								ceadmin.modelcode = tmpContent_tPostgresqlInput_18;
							} else {
								ceadmin.modelcode = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 7) {
							ceadmin.manufactureraliases = null;
						} else {

							tmpContent_tPostgresqlInput_18 = rs_tPostgresqlInput_18
									.getString(7);
							if (tmpContent_tPostgresqlInput_18 != null) {
								ceadmin.manufactureraliases = tmpContent_tPostgresqlInput_18;
							} else {
								ceadmin.manufactureraliases = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 8) {
							ceadmin.modelaliases = null;
						} else {

							tmpContent_tPostgresqlInput_18 = rs_tPostgresqlInput_18
									.getString(8);
							if (tmpContent_tPostgresqlInput_18 != null) {
								ceadmin.modelaliases = tmpContent_tPostgresqlInput_18;
							} else {
								ceadmin.modelaliases = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 9) {
							ceadmin.carrier = null;
						} else {

							tmpContent_tPostgresqlInput_18 = rs_tPostgresqlInput_18
									.getString(9);
							if (tmpContent_tPostgresqlInput_18 != null) {
								ceadmin.carrier = tmpContent_tPostgresqlInput_18;
							} else {
								ceadmin.carrier = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 10) {
							ceadmin.carriersku = null;
						} else {

							tmpContent_tPostgresqlInput_18 = rs_tPostgresqlInput_18
									.getString(10);
							if (tmpContent_tPostgresqlInput_18 != null) {
								ceadmin.carriersku = tmpContent_tPostgresqlInput_18;
							} else {
								ceadmin.carriersku = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 11) {
							ceadmin.search_order = null;
						} else {

							if (rs_tPostgresqlInput_18.getObject(11) != null) {
								ceadmin.search_order = rs_tPostgresqlInput_18
										.getInt(11);
							} else {
								ceadmin.search_order = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 12) {
							ceadmin.version = null;
						} else {

							if (rs_tPostgresqlInput_18.getObject(12) != null) {
								ceadmin.version = rs_tPostgresqlInput_18
										.getInt(12);
							} else {
								ceadmin.version = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 13) {
							ceadmin.createdby = 0;
						} else {

							if (rs_tPostgresqlInput_18.getObject(13) != null) {
								ceadmin.createdby = rs_tPostgresqlInput_18
										.getLong(13);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 14) {
							ceadmin.createddate = null;
						} else {

							if (rs_tPostgresqlInput_18.getTimestamp(14) != null) {
								ceadmin.createddate = new java.util.Date(
										rs_tPostgresqlInput_18.getTimestamp(14)
												.getTime());
							} else {
								ceadmin.createddate = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 15) {
							ceadmin.lastupdateddate = null;
						} else {

							if (rs_tPostgresqlInput_18.getTimestamp(15) != null) {
								ceadmin.lastupdateddate = new java.util.Date(
										rs_tPostgresqlInput_18.getTimestamp(15)
												.getTime());
							} else {
								ceadmin.lastupdateddate = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 16) {
							ceadmin.updatedby = null;
						} else {

							if (rs_tPostgresqlInput_18.getObject(16) != null) {
								ceadmin.updatedby = rs_tPostgresqlInput_18
										.getLong(16);
							} else {
								ceadmin.updatedby = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 17) {
							ceadmin.datawipemethod = null;
						} else {

							if (rs_tPostgresqlInput_18.getObject(17) != null) {
								ceadmin.datawipemethod = rs_tPostgresqlInput_18
										.getLong(17);
							} else {
								ceadmin.datawipemethod = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_18 < 18) {
							ceadmin.modeltitle = null;
						} else {

							tmpContent_tPostgresqlInput_18 = rs_tPostgresqlInput_18
									.getString(18);
							if (tmpContent_tPostgresqlInput_18 != null) {
								ceadmin.modeltitle = tmpContent_tPostgresqlInput_18;
							} else {
								ceadmin.modeltitle = null;
							}
						}

						/**
						 * [tPostgresqlInput_18 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_18 main ] start
						 */

						currentComponent = "tPostgresqlInput_18";

						tos_count_tPostgresqlInput_18++;

						/**
						 * [tPostgresqlInput_18 main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "cesearch2"
						// /////////////////////////////////////////////

						boolean forceLoopcesearch2 = false;

						cesearch2Struct cesearch2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							cesearch2HashKey.modelcode = ceadmin.modelcode;

							cesearch2HashKey.manufacturercode = ceadmin.manufacturercode;

							cesearch2HashKey.hashCodeDirty = true;

							tHash_Lookup_cesearch2.lookup(cesearch2HashKey);

							if (!tHash_Lookup_cesearch2.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_2 = true;

								forceLoopcesearch2 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLoopcesearch2 = true;
						} // G 21

						cesearch2Struct cesearch2 = null;

						while ((tHash_Lookup_cesearch2 != null && tHash_Lookup_cesearch2
								.hasNext()) || forceLoopcesearch2) { // G_TM_M_043

							// CALL close loop of lookup 'cesearch2'

							cesearch2Struct fromLookup_cesearch2 = null;
							cesearch2 = cesearch2Default;

							if (!forceLoopcesearch2) { // G 46

								fromLookup_cesearch2 = tHash_Lookup_cesearch2
										.next();

								if (fromLookup_cesearch2 != null) {
									cesearch2 = fromLookup_cesearch2;
								}

							} // G 46

							forceLoopcesearch2 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "cesearch"
							// /////////////////////////////////////////////

							boolean forceLoopcesearch = false;

							cesearchStruct cesearchObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_2 = false;

								cesearchHashKey.programname = ceadmin.programname;

								cesearchHashKey.hashCodeDirty = true;

								tHash_Lookup_cesearch.lookup(cesearchHashKey);

								if (!tHash_Lookup_cesearch.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_2 = true;

									forceLoopcesearch = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLoopcesearch = true;
							} // G 21

							cesearchStruct cesearch = null;

							while ((tHash_Lookup_cesearch != null && tHash_Lookup_cesearch
									.hasNext()) || forceLoopcesearch) { // G_TM_M_043

								// CALL close loop of lookup 'cesearch'

								cesearchStruct fromLookup_cesearch = null;
								cesearch = cesearchDefault;

								if (!forceLoopcesearch) { // G 46

									fromLookup_cesearch = tHash_Lookup_cesearch
											.next();

									if (fromLookup_cesearch != null) {
										cesearch = fromLookup_cesearch;
									}

								} // G 46

								forceLoopcesearch = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									programmanufacturermodel = null;

									if (!rejectedInnerJoin_tMap_2) {

										// # Output table :
										// 'programmanufacturermodel'
										programmanufacturermodel_tmp.programmodelcatgid = 1;
										programmanufacturermodel_tmp.manufacturermodelid = cesearch2.manufacturermodelid;
										programmanufacturermodel_tmp.programcategoryid = cesearch.programcategoryid;
										programmanufacturermodel_tmp.version = ceadmin.version;
										programmanufacturermodel_tmp.carriersku = ceadmin.carriersku;
										programmanufacturermodel_tmp.search_order = ceadmin.search_order;
										programmanufacturermodel_tmp.createdby = 1;
										programmanufacturermodel_tmp.createddate = ceadmin.createddate;
										programmanufacturermodel_tmp.lastupdateddate = ceadmin.lastupdateddate;
										programmanufacturermodel_tmp.updatedby =null;
										programmanufacturermodel_tmp.carrier = Tokenizer
												.tokenize(ceadmin.carrier)
												.toString().replace("[", "{")
												.replace("]", "}");
										programmanufacturermodel_tmp.modelaliases = ceadmin.modelaliases;
										programmanufacturermodel_tmp.manufactureraliases = ceadmin.manufactureraliases;
										programmanufacturermodel = programmanufacturermodel_tmp;
									} // closing inner join bracket (2)
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */
								// Start of branch "programmanufacturermodel"
								if (programmanufacturermodel != null) {

									/**
									 * [tPostgresqlOutput_4 main ] start
									 */

									currentComponent = "tPostgresqlOutput_4";

									whetherReject_tPostgresqlOutput_4 = false;
									int updateFlag_tPostgresqlOutput_4 = 0;
									if (programmanufacturermodel.version == null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(1,
														java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tPostgresqlOutput_4
												.setInt(1,
														programmanufacturermodel.version);
									}

									if (programmanufacturermodel.carriersku == null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(2,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_4
												.setString(
														2,
														programmanufacturermodel.carriersku);
									}

									if (programmanufacturermodel.search_order == null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(3,
														java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tPostgresqlOutput_4
												.setInt(3,
														programmanufacturermodel.search_order);
									}

									pstmtUpdate_tPostgresqlOutput_4.setLong(4,
											programmanufacturermodel.createdby);

									if (programmanufacturermodel.createddate != null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setTimestamp(
														5,
														new java.sql.Timestamp(
																programmanufacturermodel.createddate
																		.getTime()));
									} else {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(
														5,
														java.sql.Types.TIMESTAMP);
									}

									if (programmanufacturermodel.lastupdateddate != null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setTimestamp(
														6,
														new java.sql.Timestamp(
																programmanufacturermodel.lastupdateddate
																		.getTime()));
									} else {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(
														6,
														java.sql.Types.TIMESTAMP);
									}

									if (programmanufacturermodel.updatedby == null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(7,
														java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tPostgresqlOutput_4
												.setLong(
														7,
														programmanufacturermodel.updatedby);
									}

									if (programmanufacturermodel.carrier == null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(8,
														java.sql.Types.OTHER);
									} else {
										pstmtUpdate_tPostgresqlOutput_4
												.setObject(
														8,
														programmanufacturermodel.carrier);
									}

									if (programmanufacturermodel.modelaliases == null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(9,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_4
												.setString(
														9,
														programmanufacturermodel.modelaliases);
									}

									if (programmanufacturermodel.manufactureraliases == null) {
										pstmtUpdate_tPostgresqlOutput_4
												.setNull(10,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_4
												.setString(
														10,
														programmanufacturermodel.manufactureraliases);
									}

									pstmtUpdate_tPostgresqlOutput_4
											.setLong(
													11 + count_tPostgresqlOutput_4,
													programmanufacturermodel.manufacturermodelid);

									pstmtUpdate_tPostgresqlOutput_4
											.setLong(
													12 + count_tPostgresqlOutput_4,
													programmanufacturermodel.programcategoryid);

									try {

										updateFlag_tPostgresqlOutput_4 = pstmtUpdate_tPostgresqlOutput_4
												.executeUpdate();
										updatedCount_tPostgresqlOutput_4 = updatedCount_tPostgresqlOutput_4
												+ updateFlag_tPostgresqlOutput_4;

										if (updateFlag_tPostgresqlOutput_4 == 0) {

											pstmtInsert_tPostgresqlOutput_4
													.setLong(
															1,
															programmanufacturermodel.manufacturermodelid);

											pstmtInsert_tPostgresqlOutput_4
													.setLong(
															2,
															programmanufacturermodel.programcategoryid);

											if (programmanufacturermodel.version == null) {
												pstmtInsert_tPostgresqlOutput_4
														.setNull(
																3,
																java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tPostgresqlOutput_4
														.setInt(3,
																programmanufacturermodel.version);
											}

											if (programmanufacturermodel.carriersku == null) {
												pstmtInsert_tPostgresqlOutput_4
														.setNull(
																4,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_4
														.setString(
																4,
																programmanufacturermodel.carriersku);
											}

											if (programmanufacturermodel.search_order == null) {
												pstmtInsert_tPostgresqlOutput_4
														.setNull(
																5,
																java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tPostgresqlOutput_4
														.setInt(5,
																programmanufacturermodel.search_order);
											}

											pstmtInsert_tPostgresqlOutput_4
													.setLong(
															6,
															programmanufacturermodel.createdby);

											if (programmanufacturermodel.createddate != null) {
												pstmtInsert_tPostgresqlOutput_4
														.setTimestamp(
																7,
																new java.sql.Timestamp(
																		programmanufacturermodel.createddate
																				.getTime()));
											} else {
												pstmtInsert_tPostgresqlOutput_4
														.setNull(
																7,
																java.sql.Types.TIMESTAMP);
											}

											if (programmanufacturermodel.lastupdateddate != null) {
												pstmtInsert_tPostgresqlOutput_4
														.setTimestamp(
																8,
																new java.sql.Timestamp(
																		programmanufacturermodel.lastupdateddate
																				.getTime()));
											} else {
												pstmtInsert_tPostgresqlOutput_4
														.setNull(
																8,
																java.sql.Types.TIMESTAMP);
											}

											if (programmanufacturermodel.updatedby == null) {
												pstmtInsert_tPostgresqlOutput_4
														.setNull(
																9,
																java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tPostgresqlOutput_4
														.setLong(
																9,
																programmanufacturermodel.updatedby);
											}

											if (programmanufacturermodel.carrier == null) {
												pstmtInsert_tPostgresqlOutput_4
														.setNull(
																10,
																java.sql.Types.OTHER);
											} else {
												pstmtInsert_tPostgresqlOutput_4
														.setObject(
																10,
																programmanufacturermodel.carrier);
											}

											if (programmanufacturermodel.modelaliases == null) {
												pstmtInsert_tPostgresqlOutput_4
														.setNull(
																11,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_4
														.setString(
																11,
																programmanufacturermodel.modelaliases);
											}

											if (programmanufacturermodel.manufactureraliases == null) {
												pstmtInsert_tPostgresqlOutput_4
														.setNull(
																12,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_4
														.setString(
																12,
																programmanufacturermodel.manufactureraliases);
											}

											insertedCount_tPostgresqlOutput_4 = insertedCount_tPostgresqlOutput_4
													+ pstmtInsert_tPostgresqlOutput_4
															.executeUpdate();
											nb_line_tPostgresqlOutput_4++;

										} else {
											nb_line_tPostgresqlOutput_4++;

										}
									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_4 = true;
										throw (e);
									}
									if (batchSize_tPostgresqlOutput_4 <= batchSizeCounter_tPostgresqlOutput_4) {

									}

									commitCounter_tPostgresqlOutput_4++;
									if (commitEvery_tPostgresqlOutput_4 <= commitCounter_tPostgresqlOutput_4) {

										conn_tPostgresqlOutput_4.commit();

										commitCounter_tPostgresqlOutput_4 = 0;
									}

									tos_count_tPostgresqlOutput_4++;

									/**
									 * [tPostgresqlOutput_4 main ] stop
									 */

								} // End of branch "programmanufacturermodel"

							} // close loop of lookup 'cesearch' // G_TM_M_043

						} // close loop of lookup 'cesearch2' // G_TM_M_043

						/**
						 * [tPostgresqlInput_18 end ] start
						 */

						currentComponent = "tPostgresqlInput_18";

					}
				} finally {
					stmt_tPostgresqlInput_18.close();

					if (conn_tPostgresqlInput_18 != null
							&& !conn_tPostgresqlInput_18.isClosed()) {

						conn_tPostgresqlInput_18.commit();

						conn_tPostgresqlInput_18.close();

					}

				}
				globalMap.put("tPostgresqlInput_18_NB_LINE",
						nb_line_tPostgresqlInput_18);

				ok_Hash.put("tPostgresqlInput_18", true);
				end_Hash.put("tPostgresqlInput_18", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_18 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_cesearch2 != null) {
					tHash_Lookup_cesearch2.endGet();
				}
				globalMap.remove("tHash_Lookup_cesearch2");

				if (tHash_Lookup_cesearch != null) {
					tHash_Lookup_cesearch.endGet();
				}
				globalMap.remove("tHash_Lookup_cesearch");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_4 end ] start
				 */

				currentComponent = "tPostgresqlOutput_4";

				if (pstmtUpdate_tPostgresqlOutput_4 != null) {

					pstmtUpdate_tPostgresqlOutput_4.close();

				}
				if (pstmtInsert_tPostgresqlOutput_4 != null) {

					pstmtInsert_tPostgresqlOutput_4.close();

				}

				conn_tPostgresqlOutput_4.commit();

				conn_tPostgresqlOutput_4.close();

				resourceMap.put("finish_tPostgresqlOutput_4", true);

				nb_line_deleted_tPostgresqlOutput_4 = nb_line_deleted_tPostgresqlOutput_4
						+ deletedCount_tPostgresqlOutput_4;
				nb_line_update_tPostgresqlOutput_4 = nb_line_update_tPostgresqlOutput_4
						+ updatedCount_tPostgresqlOutput_4;
				nb_line_inserted_tPostgresqlOutput_4 = nb_line_inserted_tPostgresqlOutput_4
						+ insertedCount_tPostgresqlOutput_4;
				nb_line_rejected_tPostgresqlOutput_4 = nb_line_rejected_tPostgresqlOutput_4
						+ rejectedCount_tPostgresqlOutput_4;

				globalMap.put("tPostgresqlOutput_4_NB_LINE",
						nb_line_tPostgresqlOutput_4);
				globalMap.put("tPostgresqlOutput_4_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_4);
				globalMap.put("tPostgresqlOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_4);
				globalMap.put("tPostgresqlOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_4);
				globalMap.put("tPostgresqlOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_4);

				ok_Hash.put("tPostgresqlOutput_4", true);
				end_Hash.put("tPostgresqlOutput_4", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_cesearch");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_cesearch2");

			try {

				/**
				 * [tPostgresqlInput_18 finally ] start
				 */

				currentComponent = "tPostgresqlInput_18";

				/**
				 * [tPostgresqlInput_18 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_4 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_4";

				if (resourceMap.get("finish_tPostgresqlOutput_4") == null) {
					if (resourceMap.get("conn_tPostgresqlOutput_4") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tPostgresqlOutput_4")).close();

						} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_4) {
							String errorMessage_tPostgresqlOutput_4 = "failed to close the connection in tPostgresqlOutput_4 :"
									+ sqlEx_tPostgresqlOutput_4.getMessage();

							System.err
									.println(errorMessage_tPostgresqlOutput_4);
						}
					}
				}

				/**
				 * [tPostgresqlOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_18_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long manufacturerid;

		public long getManufacturerid() {
			return this.manufacturerid;
		}

		public String code;

		public String getCode() {
			return this.code;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.code == null) ? 0 : this.code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.code == null) {
				if (other.code != null)
					return false;

			} else if (!this.code.equals(other.code))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.manufacturerid = this.manufacturerid;
			other.code = this.code;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.code = this.code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradeModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradeModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.manufacturerid = dis.readLong();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.manufacturerid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("manufacturerid=" + String.valueOf(manufacturerid));
			sb.append(",code=" + code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code, other.code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tPostgresqlInput_2 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2)
				// outputs:(manumodelout)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_2);
				String dbUser_tPostgresqlInput_2 = context.cesearch_Login;

				final String decryptedPassword_tPostgresqlInput_2 = context.cesearch_Password;

				String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;

				String url_tPostgresqlInput_2 = "jdbc:postgresql://"
						+ context.cesearch_Server + ":" + context.cesearch_Port
						+ "/" + context.cesearch_Database;

				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_2, dbUser_tPostgresqlInput_2,
						dbPwd_tPostgresqlInput_2);

				conn_tPostgresqlInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "select  manufacturerid,code from ref_manufacturer";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);
				java.sql.ResultSet rs_tPostgresqlInput_2 = null;
				try {
					rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
							.executeQuery(dbquery_tPostgresqlInput_2);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
							.getColumnCount();

					String tmpContent_tPostgresqlInput_2 = null;

					while (rs_tPostgresqlInput_2.next()) {
						nb_line_tPostgresqlInput_2++;

						if (colQtyInRs_tPostgresqlInput_2 < 1) {
							row2.manufacturerid = 0;
						} else {

							if (rs_tPostgresqlInput_2.getObject(1) != null) {
								row2.manufacturerid = rs_tPostgresqlInput_2
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 2) {
							row2.code = null;
						} else {

							tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
									.getString(2);
							if (tmpContent_tPostgresqlInput_2 != null) {
								row2.code = tmpContent_tPostgresqlInput_2;
							} else {
								row2.code = null;
							}
						}

						/**
						 * [tPostgresqlInput_2 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_2 main ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						tos_count_tPostgresqlInput_2++;

						/**
						 * [tPostgresqlInput_2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.manufacturerid = row2.manufacturerid;

						row2_HashRow.code = row2.code;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tPostgresqlInput_2 end ] start
						 */

						currentComponent = "tPostgresqlInput_2";

					}
				} finally {
					stmt_tPostgresqlInput_2.close();

					if (conn_tPostgresqlInput_2 != null
							&& !conn_tPostgresqlInput_2.isClosed()) {

						conn_tPostgresqlInput_2.commit();

						conn_tPostgresqlInput_2.close();

					}

				}
				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_2 finally ] start
				 */

				currentComponent = "tPostgresqlInput_2";

				/**
				 * [tPostgresqlInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public static class cesearchStruct implements
			routines.system.IPersistableComparableLookupRow<cesearchStruct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long programcategoryid;

		public long getProgramcategoryid() {
			return this.programcategoryid;
		}

		public long programid;

		public long getProgramid() {
			return this.programid;
		}

		public String programname;

		public String getProgramname() {
			return this.programname;
		}

		public long categoryid;

		public long getCategoryid() {
			return this.categoryid;
		}

		public String code;

		public String getCode() {
			return this.code;
		}

		public boolean isactive;

		public boolean getIsactive() {
			return this.isactive;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.programname == null) ? 0 : this.programname
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final cesearchStruct other = (cesearchStruct) obj;

			if (this.programname == null) {
				if (other.programname != null)
					return false;

			} else if (!this.programname.equals(other.programname))

				return false;

			return true;
		}

		public void copyDataTo(cesearchStruct other) {

			other.programcategoryid = this.programcategoryid;
			other.programid = this.programid;
			other.programname = this.programname;
			other.categoryid = this.categoryid;
			other.code = this.code;
			other.isactive = this.isactive;

		}

		public void copyKeysDataTo(cesearchStruct other) {

			other.programname = this.programname;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradeModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradeModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.programname = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.programname, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.programcategoryid = dis.readLong();

				this.programid = dis.readLong();

				this.categoryid = dis.readLong();

				this.code = readString(dis, ois);

				this.isactive = dis.readBoolean();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.programcategoryid);

				dos.writeLong(this.programid);

				dos.writeLong(this.categoryid);

				writeString(this.code, dos, oos);

				dos.writeBoolean(this.isactive);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("programcategoryid=" + String.valueOf(programcategoryid));
			sb.append(",programid=" + String.valueOf(programid));
			sb.append(",programname=" + programname);
			sb.append(",categoryid=" + String.valueOf(categoryid));
			sb.append(",code=" + code);
			sb.append(",isactive=" + String.valueOf(isactive));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(cesearchStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.programname,
					other.programname);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_20Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				cesearchStruct cesearch = new cesearchStruct();

				/**
				 * [tAdvancedHash_cesearch begin ] start
				 */

				ok_Hash.put("tAdvancedHash_cesearch", false);
				start_Hash.put("tAdvancedHash_cesearch",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_cesearch";

				int tos_count_tAdvancedHash_cesearch = 0;

				// connection name:cesearch
				// source node:tPostgresqlInput_20 -
				// inputs:(after_tPostgresqlInput_18)
				// outputs:(cesearch,cesearch) | target
				// node:tAdvancedHash_cesearch - inputs:(cesearch) outputs:()
				// linked node: tMap_2 - inputs:(ceadmin,cesearch,cesearch2)
				// outputs:(programmanufacturermodel)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_cesearch = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearchStruct> tHash_Lookup_cesearch = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<cesearchStruct> getLookup(matchingModeEnum_cesearch);

				globalMap.put("tHash_Lookup_cesearch", tHash_Lookup_cesearch);

				/**
				 * [tAdvancedHash_cesearch begin ] stop
				 */

				/**
				 * [tPostgresqlInput_20 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_20", false);
				start_Hash.put("tPostgresqlInput_20",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_20";

				int tos_count_tPostgresqlInput_20 = 0;

				int nb_line_tPostgresqlInput_20 = 0;
				java.sql.Connection conn_tPostgresqlInput_20 = null;
				String driverClass_tPostgresqlInput_20 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_20);
				String dbUser_tPostgresqlInput_20 = context.cesearch_Login;

				final String decryptedPassword_tPostgresqlInput_20 = context.cesearch_Password;

				String dbPwd_tPostgresqlInput_20 = decryptedPassword_tPostgresqlInput_20;

				String url_tPostgresqlInput_20 = "jdbc:postgresql://"
						+ context.cesearch_Server + ":" + context.cesearch_Port
						+ "/" + context.cesearch_Database;

				conn_tPostgresqlInput_20 = java.sql.DriverManager
						.getConnection(url_tPostgresqlInput_20,
								dbUser_tPostgresqlInput_20,
								dbPwd_tPostgresqlInput_20);

				conn_tPostgresqlInput_20.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_20 = conn_tPostgresqlInput_20
						.createStatement();

				String dbquery_tPostgresqlInput_20 = "select \n		pc.programcategoryid,\n		pc.programid,\n		p.programname,\n		pc.categoryid,\n		c.code,\n		p.isactive \nfrom ref_program_category pc\n	join ref_program p on p.programid=pc.programid\n	join ref_category c on pc.categoryid=c.categoryid";

				globalMap.put("tPostgresqlInput_20_QUERY",
						dbquery_tPostgresqlInput_20);
				java.sql.ResultSet rs_tPostgresqlInput_20 = null;
				try {
					rs_tPostgresqlInput_20 = stmt_tPostgresqlInput_20
							.executeQuery(dbquery_tPostgresqlInput_20);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_20 = rs_tPostgresqlInput_20
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_20 = rsmd_tPostgresqlInput_20
							.getColumnCount();

					String tmpContent_tPostgresqlInput_20 = null;

					while (rs_tPostgresqlInput_20.next()) {
						nb_line_tPostgresqlInput_20++;

						if (colQtyInRs_tPostgresqlInput_20 < 1) {
							cesearch.programcategoryid = 0;
						} else {

							if (rs_tPostgresqlInput_20.getObject(1) != null) {
								cesearch.programcategoryid = rs_tPostgresqlInput_20
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 2) {
							cesearch.programid = 0;
						} else {

							if (rs_tPostgresqlInput_20.getObject(2) != null) {
								cesearch.programid = rs_tPostgresqlInput_20
										.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 3) {
							cesearch.programname = null;
						} else {

							tmpContent_tPostgresqlInput_20 = rs_tPostgresqlInput_20
									.getString(3);
							if (tmpContent_tPostgresqlInput_20 != null) {
								cesearch.programname = tmpContent_tPostgresqlInput_20;
							} else {
								cesearch.programname = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 4) {
							cesearch.categoryid = 0;
						} else {

							if (rs_tPostgresqlInput_20.getObject(4) != null) {
								cesearch.categoryid = rs_tPostgresqlInput_20
										.getLong(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 5) {
							cesearch.code = null;
						} else {

							tmpContent_tPostgresqlInput_20 = rs_tPostgresqlInput_20
									.getString(5);
							if (tmpContent_tPostgresqlInput_20 != null) {
								cesearch.code = tmpContent_tPostgresqlInput_20;
							} else {
								cesearch.code = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 6) {
							cesearch.isactive = false;
						} else {

							if (rs_tPostgresqlInput_20.getObject(6) != null) {
								cesearch.isactive = rs_tPostgresqlInput_20
										.getBoolean(6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_20 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_20 main ] start
						 */

						currentComponent = "tPostgresqlInput_20";

						tos_count_tPostgresqlInput_20++;

						/**
						 * [tPostgresqlInput_20 main ] stop
						 */

						/**
						 * [tAdvancedHash_cesearch main ] start
						 */

						currentComponent = "tAdvancedHash_cesearch";

						cesearchStruct cesearch_HashRow = new cesearchStruct();

						cesearch_HashRow.programcategoryid = cesearch.programcategoryid;

						cesearch_HashRow.programid = cesearch.programid;

						cesearch_HashRow.programname = cesearch.programname;

						cesearch_HashRow.categoryid = cesearch.categoryid;

						cesearch_HashRow.code = cesearch.code;

						cesearch_HashRow.isactive = cesearch.isactive;

						tHash_Lookup_cesearch.put(cesearch_HashRow);

						tos_count_tAdvancedHash_cesearch++;

						/**
						 * [tAdvancedHash_cesearch main ] stop
						 */

						/**
						 * [tPostgresqlInput_20 end ] start
						 */

						currentComponent = "tPostgresqlInput_20";

					}
				} finally {
					stmt_tPostgresqlInput_20.close();

					if (conn_tPostgresqlInput_20 != null
							&& !conn_tPostgresqlInput_20.isClosed()) {

						conn_tPostgresqlInput_20.commit();

						conn_tPostgresqlInput_20.close();

					}

				}
				globalMap.put("tPostgresqlInput_20_NB_LINE",
						nb_line_tPostgresqlInput_20);

				ok_Hash.put("tPostgresqlInput_20", true);
				end_Hash.put("tPostgresqlInput_20", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_20 end ] stop
				 */

				/**
				 * [tAdvancedHash_cesearch end ] start
				 */

				currentComponent = "tAdvancedHash_cesearch";

				tHash_Lookup_cesearch.endPut();

				ok_Hash.put("tAdvancedHash_cesearch", true);
				end_Hash.put("tAdvancedHash_cesearch",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_cesearch end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_20 finally ] start
				 */

				currentComponent = "tPostgresqlInput_20";

				/**
				 * [tPostgresqlInput_20 finally ] stop
				 */

				/**
				 * [tAdvancedHash_cesearch finally ] start
				 */

				currentComponent = "tAdvancedHash_cesearch";

				/**
				 * [tAdvancedHash_cesearch finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_20_SUBPROCESS_STATE", 1);
	}

	public static class cesearch2Struct implements
			routines.system.IPersistableComparableLookupRow<cesearch2Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long manufacturermodelid;

		public long getManufacturermodelid() {
			return this.manufacturermodelid;
		}

		public String modelcode;

		public String getModelcode() {
			return this.modelcode;
		}

		public long manufacturerid;

		public long getManufacturerid() {
			return this.manufacturerid;
		}

		public String manufacturercode;

		public String getManufacturercode() {
			return this.manufacturercode;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.modelcode == null) ? 0 : this.modelcode
								.hashCode());

				result = prime
						* result
						+ ((this.manufacturercode == null) ? 0
								: this.manufacturercode.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final cesearch2Struct other = (cesearch2Struct) obj;

			if (this.modelcode == null) {
				if (other.modelcode != null)
					return false;

			} else if (!this.modelcode.equals(other.modelcode))

				return false;

			if (this.manufacturercode == null) {
				if (other.manufacturercode != null)
					return false;

			} else if (!this.manufacturercode.equals(other.manufacturercode))

				return false;

			return true;
		}

		public void copyDataTo(cesearch2Struct other) {

			other.manufacturermodelid = this.manufacturermodelid;
			other.modelcode = this.modelcode;
			other.manufacturerid = this.manufacturerid;
			other.manufacturercode = this.manufacturercode;

		}

		public void copyKeysDataTo(cesearch2Struct other) {

			other.modelcode = this.modelcode;
			other.manufacturercode = this.manufacturercode;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradeModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradeModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.modelcode = readString(dis);

					this.manufacturercode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.modelcode, dos);

				// String

				writeString(this.manufacturercode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.manufacturermodelid = dis.readLong();

				this.manufacturerid = dis.readLong();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.manufacturermodelid);

				dos.writeLong(this.manufacturerid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("manufacturermodelid="
					+ String.valueOf(manufacturermodelid));
			sb.append(",modelcode=" + modelcode);
			sb.append(",manufacturerid=" + String.valueOf(manufacturerid));
			sb.append(",manufacturercode=" + manufacturercode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(cesearch2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.modelcode, other.modelcode);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.manufacturercode,
					other.manufacturercode);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_21Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				cesearch2Struct cesearch2 = new cesearch2Struct();

				/**
				 * [tAdvancedHash_cesearch2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_cesearch2", false);
				start_Hash.put("tAdvancedHash_cesearch2",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_cesearch2";

				int tos_count_tAdvancedHash_cesearch2 = 0;

				// connection name:cesearch2
				// source node:tPostgresqlInput_21 -
				// inputs:(after_tPostgresqlInput_18)
				// outputs:(cesearch2,cesearch2) | target
				// node:tAdvancedHash_cesearch2 - inputs:(cesearch2) outputs:()
				// linked node: tMap_2 - inputs:(ceadmin,cesearch,cesearch2)
				// outputs:(programmanufacturermodel)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_cesearch2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearch2Struct> tHash_Lookup_cesearch2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<cesearch2Struct> getLookup(matchingModeEnum_cesearch2);

				globalMap.put("tHash_Lookup_cesearch2", tHash_Lookup_cesearch2);

				/**
				 * [tAdvancedHash_cesearch2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_21 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_21", false);
				start_Hash.put("tPostgresqlInput_21",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_21";

				int tos_count_tPostgresqlInput_21 = 0;

				int nb_line_tPostgresqlInput_21 = 0;
				java.sql.Connection conn_tPostgresqlInput_21 = null;
				String driverClass_tPostgresqlInput_21 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_21);
				String dbUser_tPostgresqlInput_21 = context.cesearch_Login;

				final String decryptedPassword_tPostgresqlInput_21 = context.cesearch_Password;

				String dbPwd_tPostgresqlInput_21 = decryptedPassword_tPostgresqlInput_21;

				String url_tPostgresqlInput_21 = "jdbc:postgresql://"
						+ context.cesearch_Server + ":" + context.cesearch_Port
						+ "/" + context.cesearch_Database;

				conn_tPostgresqlInput_21 = java.sql.DriverManager
						.getConnection(url_tPostgresqlInput_21,
								dbUser_tPostgresqlInput_21,
								dbPwd_tPostgresqlInput_21);

				conn_tPostgresqlInput_21.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_21 = conn_tPostgresqlInput_21
						.createStatement();

				String dbquery_tPostgresqlInput_21 = "SELECT\n mm.manufacturermodelid,\n  mm.modelcode,\n  m.manufacturerid,\n m.code as manufacturercode\n FROM\n    ref_manufacturermodel mm\n    inner join ref_manufacturer m on m.manufacturerid = mm.manufacturerid";

				globalMap.put("tPostgresqlInput_21_QUERY",
						dbquery_tPostgresqlInput_21);
				java.sql.ResultSet rs_tPostgresqlInput_21 = null;
				try {
					rs_tPostgresqlInput_21 = stmt_tPostgresqlInput_21
							.executeQuery(dbquery_tPostgresqlInput_21);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_21 = rs_tPostgresqlInput_21
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_21 = rsmd_tPostgresqlInput_21
							.getColumnCount();

					String tmpContent_tPostgresqlInput_21 = null;

					while (rs_tPostgresqlInput_21.next()) {
						nb_line_tPostgresqlInput_21++;

						if (colQtyInRs_tPostgresqlInput_21 < 1) {
							cesearch2.manufacturermodelid = 0;
						} else {

							if (rs_tPostgresqlInput_21.getObject(1) != null) {
								cesearch2.manufacturermodelid = rs_tPostgresqlInput_21
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_21 < 2) {
							cesearch2.modelcode = null;
						} else {

							tmpContent_tPostgresqlInput_21 = rs_tPostgresqlInput_21
									.getString(2);
							if (tmpContent_tPostgresqlInput_21 != null) {
								cesearch2.modelcode = tmpContent_tPostgresqlInput_21;
							} else {
								cesearch2.modelcode = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_21 < 3) {
							cesearch2.manufacturerid = 0;
						} else {

							if (rs_tPostgresqlInput_21.getObject(3) != null) {
								cesearch2.manufacturerid = rs_tPostgresqlInput_21
										.getLong(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_21 < 4) {
							cesearch2.manufacturercode = null;
						} else {

							tmpContent_tPostgresqlInput_21 = rs_tPostgresqlInput_21
									.getString(4);
							if (tmpContent_tPostgresqlInput_21 != null) {
								cesearch2.manufacturercode = tmpContent_tPostgresqlInput_21;
							} else {
								cesearch2.manufacturercode = null;
							}
						}

						/**
						 * [tPostgresqlInput_21 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_21 main ] start
						 */

						currentComponent = "tPostgresqlInput_21";

						tos_count_tPostgresqlInput_21++;

						/**
						 * [tPostgresqlInput_21 main ] stop
						 */

						/**
						 * [tAdvancedHash_cesearch2 main ] start
						 */

						currentComponent = "tAdvancedHash_cesearch2";

						cesearch2Struct cesearch2_HashRow = new cesearch2Struct();

						cesearch2_HashRow.manufacturermodelid = cesearch2.manufacturermodelid;

						cesearch2_HashRow.modelcode = cesearch2.modelcode;

						cesearch2_HashRow.manufacturerid = cesearch2.manufacturerid;

						cesearch2_HashRow.manufacturercode = cesearch2.manufacturercode;

						tHash_Lookup_cesearch2.put(cesearch2_HashRow);

						tos_count_tAdvancedHash_cesearch2++;

						/**
						 * [tAdvancedHash_cesearch2 main ] stop
						 */

						/**
						 * [tPostgresqlInput_21 end ] start
						 */

						currentComponent = "tPostgresqlInput_21";

					}
				} finally {
					stmt_tPostgresqlInput_21.close();

					if (conn_tPostgresqlInput_21 != null
							&& !conn_tPostgresqlInput_21.isClosed()) {

						conn_tPostgresqlInput_21.commit();

						conn_tPostgresqlInput_21.close();

					}

				}
				globalMap.put("tPostgresqlInput_21_NB_LINE",
						nb_line_tPostgresqlInput_21);

				ok_Hash.put("tPostgresqlInput_21", true);
				end_Hash.put("tPostgresqlInput_21", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_21 end ] stop
				 */

				/**
				 * [tAdvancedHash_cesearch2 end ] start
				 */

				currentComponent = "tAdvancedHash_cesearch2";

				tHash_Lookup_cesearch2.endPut();

				ok_Hash.put("tAdvancedHash_cesearch2", true);
				end_Hash.put("tAdvancedHash_cesearch2",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_cesearch2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_21 finally ] start
				 */

				currentComponent = "tPostgresqlInput_21";

				/**
				 * [tPostgresqlInput_21 finally ] stop
				 */

				/**
				 * [tAdvancedHash_cesearch2 finally ] start
				 */

				currentComponent = "tAdvancedHash_cesearch2";

				/**
				 * [tAdvancedHash_cesearch2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_21_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long manufacturermodelid;

		public long getManufacturermodelid() {
			return this.manufacturermodelid;
		}

		public String modelcode;

		public String getModelcode() {
			return this.modelcode;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.modelcode == null) ? 0 : this.modelcode
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.modelcode == null) {
				if (other.modelcode != null)
					return false;

			} else if (!this.modelcode.equals(other.modelcode))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.manufacturermodelid = this.manufacturermodelid;
			other.modelcode = this.modelcode;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.modelcode = this.modelcode;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradeModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradeModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradeModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradeModelMigration, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradeModelMigration) {

				try {

					int length = 0;

					this.modelcode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.modelcode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.manufacturermodelid = dis.readLong();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.manufacturermodelid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("manufacturermodelid="
					+ String.valueOf(manufacturermodelid));
			sb.append(",modelcode=" + modelcode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.modelcode, other.modelcode);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash
						.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tPostgresqlInput_6 -
				// inputs:(after_tPostgresqlInput_3) outputs:(row5,row5) |
				// target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_3 - inputs:(row3,row5)
				// outputs:(out_mf_attachment)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct> getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_6 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_6", false);
				start_Hash
						.put("tPostgresqlInput_6", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_6";

				int tos_count_tPostgresqlInput_6 = 0;

				int nb_line_tPostgresqlInput_6 = 0;
				java.sql.Connection conn_tPostgresqlInput_6 = null;
				String driverClass_tPostgresqlInput_6 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_6);
				String dbUser_tPostgresqlInput_6 = context.cesearch_Login;

				final String decryptedPassword_tPostgresqlInput_6 = context.cesearch_Password;

				String dbPwd_tPostgresqlInput_6 = decryptedPassword_tPostgresqlInput_6;

				String url_tPostgresqlInput_6 = "jdbc:postgresql://"
						+ context.cesearch_Server + ":" + context.cesearch_Port
						+ "/" + context.cesearch_Database;

				conn_tPostgresqlInput_6 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_6, dbUser_tPostgresqlInput_6,
						dbPwd_tPostgresqlInput_6);

				conn_tPostgresqlInput_6.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_6 = conn_tPostgresqlInput_6
						.createStatement();

				String dbquery_tPostgresqlInput_6 = "select manufacturermodelid,modelcode from ref_manufacturermodel";

				globalMap.put("tPostgresqlInput_6_QUERY",
						dbquery_tPostgresqlInput_6);
				java.sql.ResultSet rs_tPostgresqlInput_6 = null;
				try {
					rs_tPostgresqlInput_6 = stmt_tPostgresqlInput_6
							.executeQuery(dbquery_tPostgresqlInput_6);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_6 = rs_tPostgresqlInput_6
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_6 = rsmd_tPostgresqlInput_6
							.getColumnCount();

					String tmpContent_tPostgresqlInput_6 = null;

					while (rs_tPostgresqlInput_6.next()) {
						nb_line_tPostgresqlInput_6++;

						if (colQtyInRs_tPostgresqlInput_6 < 1) {
							row5.manufacturermodelid = 0;
						} else {

							if (rs_tPostgresqlInput_6.getObject(1) != null) {
								row5.manufacturermodelid = rs_tPostgresqlInput_6
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_6 < 2) {
							row5.modelcode = null;
						} else {

							tmpContent_tPostgresqlInput_6 = rs_tPostgresqlInput_6
									.getString(2);
							if (tmpContent_tPostgresqlInput_6 != null) {
								row5.modelcode = tmpContent_tPostgresqlInput_6
										.trim();
							} else {
								row5.modelcode = null;
							}
						}

						/**
						 * [tPostgresqlInput_6 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_6 main ] start
						 */

						currentComponent = "tPostgresqlInput_6";

						tos_count_tPostgresqlInput_6++;

						/**
						 * [tPostgresqlInput_6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.manufacturermodelid = row5.manufacturermodelid;

						row5_HashRow.modelcode = row5.modelcode;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tPostgresqlInput_6 end ] start
						 */

						currentComponent = "tPostgresqlInput_6";

					}
				} finally {
					stmt_tPostgresqlInput_6.close();

					if (conn_tPostgresqlInput_6 != null
							&& !conn_tPostgresqlInput_6.isClosed()) {

						conn_tPostgresqlInput_6.commit();

						conn_tPostgresqlInput_6.close();

					}

				}
				globalMap.put("tPostgresqlInput_6_NB_LINE",
						nb_line_tPostgresqlInput_6);

				ok_Hash.put("tPostgresqlInput_6", true);
				end_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_6 finally ] start
				 */

				currentComponent = "tPostgresqlInput_6";

				/**
				 * [tPostgresqlInput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final TradeModelMigration TradeModelMigrationClass = new TradeModelMigration();

		int exitCode = TradeModelMigrationClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = TradeModelMigration.class
					.getClassLoader().getResourceAsStream(contextStr.toLowerCase() + ".talend.properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.categorystring = (String) context
					.getProperty("categorystring");
			try {
				context.ce_dealercategoryid = routines.system.ParserUtils
						.parseTo_Long(context
								.getProperty("ce_dealercategoryid"));
			} catch (NumberFormatException e) {
				context.ce_dealercategoryid = null;
			}
			try {
				context.cesearchbatchuser = routines.system.ParserUtils
						.parseTo_Long(context.getProperty("cesearchbatchuser"));
			} catch (NumberFormatException e) {
				context.cesearchbatchuser = null;
			}
			try {
				context.cew_dealercategoryid = routines.system.ParserUtils
						.parseTo_Long(context
								.getProperty("cew_dealercategoryid"));
			} catch (NumberFormatException e) {
				context.cew_dealercategoryid = null;
			}
			try {
				String context_jobdate_value = context.getProperty("jobdate");
				if (context_jobdate_value == null) {
					context_jobdate_value = "";
				}
				int context_jobdate_pos = context_jobdate_value.indexOf(";");
				String context_jobdate_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_jobdate_pos > -1) {
					context_jobdate_pattern = context_jobdate_value.substring(
							0, context_jobdate_pos);
					context_jobdate_value = context_jobdate_value
							.substring(context_jobdate_pos + 1);
				}

				context.jobdate = (java.util.Date) (new java.text.SimpleDateFormat(
						context_jobdate_pattern).parse(context_jobdate_value));

			} catch (ParseException e) {
				context.jobdate = null;
			}
			context.programname = (String) context.getProperty("programname");
			context.cesearch_Port = (String) context
					.getProperty("cesearch_Port");
			context.cesearch_Database = (String) context
					.getProperty("cesearch_Database");
			String pwd_cesearch_Password_value = context
					.getProperty("cesearch_Password");
			context.cesearch_Password = null;
			if (pwd_cesearch_Password_value != null) {
				if (context_param.containsKey("cesearch_Password")) {// no need
																		// to
																		// decrypt
																		// if it
																		// come
																		// from
																		// program
																		// argument
																		// or
																		// parent
																		// job
																		// runtime
					context.cesearch_Password = pwd_cesearch_Password_value;
				} else if (!pwd_cesearch_Password_value.isEmpty()) {
					try {
						context.cesearch_Password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_cesearch_Password_value);
						context.put("cesearch_Password",
								context.cesearch_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.cesearch_Schema = (String) context
					.getProperty("cesearch_Schema");
			context.cesearch_Server = (String) context
					.getProperty("cesearch_Server");
			context.cesearch_Login = (String) context
					.getProperty("cesearch_Login");
			context.ceadmindb_Port = (String) context
					.getProperty("ceadmindb_Port");
			context.ceadmindb_Schema = (String) context
					.getProperty("ceadmindb_Schema");
			context.ceadmindb_Server = (String) context
					.getProperty("ceadmindb_Server");
			String pwd_ceadmindb_Password_value = context
					.getProperty("ceadmindb_Password");
			context.ceadmindb_Password = null;
			if (pwd_ceadmindb_Password_value != null) {
				if (context_param.containsKey("ceadmindb_Password")) {// no need
																		// to
																		// decrypt
																		// if it
																		// come
																		// from
																		// program
																		// argument
																		// or
																		// parent
																		// job
																		// runtime
					context.ceadmindb_Password = pwd_ceadmindb_Password_value;
				} else if (!pwd_ceadmindb_Password_value.isEmpty()) {
					try {
						context.ceadmindb_Password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_ceadmindb_Password_value);
						context.put("ceadmindb_Password",
								context.ceadmindb_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.ceadmindb_Database = (String) context
					.getProperty("ceadmindb_Database");
			context.ceadmindb_Login = (String) context
					.getProperty("ceadmindb_Login");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("categorystring")) {
				context.categorystring = (String) parentContextMap
						.get("categorystring");
			}
			if (parentContextMap.containsKey("ce_dealercategoryid")) {
				context.ce_dealercategoryid = (Long) parentContextMap
						.get("ce_dealercategoryid");
			}
			if (parentContextMap.containsKey("cesearchbatchuser")) {
				context.cesearchbatchuser = (Long) parentContextMap
						.get("cesearchbatchuser");
			}
			if (parentContextMap.containsKey("cew_dealercategoryid")) {
				context.cew_dealercategoryid = (Long) parentContextMap
						.get("cew_dealercategoryid");
			}
			if (parentContextMap.containsKey("jobdate")) {
				context.jobdate = (java.util.Date) parentContextMap
						.get("jobdate");
			}
			if (parentContextMap.containsKey("programname")) {
				context.programname = (String) parentContextMap
						.get("programname");
			}
			if (parentContextMap.containsKey("cesearch_Port")) {
				context.cesearch_Port = (String) parentContextMap
						.get("cesearch_Port");
			}
			if (parentContextMap.containsKey("cesearch_Database")) {
				context.cesearch_Database = (String) parentContextMap
						.get("cesearch_Database");
			}
			if (parentContextMap.containsKey("cesearch_Password")) {
				context.cesearch_Password = (java.lang.String) parentContextMap
						.get("cesearch_Password");
			}
			if (parentContextMap.containsKey("cesearch_Schema")) {
				context.cesearch_Schema = (String) parentContextMap
						.get("cesearch_Schema");
			}
			if (parentContextMap.containsKey("cesearch_Server")) {
				context.cesearch_Server = (String) parentContextMap
						.get("cesearch_Server");
			}
			if (parentContextMap.containsKey("cesearch_Login")) {
				context.cesearch_Login = (String) parentContextMap
						.get("cesearch_Login");
			}
			if (parentContextMap.containsKey("ceadmindb_Port")) {
				context.ceadmindb_Port = (String) parentContextMap
						.get("ceadmindb_Port");
			}
			if (parentContextMap.containsKey("ceadmindb_Schema")) {
				context.ceadmindb_Schema = (String) parentContextMap
						.get("ceadmindb_Schema");
			}
			if (parentContextMap.containsKey("ceadmindb_Server")) {
				context.ceadmindb_Server = (String) parentContextMap
						.get("ceadmindb_Server");
			}
			if (parentContextMap.containsKey("ceadmindb_Password")) {
				context.ceadmindb_Password = (java.lang.String) parentContextMap
						.get("ceadmindb_Password");
			}
			if (parentContextMap.containsKey("ceadmindb_Database")) {
				context.ceadmindb_Database = (String) parentContextMap
						.get("ceadmindb_Database");
			}
			if (parentContextMap.containsKey("ceadmindb_Login")) {
				context.ceadmindb_Login = (String) parentContextMap
						.get("ceadmindb_Login");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("cesearch_Password");
		parametersToEncrypt.add("ceadmindb_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlInput_1) {
			globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", -1);

			e_tPostgresqlInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : TradeModelMigration");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 322084 characters generated by Talend Open Studio for Data Integration on the
 * 3 December, 2014 5:34:16 PM IST
 ************************************************************************************************/
