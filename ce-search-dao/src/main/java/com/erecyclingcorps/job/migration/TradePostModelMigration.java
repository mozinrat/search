// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.erecyclingcorps.job.migration;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: TradePostModelMigration Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.0.20141024_1545
 * @status 
 */
public class TradePostModelMigration implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ceadmindb_Database != null) {

				this.setProperty("ceadmindb_Database",
						ceadmindb_Database.toString());

			}

			if (ceadmindb_Login != null) {

				this.setProperty("ceadmindb_Login", ceadmindb_Login.toString());

			}

			if (ceadmindb_Password != null) {

				this.setProperty("ceadmindb_Password",
						ceadmindb_Password.toString());

			}

			if (ceadmindb_Port != null) {

				this.setProperty("ceadmindb_Port", ceadmindb_Port.toString());

			}

			if (ceadmindb_Schema != null) {

				this.setProperty("ceadmindb_Schema",
						ceadmindb_Schema.toString());

			}

			if (ceadmindb_Server != null) {

				this.setProperty("ceadmindb_Server",
						ceadmindb_Server.toString());

			}

			if (cesearch_Database != null) {

				this.setProperty("cesearch_Database",
						cesearch_Database.toString());

			}

			if (cesearch_Login != null) {

				this.setProperty("cesearch_Login", cesearch_Login.toString());

			}

			if (cesearch_Password != null) {

				this.setProperty("cesearch_Password",
						cesearch_Password.toString());

			}

			if (cesearch_Port != null) {

				this.setProperty("cesearch_Port", cesearch_Port.toString());

			}

			if (cesearch_Schema != null) {

				this.setProperty("cesearch_Schema", cesearch_Schema.toString());

			}

			if (cesearch_Server != null) {

				this.setProperty("cesearch_Server", cesearch_Server.toString());

			}

			if (categorystring != null) {

				this.setProperty("categorystring", categorystring.toString());

			}

			if (ce_dealercategoryid != null) {

				this.setProperty("ce_dealercategoryid",
						ce_dealercategoryid.toString());

			}

			if (cesearchbatchuser != null) {

				this.setProperty("cesearchbatchuser",
						cesearchbatchuser.toString());

			}

			if (cew_dealercategoryid != null) {

				this.setProperty("cew_dealercategoryid",
						cew_dealercategoryid.toString());

			}

			if (jobdate != null) {

				String pattern_jobdate = "yyyy-MM-dd HH:mm:ss";
				String value_jobdate = "2011-11-21 17:05:50";
				String[] parts_jobdate = value_jobdate.split(";");
				if (parts_jobdate.length > 1) {
					pattern_jobdate = parts_jobdate[0];
					this.setProperty(
							"jobdate",
							pattern_jobdate
									+ ";"
									+ FormatterUtils.format_Date(jobdate,
											pattern_jobdate));
				} else {
					this.setProperty("jobdate", FormatterUtils.format_Date(
							jobdate, pattern_jobdate));
				}

			}

			if (programname != null) {

				this.setProperty("programname", programname.toString());

			}

		}

		public String ceadmindb_Database;

		public String getCeadmindb_Database() {
			return this.ceadmindb_Database;
		}

		public String ceadmindb_Login;

		public String getCeadmindb_Login() {
			return this.ceadmindb_Login;
		}

		public java.lang.String ceadmindb_Password;

		public java.lang.String getCeadmindb_Password() {
			return this.ceadmindb_Password;
		}

		public String ceadmindb_Port;

		public String getCeadmindb_Port() {
			return this.ceadmindb_Port;
		}

		public String ceadmindb_Schema;

		public String getCeadmindb_Schema() {
			return this.ceadmindb_Schema;
		}

		public String ceadmindb_Server;

		public String getCeadmindb_Server() {
			return this.ceadmindb_Server;
		}

		public String cesearch_Database;

		public String getCesearch_Database() {
			return this.cesearch_Database;
		}

		public String cesearch_Login;

		public String getCesearch_Login() {
			return this.cesearch_Login;
		}

		public java.lang.String cesearch_Password;

		public java.lang.String getCesearch_Password() {
			return this.cesearch_Password;
		}

		public String cesearch_Port;

		public String getCesearch_Port() {
			return this.cesearch_Port;
		}

		public String cesearch_Schema;

		public String getCesearch_Schema() {
			return this.cesearch_Schema;
		}

		public String cesearch_Server;

		public String getCesearch_Server() {
			return this.cesearch_Server;
		}

		public String categorystring;

		public String getCategorystring() {
			return this.categorystring;
		}

		public Long ce_dealercategoryid;

		public Long getCe_dealercategoryid() {
			return this.ce_dealercategoryid;
		}

		public Long cesearchbatchuser;

		public Long getCesearchbatchuser() {
			return this.cesearchbatchuser;
		}

		public Long cew_dealercategoryid;

		public Long getCew_dealercategoryid() {
			return this.cew_dealercategoryid;
		}

		public java.util.Date jobdate;

		public java.util.Date getJobdate() {
			return this.jobdate;
		}

		public String programname;

		public String getProgramname() {
			return this.programname;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "TradePostModelMigration";
	private final String projectName = "SEARCHMIGRATION";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TradePostModelMigration.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(TradePostModelMigration.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostgresqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_cesearch1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_ceadmin1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_cesearch_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_cesearch2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class networkoutStruct implements
			routines.system.IPersistableRow<networkoutStruct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradePostModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long programattributeid;

		public long getProgramattributeid() {
			return this.programattributeid;
		}

		public long programmodelcatgid;

		public long getProgrammodelcatgid() {
			return this.programmodelcatgid;
		}

		public long attributeid;

		public long getAttributeid() {
			return this.attributeid;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public long description;

		public long getDescription() {
			return this.description;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.programattributeid;

				result = prime * result + (int) this.programmodelcatgid;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final networkoutStruct other = (networkoutStruct) obj;

			if (this.programattributeid != other.programattributeid)
				return false;

			if (this.programmodelcatgid != other.programmodelcatgid)
				return false;

			return true;
		}

		public void copyDataTo(networkoutStruct other) {

			other.programattributeid = this.programattributeid;
			other.programmodelcatgid = this.programmodelcatgid;
			other.attributeid = this.attributeid;
			other.value = this.value;
			other.description = this.description;

		}

		public void copyKeysDataTo(networkoutStruct other) {

			other.programattributeid = this.programattributeid;
			other.programmodelcatgid = this.programmodelcatgid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradePostModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradePostModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration,
						0, length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradePostModelMigration) {

				try {

					int length = 0;

					this.programattributeid = dis.readLong();

					this.programmodelcatgid = dis.readLong();

					this.attributeid = dis.readLong();

					this.value = readString(dis);

					this.description = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.programattributeid);

				// long

				dos.writeLong(this.programmodelcatgid);

				// long

				dos.writeLong(this.attributeid);

				// String

				writeString(this.value, dos);

				// long

				dos.writeLong(this.description);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("programattributeid="
					+ String.valueOf(programattributeid));
			sb.append(",programmodelcatgid="
					+ String.valueOf(programmodelcatgid));
			sb.append(",attributeid=" + String.valueOf(attributeid));
			sb.append(",value=" + value);
			sb.append(",description=" + String.valueOf(description));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(networkoutStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.programattributeid,
					other.programattributeid);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.programmodelcatgid,
					other.programmodelcatgid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradePostModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[0];

		public String programname;

		public String getProgramname() {
			return this.programname;
		}

		public long manufacturerid;

		public long getManufacturerid() {
			return this.manufacturerid;
		}

		public String manufacturercode;

		public String getManufacturercode() {
			return this.manufacturercode;
		}

		public long manufacturermodelid;

		public long getManufacturermodelid() {
			return this.manufacturermodelid;
		}

		public long manufacturermodel_pkey;

		public long getManufacturermodel_pkey() {
			return this.manufacturermodel_pkey;
		}

		public String modelcode;

		public String getModelcode() {
			return this.modelcode;
		}

		public String manufactureraliases;

		public String getManufactureraliases() {
			return this.manufactureraliases;
		}

		public String modelaliases;

		public String getModelaliases() {
			return this.modelaliases;
		}

		public String carrier;

		public String getCarrier() {
			return this.carrier;
		}

		public String carriersku;

		public String getCarriersku() {
			return this.carriersku;
		}

		public Integer search_order;

		public Integer getSearch_order() {
			return this.search_order;
		}

		public Integer version;

		public Integer getVersion() {
			return this.version;
		}

		public long createdby;

		public long getCreatedby() {
			return this.createdby;
		}

		public java.util.Date createddate;

		public java.util.Date getCreateddate() {
			return this.createddate;
		}

		public java.util.Date lastupdateddate;

		public java.util.Date getLastupdateddate() {
			return this.lastupdateddate;
		}

		public Long updatedby;

		public Long getUpdatedby() {
			return this.updatedby;
		}

		public Long datawipemethod;

		public Long getDatawipemethod() {
			return this.datawipemethod;
		}

		public String modeltitle;

		public String getModeltitle() {
			return this.modeltitle;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradePostModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradePostModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration,
						0, length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradePostModelMigration) {

				try {

					int length = 0;

					this.programname = readString(dis);

					this.manufacturerid = dis.readLong();

					this.manufacturercode = readString(dis);

					this.manufacturermodelid = dis.readLong();

					this.manufacturermodel_pkey = dis.readLong();

					this.modelcode = readString(dis);

					this.manufactureraliases = readString(dis);

					this.modelaliases = readString(dis);

					this.carrier = readString(dis);

					this.carriersku = readString(dis);

					this.search_order = readInteger(dis);

					this.version = readInteger(dis);

					this.createdby = dis.readLong();

					this.createddate = readDate(dis);

					this.lastupdateddate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.updatedby = null;
					} else {
						this.updatedby = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.datawipemethod = null;
					} else {
						this.datawipemethod = dis.readLong();
					}

					this.modeltitle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.programname, dos);

				// long

				dos.writeLong(this.manufacturerid);

				// String

				writeString(this.manufacturercode, dos);

				// long

				dos.writeLong(this.manufacturermodelid);

				// long

				dos.writeLong(this.manufacturermodel_pkey);

				// String

				writeString(this.modelcode, dos);

				// String

				writeString(this.manufactureraliases, dos);

				// String

				writeString(this.modelaliases, dos);

				// String

				writeString(this.carrier, dos);

				// String

				writeString(this.carriersku, dos);

				// Integer

				writeInteger(this.search_order, dos);

				// Integer

				writeInteger(this.version, dos);

				// long

				dos.writeLong(this.createdby);

				// java.util.Date

				writeDate(this.createddate, dos);

				// java.util.Date

				writeDate(this.lastupdateddate, dos);

				// Long

				if (this.updatedby == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.updatedby);
				}

				// Long

				if (this.datawipemethod == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.datawipemethod);
				}

				// String

				writeString(this.modeltitle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("programname=" + programname);
			sb.append(",manufacturerid=" + String.valueOf(manufacturerid));
			sb.append(",manufacturercode=" + manufacturercode);
			sb.append(",manufacturermodelid="
					+ String.valueOf(manufacturermodelid));
			sb.append(",manufacturermodel_pkey="
					+ String.valueOf(manufacturermodel_pkey));
			sb.append(",modelcode=" + modelcode);
			sb.append(",manufactureraliases=" + manufactureraliases);
			sb.append(",modelaliases=" + modelaliases);
			sb.append(",carrier=" + carrier);
			sb.append(",carriersku=" + carriersku);
			sb.append(",search_order=" + String.valueOf(search_order));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",createdby=" + String.valueOf(createdby));
			sb.append(",createddate=" + String.valueOf(createddate));
			sb.append(",lastupdateddate=" + String.valueOf(lastupdateddate));
			sb.append(",updatedby=" + String.valueOf(updatedby));
			sb.append(",datawipemethod=" + String.valueOf(datawipemethod));
			sb.append(",modeltitle=" + modeltitle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_1Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_1Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradePostModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[0];

		public String programname;

		public String getProgramname() {
			return this.programname;
		}

		public long manufacturerid;

		public long getManufacturerid() {
			return this.manufacturerid;
		}

		public String manufacturercode;

		public String getManufacturercode() {
			return this.manufacturercode;
		}

		public long manufacturermodelid;

		public long getManufacturermodelid() {
			return this.manufacturermodelid;
		}

		public long manufacturermodel_pkey;

		public long getManufacturermodel_pkey() {
			return this.manufacturermodel_pkey;
		}

		public String modelcode;

		public String getModelcode() {
			return this.modelcode;
		}

		public String manufactureraliases;

		public String getManufactureraliases() {
			return this.manufactureraliases;
		}

		public String modelaliases;

		public String getModelaliases() {
			return this.modelaliases;
		}

		public String carrier;

		public String getCarrier() {
			return this.carrier;
		}

		public String carriersku;

		public String getCarriersku() {
			return this.carriersku;
		}

		public Integer search_order;

		public Integer getSearch_order() {
			return this.search_order;
		}

		public Integer version;

		public Integer getVersion() {
			return this.version;
		}

		public long createdby;

		public long getCreatedby() {
			return this.createdby;
		}

		public java.util.Date createddate;

		public java.util.Date getCreateddate() {
			return this.createddate;
		}

		public java.util.Date lastupdateddate;

		public java.util.Date getLastupdateddate() {
			return this.lastupdateddate;
		}

		public Long updatedby;

		public Long getUpdatedby() {
			return this.updatedby;
		}

		public Long datawipemethod;

		public Long getDatawipemethod() {
			return this.datawipemethod;
		}

		public String modeltitle;

		public String getModeltitle() {
			return this.modeltitle;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradePostModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradePostModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration,
						0, length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradePostModelMigration) {

				try {

					int length = 0;

					this.programname = readString(dis);

					this.manufacturerid = dis.readLong();

					this.manufacturercode = readString(dis);

					this.manufacturermodelid = dis.readLong();

					this.manufacturermodel_pkey = dis.readLong();

					this.modelcode = readString(dis);

					this.manufactureraliases = readString(dis);

					this.modelaliases = readString(dis);

					this.carrier = readString(dis);

					this.carriersku = readString(dis);

					this.search_order = readInteger(dis);

					this.version = readInteger(dis);

					this.createdby = dis.readLong();

					this.createddate = readDate(dis);

					this.lastupdateddate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.updatedby = null;
					} else {
						this.updatedby = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.datawipemethod = null;
					} else {
						this.datawipemethod = dis.readLong();
					}

					this.modeltitle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.programname, dos);

				// long

				dos.writeLong(this.manufacturerid);

				// String

				writeString(this.manufacturercode, dos);

				// long

				dos.writeLong(this.manufacturermodelid);

				// long

				dos.writeLong(this.manufacturermodel_pkey);

				// String

				writeString(this.modelcode, dos);

				// String

				writeString(this.manufactureraliases, dos);

				// String

				writeString(this.modelaliases, dos);

				// String

				writeString(this.carrier, dos);

				// String

				writeString(this.carriersku, dos);

				// Integer

				writeInteger(this.search_order, dos);

				// Integer

				writeInteger(this.version, dos);

				// long

				dos.writeLong(this.createdby);

				// java.util.Date

				writeDate(this.createddate, dos);

				// java.util.Date

				writeDate(this.lastupdateddate, dos);

				// Long

				if (this.updatedby == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.updatedby);
				}

				// Long

				if (this.datawipemethod == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.datawipemethod);
				}

				// String

				writeString(this.modeltitle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("programname=" + programname);
			sb.append(",manufacturerid=" + String.valueOf(manufacturerid));
			sb.append(",manufacturercode=" + manufacturercode);
			sb.append(",manufacturermodelid="
					+ String.valueOf(manufacturermodelid));
			sb.append(",manufacturermodel_pkey="
					+ String.valueOf(manufacturermodel_pkey));
			sb.append(",modelcode=" + modelcode);
			sb.append(",manufactureraliases=" + manufactureraliases);
			sb.append(",modelaliases=" + modelaliases);
			sb.append(",carrier=" + carrier);
			sb.append(",carriersku=" + carriersku);
			sb.append(",search_order=" + String.valueOf(search_order));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",createdby=" + String.valueOf(createdby));
			sb.append(",createddate=" + String.valueOf(createddate));
			sb.append(",lastupdateddate=" + String.valueOf(lastupdateddate));
			sb.append(",updatedby=" + String.valueOf(updatedby));
			sb.append(",datawipemethod=" + String.valueOf(datawipemethod));
			sb.append(",modeltitle=" + modeltitle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_8Process(globalMap);
				tPostgresqlInput_2Process(globalMap);
				tPostgresqlInput_3Process(globalMap);
				tPostgresqlInput_4Process(globalMap);

				row1Struct row1 = new row1Struct();
				networkoutStruct networkout = new networkoutStruct();

				/**
				 * [tPostgresqlOutput_5 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_5", false);
				start_Hash.put("tPostgresqlOutput_5",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_5";

				int tos_count_tPostgresqlOutput_5 = 0;

				String dbschema_tPostgresqlOutput_5 = null;
				dbschema_tPostgresqlOutput_5 = context.cesearch_Schema;

				String tableName_tPostgresqlOutput_5 = null;
				if (dbschema_tPostgresqlOutput_5 == null
						|| dbschema_tPostgresqlOutput_5.trim().length() == 0) {
					tableName_tPostgresqlOutput_5 = "ref_program_model_attribute";
				} else {
					tableName_tPostgresqlOutput_5 = dbschema_tPostgresqlOutput_5
							+ "\".\"" + "ref_program_model_attribute";
				}

				int updateKeyCount_tPostgresqlOutput_5 = 2;
				if (updateKeyCount_tPostgresqlOutput_5 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_5 = 0;
				int nb_line_update_tPostgresqlOutput_5 = 0;
				int nb_line_inserted_tPostgresqlOutput_5 = 0;
				int nb_line_deleted_tPostgresqlOutput_5 = 0;
				int nb_line_rejected_tPostgresqlOutput_5 = 0;

				int deletedCount_tPostgresqlOutput_5 = 0;
				int updatedCount_tPostgresqlOutput_5 = 0;
				int insertedCount_tPostgresqlOutput_5 = 0;
				int rejectedCount_tPostgresqlOutput_5 = 0;

				boolean whetherReject_tPostgresqlOutput_5 = false;

				java.sql.Connection conn_tPostgresqlOutput_5 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_5 = "jdbc:postgresql://"
						+ context.cesearch_Server + ":" + context.cesearch_Port
						+ "/" + context.cesearch_Database;
				String dbUser_tPostgresqlOutput_5 = context.cesearch_Login;

				final String decryptedPassword_tPostgresqlOutput_5 = context.cesearch_Password;

				String dbPwd_tPostgresqlOutput_5 = decryptedPassword_tPostgresqlOutput_5;

				conn_tPostgresqlOutput_5 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_5,
								dbUser_tPostgresqlOutput_5,
								dbPwd_tPostgresqlOutput_5);

				resourceMap.put("conn_tPostgresqlOutput_5",
						conn_tPostgresqlOutput_5);
				conn_tPostgresqlOutput_5.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_5 = 10000;
				int commitCounter_tPostgresqlOutput_5 = 0;

				int batchSize_tPostgresqlOutput_5 = 10000;
				int batchSizeCounter_tPostgresqlOutput_5 = 0;

				int count_tPostgresqlOutput_5 = 0;
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tPostgresqlOutput_5
								+ "\" WHERE \""
								+ "programattributeid"
								+ "\" = "
								+ "nextval('ref_program_model_attribute_programattributeid_seq')"
								+ " AND \"programmodelcatgid\" = ?");
				String insert_tPostgresqlOutput_5 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_5
						+ "\" (\""
						+ "programattributeid"
						+ "\",\"programmodelcatgid\",\"attributeid\",\"value\",\"description\") VALUES ("
						+ "nextval('ref_program_model_attribute_programattributeid_seq')"
						+ ",?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5
						.prepareStatement(insert_tPostgresqlOutput_5);
				String update_tPostgresqlOutput_5 = "UPDATE \""
						+ tableName_tPostgresqlOutput_5
						+ "\" SET \"attributeid\" = ?,\"value\" = ?,\"description\" = ? WHERE \""
						+ "programattributeid"
						+ "\" = "
						+ "nextval('ref_program_model_attribute_programattributeid_seq')"
						+ " AND \"programmodelcatgid\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5
						.prepareStatement(update_tPostgresqlOutput_5);

				/**
				 * [tPostgresqlOutput_5 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ceadmin1Struct> tHash_Lookup_ceadmin1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ceadmin1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ceadmin1Struct>) globalMap
						.get("tHash_Lookup_ceadmin1"));

				ceadmin1Struct ceadmin1HashKey = new ceadmin1Struct();
				ceadmin1Struct ceadmin1Default = new ceadmin1Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearch2Struct> tHash_Lookup_cesearch2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearch2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearch2Struct>) globalMap
						.get("tHash_Lookup_cesearch2"));

				cesearch2Struct cesearch2HashKey = new cesearch2Struct();
				cesearch2Struct cesearch2Default = new cesearch2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearch1Struct> tHash_Lookup_cesearch1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearch1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearch1Struct>) globalMap
						.get("tHash_Lookup_cesearch1"));

				cesearch1Struct cesearch1HashKey = new cesearch1Struct();
				cesearch1Struct cesearch1Default = new cesearch1Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearchStruct> tHash_Lookup_cesearch = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearchStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearchStruct>) globalMap
						.get("tHash_Lookup_cesearch"));

				tHash_Lookup_cesearch.initGet();

				cesearchStruct cesearchHashKey = new cesearchStruct();
				cesearchStruct cesearchDefault = new cesearchStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				networkoutStruct networkout_tmp = new networkoutStruct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_1);
				String dbUser_tPostgresqlInput_1 = context.ceadmindb_Login;

				final String decryptedPassword_tPostgresqlInput_1 = context.ceadmindb_Password;

				String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;

				String url_tPostgresqlInput_1 = "jdbc:postgresql://"
						+ context.ceadmindb_Server + ":"
						+ context.ceadmindb_Port + "/"
						+ context.ceadmindb_Database;

				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_1, dbUser_tPostgresqlInput_1,
						dbPwd_tPostgresqlInput_1);

				conn_tPostgresqlInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "SELECT\n  pm.programname,\n  m.manufacturerid,\n  m.code as manufacturercode,\n  pa.manufacturermodelid,\n  mm.manufacturermodelid as manufacturermodel_pkey,\n  pa.datawipemethod\nFROM ref_manufacturermodel mm\ninner join ref_manufacturer m on m.manufacturerid = mm.manufacturerid\ninner join ref_programattribute pa on pa.manufacturermodelid = mm.manufacturermodelid \ninner join ref_program pm on (pa.programid=pm.programid)	";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);
				java.sql.ResultSet rs_tPostgresqlInput_1 = null;
				try {
					rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
							.executeQuery(dbquery_tPostgresqlInput_1);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
							.getColumnCount();

					String tmpContent_tPostgresqlInput_1 = null;

					while (rs_tPostgresqlInput_1.next()) {
						nb_line_tPostgresqlInput_1++;

						if (colQtyInRs_tPostgresqlInput_1 < 1) {
							row1.programname = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(1);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.programname = tmpContent_tPostgresqlInput_1;
							} else {
								row1.programname = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 2) {
							row1.manufacturerid = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(2) != null) {
								row1.manufacturerid = rs_tPostgresqlInput_1
										.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 3) {
							row1.manufacturercode = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(3);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.manufacturercode = tmpContent_tPostgresqlInput_1;
							} else {
								row1.manufacturercode = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 4) {
							row1.manufacturermodelid = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(4) != null) {
								row1.manufacturermodelid = rs_tPostgresqlInput_1
										.getLong(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 5) {
							row1.manufacturermodel_pkey = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(5) != null) {
								row1.manufacturermodel_pkey = rs_tPostgresqlInput_1
										.getLong(5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 6) {
							row1.modelcode = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(6);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.modelcode = tmpContent_tPostgresqlInput_1;
							} else {
								row1.modelcode = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 7) {
							row1.manufactureraliases = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(7);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.manufactureraliases = tmpContent_tPostgresqlInput_1;
							} else {
								row1.manufactureraliases = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 8) {
							row1.modelaliases = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(8);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.modelaliases = tmpContent_tPostgresqlInput_1;
							} else {
								row1.modelaliases = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 9) {
							row1.carrier = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(9);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.carrier = tmpContent_tPostgresqlInput_1;
							} else {
								row1.carrier = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 10) {
							row1.carriersku = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(10);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.carriersku = tmpContent_tPostgresqlInput_1;
							} else {
								row1.carriersku = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 11) {
							row1.search_order = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(11) != null) {
								row1.search_order = rs_tPostgresqlInput_1
										.getInt(11);
							} else {
								row1.search_order = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 12) {
							row1.version = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(12) != null) {
								row1.version = rs_tPostgresqlInput_1.getInt(12);
							} else {
								row1.version = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 13) {
							row1.createdby = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(13) != null) {
								row1.createdby = rs_tPostgresqlInput_1
										.getLong(13);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 14) {
							row1.createddate = null;
						} else {

							if (rs_tPostgresqlInput_1.getTimestamp(14) != null) {
								row1.createddate = new java.util.Date(
										rs_tPostgresqlInput_1.getTimestamp(14)
												.getTime());
							} else {
								row1.createddate = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 15) {
							row1.lastupdateddate = null;
						} else {

							if (rs_tPostgresqlInput_1.getTimestamp(15) != null) {
								row1.lastupdateddate = new java.util.Date(
										rs_tPostgresqlInput_1.getTimestamp(15)
												.getTime());
							} else {
								row1.lastupdateddate = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 16) {
							row1.updatedby = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(16) != null) {
								row1.updatedby = rs_tPostgresqlInput_1
										.getLong(16);
							} else {
								row1.updatedby = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 17) {
							row1.datawipemethod = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(17) != null) {
								row1.datawipemethod = rs_tPostgresqlInput_1
										.getLong(17);
							} else {
								row1.datawipemethod = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 18) {
							row1.modeltitle = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(18);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row1.modeltitle = tmpContent_tPostgresqlInput_1;
							} else {
								row1.modeltitle = null;
							}
						}

						/**
						 * [tPostgresqlInput_1 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_1 main ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						tos_count_tPostgresqlInput_1++;

						/**
						 * [tPostgresqlInput_1 main ] stop
						 */

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "ceadmin1"
						// /////////////////////////////////////////////

						boolean forceLoopceadmin1 = false;

						ceadmin1Struct ceadmin1ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5 = false;

							Object exprKeyValue_ceadmin1__constantid = row1.datawipemethod;
							if (exprKeyValue_ceadmin1__constantid == null) {
								hasCasePrimitiveKeyWithNull_tMap_5 = true;
							} else {
								ceadmin1HashKey.constantid = (long) (Long) exprKeyValue_ceadmin1__constantid;
							}

							ceadmin1HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_5) { // G_TM_M_091

								tHash_Lookup_ceadmin1.lookup(ceadmin1HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_5
									|| !tHash_Lookup_ceadmin1.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_5 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_ceadmin1 != null
								&& tHash_Lookup_ceadmin1
										.getCount(ceadmin1HashKey) > 1) { // G
																			// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ceadmin1' and it contains more one result from keys :  ceadmin1.constantid = '"
							// + ceadmin1HashKey.constantid + "'");
						} // G 071

						ceadmin1Struct ceadmin1 = null;

						ceadmin1Struct fromLookup_ceadmin1 = null;
						ceadmin1 = ceadmin1Default;

						if (tHash_Lookup_ceadmin1 != null
								&& tHash_Lookup_ceadmin1.hasNext()) { // G 099

							fromLookup_ceadmin1 = tHash_Lookup_ceadmin1.next();

						} // G 099

						if (fromLookup_ceadmin1 != null) {
							ceadmin1 = fromLookup_ceadmin1;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "cesearch2"
						// /////////////////////////////////////////////

						boolean forceLoopcesearch2 = false;

						cesearch2Struct cesearch2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5 = false;

							cesearch2HashKey.programname = row1.programname;

							cesearch2HashKey.hashCodeDirty = true;

							tHash_Lookup_cesearch2.lookup(cesearch2HashKey);

							if (!tHash_Lookup_cesearch2.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_5 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_cesearch2 != null
								&& tHash_Lookup_cesearch2
										.getCount(cesearch2HashKey) > 1) { // G
																			// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'cesearch2' and it contains more one result from keys :  cesearch2.programname = '"
							// + cesearch2HashKey.programname + "'");
						} // G 071

						cesearch2Struct cesearch2 = null;

						cesearch2Struct fromLookup_cesearch2 = null;
						cesearch2 = cesearch2Default;

						if (tHash_Lookup_cesearch2 != null
								&& tHash_Lookup_cesearch2.hasNext()) { // G 099

							fromLookup_cesearch2 = tHash_Lookup_cesearch2
									.next();

						} // G 099

						if (fromLookup_cesearch2 != null) {
							cesearch2 = fromLookup_cesearch2;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "cesearch1"
						// /////////////////////////////////////////////

						boolean forceLoopcesearch1 = false;

						cesearch1Struct cesearch1ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5 = false;

							Object exprKeyValue_cesearch1__programcategoryid = cesearch2.programcategoryid;
							if (exprKeyValue_cesearch1__programcategoryid == null) {
								hasCasePrimitiveKeyWithNull_tMap_5 = true;
							} else {
								cesearch1HashKey.programcategoryid = (long) (Long) exprKeyValue_cesearch1__programcategoryid;
							}

							cesearch1HashKey.modelcode = row1.modelcode;

							cesearch1HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_5) { // G_TM_M_091

								tHash_Lookup_cesearch1.lookup(cesearch1HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_5
									|| !tHash_Lookup_cesearch1.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_5 = true;

								forceLoopcesearch1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLoopcesearch1 = true;
						} // G 21

						cesearch1Struct cesearch1 = null;

						while ((tHash_Lookup_cesearch1 != null && tHash_Lookup_cesearch1
								.hasNext()) || forceLoopcesearch1) { // G_TM_M_043

							// CALL close loop of lookup 'cesearch1'

							cesearch1Struct fromLookup_cesearch1 = null;
							cesearch1 = cesearch1Default;

							if (!forceLoopcesearch1) { // G 46

								fromLookup_cesearch1 = tHash_Lookup_cesearch1
										.next();

								if (fromLookup_cesearch1 != null) {
									cesearch1 = fromLookup_cesearch1;
								}

							} // G 46

							forceLoopcesearch1 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "cesearch"
							// /////////////////////////////////////////////

							boolean forceLoopcesearch = false;

							cesearchStruct cesearchObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								tHash_Lookup_cesearch.lookup(cesearchHashKey);

								if (!tHash_Lookup_cesearch.hasNext()) { // G_TM_M_090

									forceLoopcesearch = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLoopcesearch = true;
							} // G 21

							cesearchStruct cesearch = null;

							while ((tHash_Lookup_cesearch != null && tHash_Lookup_cesearch
									.hasNext()) || forceLoopcesearch) { // G_TM_M_043

								// CALL close loop of lookup 'cesearch'

								cesearchStruct fromLookup_cesearch = null;
								cesearch = cesearchDefault;

								if (!forceLoopcesearch) { // G 46

									fromLookup_cesearch = tHash_Lookup_cesearch
											.next();

									if (fromLookup_cesearch != null) {
										cesearch = fromLookup_cesearch;
									}

								} // G 46

								forceLoopcesearch = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
									// ###############################
									// # Output tables

									networkout = null;

									if (!rejectedInnerJoin_tMap_5) {

										// # Output table : 'networkout'
										networkout_tmp.programattributeid = 1;
										networkout_tmp.programmodelcatgid = cesearch1.programmodelcatgid;
										networkout_tmp.attributeid = cesearch.attributeid;
										networkout_tmp.value = ceadmin1.value;
										networkout_tmp.description = 0;
										networkout = networkout_tmp;
									} // closing inner join bracket (2)
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_5 = false;

								tos_count_tMap_5++;

								/**
								 * [tMap_5 main ] stop
								 */
								// Start of branch "networkout"
								if (networkout != null) {

									/**
									 * [tPostgresqlOutput_5 main ] start
									 */

									currentComponent = "tPostgresqlOutput_5";

									whetherReject_tPostgresqlOutput_5 = false;
									pstmt_tPostgresqlOutput_5.setLong(1,
											networkout.programmodelcatgid);

									java.sql.ResultSet rs_tPostgresqlOutput_5 = pstmt_tPostgresqlOutput_5
											.executeQuery();
									int checkCount_tPostgresqlOutput_5 = -1;
									while (rs_tPostgresqlOutput_5.next()) {
										checkCount_tPostgresqlOutput_5 = rs_tPostgresqlOutput_5
												.getInt(1);
									}
									if (checkCount_tPostgresqlOutput_5 > 0) {
										pstmtUpdate_tPostgresqlOutput_5
												.setLong(1,
														networkout.attributeid);

										if (networkout.value == null) {
											pstmtUpdate_tPostgresqlOutput_5
													.setNull(
															2,
															java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tPostgresqlOutput_5
													.setString(2,
															networkout.value);
										}

										pstmtUpdate_tPostgresqlOutput_5
												.setLong(3,
														networkout.description);

										pstmtUpdate_tPostgresqlOutput_5
												.setLong(
														4 + count_tPostgresqlOutput_5,
														networkout.programmodelcatgid);

										try {

											updatedCount_tPostgresqlOutput_5 = updatedCount_tPostgresqlOutput_5
													+ pstmtUpdate_tPostgresqlOutput_5
															.executeUpdate();
											nb_line_tPostgresqlOutput_5++;

										} catch (java.lang.Exception e) {

											whetherReject_tPostgresqlOutput_5 = true;
											throw (e);
										}
									} else {
										pstmtInsert_tPostgresqlOutput_5
												.setLong(
														1,
														networkout.programmodelcatgid);

										pstmtInsert_tPostgresqlOutput_5
												.setLong(2,
														networkout.attributeid);

										if (networkout.value == null) {
											pstmtInsert_tPostgresqlOutput_5
													.setNull(
															3,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_5
													.setString(3,
															networkout.value);
										}

										pstmtInsert_tPostgresqlOutput_5
												.setLong(4,
														networkout.description);

										try {

											insertedCount_tPostgresqlOutput_5 = insertedCount_tPostgresqlOutput_5
													+ pstmtInsert_tPostgresqlOutput_5
															.executeUpdate();
											nb_line_tPostgresqlOutput_5++;

										} catch (java.lang.Exception e) {

											whetherReject_tPostgresqlOutput_5 = true;
											throw (e);
										}
									}
									if (batchSize_tPostgresqlOutput_5 <= batchSizeCounter_tPostgresqlOutput_5) {

									}

									commitCounter_tPostgresqlOutput_5++;
									if (commitEvery_tPostgresqlOutput_5 <= commitCounter_tPostgresqlOutput_5) {

										conn_tPostgresqlOutput_5.commit();

										commitCounter_tPostgresqlOutput_5 = 0;
									}

									tos_count_tPostgresqlOutput_5++;

									/**
									 * [tPostgresqlOutput_5 main ] stop
									 */

								} // End of branch "networkout"

							} // close loop of lookup 'cesearch' // G_TM_M_043

						} // close loop of lookup 'cesearch1' // G_TM_M_043

						/**
						 * [tPostgresqlInput_1 end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

					}
				} finally {
					stmt_tPostgresqlInput_1.close();

					if (conn_tPostgresqlInput_1 != null
							&& !conn_tPostgresqlInput_1.isClosed()) {

						conn_tPostgresqlInput_1.commit();

						conn_tPostgresqlInput_1.close();

					}

				}
				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_ceadmin1 != null) {
					tHash_Lookup_ceadmin1.endGet();
				}
				globalMap.remove("tHash_Lookup_ceadmin1");

				if (tHash_Lookup_cesearch2 != null) {
					tHash_Lookup_cesearch2.endGet();
				}
				globalMap.remove("tHash_Lookup_cesearch2");

				if (tHash_Lookup_cesearch1 != null) {
					tHash_Lookup_cesearch1.endGet();
				}
				globalMap.remove("tHash_Lookup_cesearch1");

				if (tHash_Lookup_cesearch != null) {
					tHash_Lookup_cesearch.endGet();
				}
				globalMap.remove("tHash_Lookup_cesearch");

				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_5 end ] start
				 */

				currentComponent = "tPostgresqlOutput_5";

				if (pstmtUpdate_tPostgresqlOutput_5 != null) {

					pstmtUpdate_tPostgresqlOutput_5.close();

				}
				if (pstmtInsert_tPostgresqlOutput_5 != null) {

					pstmtInsert_tPostgresqlOutput_5.close();

				}
				if (pstmt_tPostgresqlOutput_5 != null) {

					pstmt_tPostgresqlOutput_5.close();

				}

				conn_tPostgresqlOutput_5.commit();

				conn_tPostgresqlOutput_5.close();

				resourceMap.put("finish_tPostgresqlOutput_5", true);

				nb_line_deleted_tPostgresqlOutput_5 = nb_line_deleted_tPostgresqlOutput_5
						+ deletedCount_tPostgresqlOutput_5;
				nb_line_update_tPostgresqlOutput_5 = nb_line_update_tPostgresqlOutput_5
						+ updatedCount_tPostgresqlOutput_5;
				nb_line_inserted_tPostgresqlOutput_5 = nb_line_inserted_tPostgresqlOutput_5
						+ insertedCount_tPostgresqlOutput_5;
				nb_line_rejected_tPostgresqlOutput_5 = nb_line_rejected_tPostgresqlOutput_5
						+ rejectedCount_tPostgresqlOutput_5;

				globalMap.put("tPostgresqlOutput_5_NB_LINE",
						nb_line_tPostgresqlOutput_5);
				globalMap.put("tPostgresqlOutput_5_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_5);
				globalMap.put("tPostgresqlOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_5);
				globalMap.put("tPostgresqlOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_5);
				globalMap.put("tPostgresqlOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_5);

				ok_Hash.put("tPostgresqlOutput_5", true);
				end_Hash.put("tPostgresqlOutput_5", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_cesearch1");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_ceadmin1");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_cesearch");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_cesearch2");

			try {

				/**
				 * [tPostgresqlInput_1 finally ] start
				 */

				currentComponent = "tPostgresqlInput_1";

				/**
				 * [tPostgresqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_5 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_5";

				if (resourceMap.get("finish_tPostgresqlOutput_5") == null) {
					if (resourceMap.get("conn_tPostgresqlOutput_5") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tPostgresqlOutput_5")).close();

						} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_5) {
							String errorMessage_tPostgresqlOutput_5 = "failed to close the connection in tPostgresqlOutput_5 :"
									+ sqlEx_tPostgresqlOutput_5.getMessage();

							System.err
									.println(errorMessage_tPostgresqlOutput_5);
						}
					}
				}

				/**
				 * [tPostgresqlOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class cesearch1Struct implements
			routines.system.IPersistableComparableLookupRow<cesearch1Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradePostModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long programmodelcatgid;

		public long getProgrammodelcatgid() {
			return this.programmodelcatgid;
		}

		public long programcategoryid;

		public long getProgramcategoryid() {
			return this.programcategoryid;
		}

		public String modelcode;

		public String getModelcode() {
			return this.modelcode;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.programcategoryid;

				result = prime
						* result
						+ ((this.modelcode == null) ? 0 : this.modelcode
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final cesearch1Struct other = (cesearch1Struct) obj;

			if (this.programcategoryid != other.programcategoryid)
				return false;

			if (this.modelcode == null) {
				if (other.modelcode != null)
					return false;

			} else if (!this.modelcode.equals(other.modelcode))

				return false;

			return true;
		}

		public void copyDataTo(cesearch1Struct other) {

			other.programmodelcatgid = this.programmodelcatgid;
			other.programcategoryid = this.programcategoryid;
			other.modelcode = this.modelcode;

		}

		public void copyKeysDataTo(cesearch1Struct other) {

			other.programcategoryid = this.programcategoryid;
			other.modelcode = this.modelcode;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradePostModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradePostModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration,
						0, length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradePostModelMigration) {

				try {

					int length = 0;

					this.programcategoryid = dis.readLong();

					this.modelcode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.programcategoryid);

				// String

				writeString(this.modelcode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.programmodelcatgid = dis.readLong();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.programmodelcatgid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("programmodelcatgid="
					+ String.valueOf(programmodelcatgid));
			sb.append(",programcategoryid=" + String.valueOf(programcategoryid));
			sb.append(",modelcode=" + modelcode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(cesearch1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.programcategoryid,
					other.programcategoryid);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.modelcode, other.modelcode);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				cesearch1Struct cesearch1 = new cesearch1Struct();

				/**
				 * [tAdvancedHash_cesearch1 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_cesearch1", false);
				start_Hash.put("tAdvancedHash_cesearch1",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_cesearch1";

				int tos_count_tAdvancedHash_cesearch1 = 0;

				// connection name:cesearch1
				// source node:tPostgresqlInput_8 -
				// inputs:(after_tPostgresqlInput_1)
				// outputs:(cesearch1,cesearch1) | target
				// node:tAdvancedHash_cesearch1 - inputs:(cesearch1) outputs:()
				// linked node: tMap_5 -
				// inputs:(row1,cesearch1,ceadmin1,cesearch,cesearch2)
				// outputs:(networkout)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_cesearch1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearch1Struct> tHash_Lookup_cesearch1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<cesearch1Struct> getLookup(matchingModeEnum_cesearch1);

				globalMap.put("tHash_Lookup_cesearch1", tHash_Lookup_cesearch1);

				/**
				 * [tAdvancedHash_cesearch1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_8 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_8", false);
				start_Hash
						.put("tPostgresqlInput_8", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_8";

				int tos_count_tPostgresqlInput_8 = 0;

				int nb_line_tPostgresqlInput_8 = 0;
				java.sql.Connection conn_tPostgresqlInput_8 = null;
				String driverClass_tPostgresqlInput_8 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_8);
				String dbUser_tPostgresqlInput_8 = context.cesearch_Login;

				final String decryptedPassword_tPostgresqlInput_8 = context.cesearch_Password;

				String dbPwd_tPostgresqlInput_8 = decryptedPassword_tPostgresqlInput_8;

				String url_tPostgresqlInput_8 = "jdbc:postgresql://"
						+ context.cesearch_Server + ":" + context.cesearch_Port
						+ "/" + context.cesearch_Database;

				conn_tPostgresqlInput_8 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_8, dbUser_tPostgresqlInput_8,
						dbPwd_tPostgresqlInput_8);

				conn_tPostgresqlInput_8.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_8 = conn_tPostgresqlInput_8
						.createStatement();

				String dbquery_tPostgresqlInput_8 = "SELECT \np.programmodelcatgid,\np.programcategoryid,\nm.modelcode\nFROM ref_program_manufacturer_model p\njoin ref_manufacturermodel m on (p.manufacturermodelid=m.manufacturermodelid)";

				globalMap.put("tPostgresqlInput_8_QUERY",
						dbquery_tPostgresqlInput_8);
				java.sql.ResultSet rs_tPostgresqlInput_8 = null;
				try {
					rs_tPostgresqlInput_8 = stmt_tPostgresqlInput_8
							.executeQuery(dbquery_tPostgresqlInput_8);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_8 = rs_tPostgresqlInput_8
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_8 = rsmd_tPostgresqlInput_8
							.getColumnCount();

					String tmpContent_tPostgresqlInput_8 = null;

					while (rs_tPostgresqlInput_8.next()) {
						nb_line_tPostgresqlInput_8++;

						if (colQtyInRs_tPostgresqlInput_8 < 1) {
							cesearch1.programmodelcatgid = 0;
						} else {

							if (rs_tPostgresqlInput_8.getObject(1) != null) {
								cesearch1.programmodelcatgid = rs_tPostgresqlInput_8
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_8 < 2) {
							cesearch1.programcategoryid = 0;
						} else {

							if (rs_tPostgresqlInput_8.getObject(2) != null) {
								cesearch1.programcategoryid = rs_tPostgresqlInput_8
										.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_8 < 3) {
							cesearch1.modelcode = null;
						} else {

							tmpContent_tPostgresqlInput_8 = rs_tPostgresqlInput_8
									.getString(3);
							if (tmpContent_tPostgresqlInput_8 != null) {
								cesearch1.modelcode = tmpContent_tPostgresqlInput_8;
							} else {
								cesearch1.modelcode = null;
							}
						}

						/**
						 * [tPostgresqlInput_8 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_8 main ] start
						 */

						currentComponent = "tPostgresqlInput_8";

						tos_count_tPostgresqlInput_8++;

						/**
						 * [tPostgresqlInput_8 main ] stop
						 */

						/**
						 * [tAdvancedHash_cesearch1 main ] start
						 */

						currentComponent = "tAdvancedHash_cesearch1";

						cesearch1Struct cesearch1_HashRow = new cesearch1Struct();

						cesearch1_HashRow.programmodelcatgid = cesearch1.programmodelcatgid;

						cesearch1_HashRow.programcategoryid = cesearch1.programcategoryid;

						cesearch1_HashRow.modelcode = cesearch1.modelcode;

						tHash_Lookup_cesearch1.put(cesearch1_HashRow);

						tos_count_tAdvancedHash_cesearch1++;

						/**
						 * [tAdvancedHash_cesearch1 main ] stop
						 */

						/**
						 * [tPostgresqlInput_8 end ] start
						 */

						currentComponent = "tPostgresqlInput_8";

					}
				} finally {
					stmt_tPostgresqlInput_8.close();

					if (conn_tPostgresqlInput_8 != null
							&& !conn_tPostgresqlInput_8.isClosed()) {

						conn_tPostgresqlInput_8.commit();

						conn_tPostgresqlInput_8.close();

					}

				}
				globalMap.put("tPostgresqlInput_8_NB_LINE",
						nb_line_tPostgresqlInput_8);

				ok_Hash.put("tPostgresqlInput_8", true);
				end_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_cesearch1 end ] start
				 */

				currentComponent = "tAdvancedHash_cesearch1";

				tHash_Lookup_cesearch1.endPut();

				ok_Hash.put("tAdvancedHash_cesearch1", true);
				end_Hash.put("tAdvancedHash_cesearch1",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_cesearch1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_8 finally ] start
				 */

				currentComponent = "tPostgresqlInput_8";

				/**
				 * [tPostgresqlInput_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_cesearch1 finally ] start
				 */

				currentComponent = "tAdvancedHash_cesearch1";

				/**
				 * [tAdvancedHash_cesearch1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 1);
	}

	public static class ceadmin1Struct implements
			routines.system.IPersistableComparableLookupRow<ceadmin1Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradePostModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long constantid;

		public long getConstantid() {
			return this.constantid;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String code;

		public String getCode() {
			return this.code;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.constantid;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final ceadmin1Struct other = (ceadmin1Struct) obj;

			if (this.constantid != other.constantid)
				return false;

			return true;
		}

		public void copyDataTo(ceadmin1Struct other) {

			other.constantid = this.constantid;
			other.type = this.type;
			other.version = this.version;
			other.code = this.code;
			other.value = this.value;

		}

		public void copyKeysDataTo(ceadmin1Struct other) {

			other.constantid = this.constantid;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradePostModelMigration) {

				try {

					int length = 0;

					this.constantid = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.constantid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.type = readString(dis, ois);

				this.version = dis.readInt();

				this.code = readString(dis, ois);

				this.value = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.type, dos, oos);

				dos.writeInt(this.version);

				writeString(this.code, dos, oos);

				writeString(this.value, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("constantid=" + String.valueOf(constantid));
			sb.append(",type=" + type);
			sb.append(",version=" + String.valueOf(version));
			sb.append(",code=" + code);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ceadmin1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.constantid,
					other.constantid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				ceadmin1Struct ceadmin1 = new ceadmin1Struct();

				/**
				 * [tAdvancedHash_ceadmin1 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_ceadmin1", false);
				start_Hash.put("tAdvancedHash_ceadmin1",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_ceadmin1";

				int tos_count_tAdvancedHash_ceadmin1 = 0;

				// connection name:ceadmin1
				// source node:tPostgresqlInput_2 -
				// inputs:(after_tPostgresqlInput_1) outputs:(ceadmin1,ceadmin1)
				// | target node:tAdvancedHash_ceadmin1 - inputs:(ceadmin1)
				// outputs:()
				// linked node: tMap_5 -
				// inputs:(row1,cesearch1,ceadmin1,cesearch,cesearch2)
				// outputs:(networkout)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ceadmin1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ceadmin1Struct> tHash_Lookup_ceadmin1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<ceadmin1Struct> getLookup(matchingModeEnum_ceadmin1);

				globalMap.put("tHash_Lookup_ceadmin1", tHash_Lookup_ceadmin1);

				/**
				 * [tAdvancedHash_ceadmin1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_2);
				String dbUser_tPostgresqlInput_2 = context.ceadmindb_Login;

				final String decryptedPassword_tPostgresqlInput_2 = context.ceadmindb_Password;

				String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;

				String url_tPostgresqlInput_2 = "jdbc:postgresql://"
						+ context.ceadmindb_Server + ":"
						+ context.ceadmindb_Port + "/"
						+ context.ceadmindb_Database;

				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_2, dbUser_tPostgresqlInput_2,
						dbPwd_tPostgresqlInput_2);

				conn_tPostgresqlInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "select * from ref_constant";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);
				java.sql.ResultSet rs_tPostgresqlInput_2 = null;
				try {
					rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
							.executeQuery(dbquery_tPostgresqlInput_2);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
							.getColumnCount();

					String tmpContent_tPostgresqlInput_2 = null;

					while (rs_tPostgresqlInput_2.next()) {
						nb_line_tPostgresqlInput_2++;

						if (colQtyInRs_tPostgresqlInput_2 < 1) {
							ceadmin1.constantid = 0;
						} else {

							if (rs_tPostgresqlInput_2.getObject(1) != null) {
								ceadmin1.constantid = rs_tPostgresqlInput_2
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 2) {
							ceadmin1.type = null;
						} else {

							tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
									.getString(2);
							if (tmpContent_tPostgresqlInput_2 != null) {
								ceadmin1.type = tmpContent_tPostgresqlInput_2;
							} else {
								ceadmin1.type = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 3) {
							ceadmin1.version = 0;
						} else {

							if (rs_tPostgresqlInput_2.getObject(3) != null) {
								ceadmin1.version = rs_tPostgresqlInput_2
										.getInt(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 4) {
							ceadmin1.code = null;
						} else {

							tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
									.getString(4);
							if (tmpContent_tPostgresqlInput_2 != null) {
								ceadmin1.code = tmpContent_tPostgresqlInput_2;
							} else {
								ceadmin1.code = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 5) {
							ceadmin1.value = null;
						} else {

							tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
									.getString(5);
							if (tmpContent_tPostgresqlInput_2 != null) {
								ceadmin1.value = tmpContent_tPostgresqlInput_2;
							} else {
								ceadmin1.value = null;
							}
						}

						/**
						 * [tPostgresqlInput_2 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_2 main ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						tos_count_tPostgresqlInput_2++;

						/**
						 * [tPostgresqlInput_2 main ] stop
						 */

						/**
						 * [tAdvancedHash_ceadmin1 main ] start
						 */

						currentComponent = "tAdvancedHash_ceadmin1";

						ceadmin1Struct ceadmin1_HashRow = new ceadmin1Struct();

						ceadmin1_HashRow.constantid = ceadmin1.constantid;

						ceadmin1_HashRow.type = ceadmin1.type;

						ceadmin1_HashRow.version = ceadmin1.version;

						ceadmin1_HashRow.code = ceadmin1.code;

						ceadmin1_HashRow.value = ceadmin1.value;

						tHash_Lookup_ceadmin1.put(ceadmin1_HashRow);

						tos_count_tAdvancedHash_ceadmin1++;

						/**
						 * [tAdvancedHash_ceadmin1 main ] stop
						 */

						/**
						 * [tPostgresqlInput_2 end ] start
						 */

						currentComponent = "tPostgresqlInput_2";

					}
				} finally {
					stmt_tPostgresqlInput_2.close();

					if (conn_tPostgresqlInput_2 != null
							&& !conn_tPostgresqlInput_2.isClosed()) {

						conn_tPostgresqlInput_2.commit();

						conn_tPostgresqlInput_2.close();

					}

				}
				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_ceadmin1 end ] start
				 */

				currentComponent = "tAdvancedHash_ceadmin1";

				tHash_Lookup_ceadmin1.endPut();

				ok_Hash.put("tAdvancedHash_ceadmin1", true);
				end_Hash.put("tAdvancedHash_ceadmin1",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_ceadmin1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_2 finally ] start
				 */

				currentComponent = "tPostgresqlInput_2";

				/**
				 * [tPostgresqlInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_ceadmin1 finally ] start
				 */

				currentComponent = "tAdvancedHash_ceadmin1";

				/**
				 * [tAdvancedHash_ceadmin1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public static class cesearchStruct implements
			routines.system.IPersistableRow<cesearchStruct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradePostModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[0];

		public long attributeid;

		public long getAttributeid() {
			return this.attributeid;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradePostModelMigration) {

				try {

					int length = 0;

					this.attributeid = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.attributeid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("attributeid=" + String.valueOf(attributeid));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(cesearchStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				cesearchStruct cesearch = new cesearchStruct();

				/**
				 * [tAdvancedHash_cesearch begin ] start
				 */

				ok_Hash.put("tAdvancedHash_cesearch", false);
				start_Hash.put("tAdvancedHash_cesearch",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_cesearch";

				int tos_count_tAdvancedHash_cesearch = 0;

				// connection name:cesearch
				// source node:tPostgresqlInput_3 -
				// inputs:(after_tPostgresqlInput_1) outputs:(cesearch,cesearch)
				// | target node:tAdvancedHash_cesearch - inputs:(cesearch)
				// outputs:()
				// linked node: tMap_5 -
				// inputs:(row1,cesearch1,ceadmin1,cesearch,cesearch2)
				// outputs:(networkout)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_cesearch = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearchStruct> tHash_Lookup_cesearch = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<cesearchStruct> getLookup(matchingModeEnum_cesearch);

				globalMap.put("tHash_Lookup_cesearch", tHash_Lookup_cesearch);

				/**
				 * [tAdvancedHash_cesearch begin ] stop
				 */

				/**
				 * [tPostgresqlInput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_3", false);
				start_Hash
						.put("tPostgresqlInput_3", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_3";

				int tos_count_tPostgresqlInput_3 = 0;

				int nb_line_tPostgresqlInput_3 = 0;
				java.sql.Connection conn_tPostgresqlInput_3 = null;
				String driverClass_tPostgresqlInput_3 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_3);
				String dbUser_tPostgresqlInput_3 = context.cesearch_Login;

				final String decryptedPassword_tPostgresqlInput_3 = context.cesearch_Password;

				String dbPwd_tPostgresqlInput_3 = decryptedPassword_tPostgresqlInput_3;

				String url_tPostgresqlInput_3 = "jdbc:postgresql://"
						+ context.cesearch_Server + ":" + context.cesearch_Port
						+ "/" + context.cesearch_Database;

				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_3, dbUser_tPostgresqlInput_3,
						dbPwd_tPostgresqlInput_3);

				conn_tPostgresqlInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3
						.createStatement();

				String dbquery_tPostgresqlInput_3 = "select  attributeid  from ref_attribute where name = 'datawipe'";

				globalMap.put("tPostgresqlInput_3_QUERY",
						dbquery_tPostgresqlInput_3);
				java.sql.ResultSet rs_tPostgresqlInput_3 = null;
				try {
					rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3
							.executeQuery(dbquery_tPostgresqlInput_3);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3
							.getColumnCount();

					String tmpContent_tPostgresqlInput_3 = null;

					while (rs_tPostgresqlInput_3.next()) {
						nb_line_tPostgresqlInput_3++;

						if (colQtyInRs_tPostgresqlInput_3 < 1) {
							cesearch.attributeid = 0;
						} else {

							if (rs_tPostgresqlInput_3.getObject(1) != null) {
								cesearch.attributeid = rs_tPostgresqlInput_3
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_3 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_3 main ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						tos_count_tPostgresqlInput_3++;

						/**
						 * [tPostgresqlInput_3 main ] stop
						 */

						/**
						 * [tAdvancedHash_cesearch main ] start
						 */

						currentComponent = "tAdvancedHash_cesearch";

						cesearchStruct cesearch_HashRow = new cesearchStruct();

						cesearch_HashRow.attributeid = cesearch.attributeid;

						tHash_Lookup_cesearch.put(cesearch_HashRow);

						tos_count_tAdvancedHash_cesearch++;

						/**
						 * [tAdvancedHash_cesearch main ] stop
						 */

						/**
						 * [tPostgresqlInput_3 end ] start
						 */

						currentComponent = "tPostgresqlInput_3";

					}
				} finally {
					stmt_tPostgresqlInput_3.close();

					if (conn_tPostgresqlInput_3 != null
							&& !conn_tPostgresqlInput_3.isClosed()) {

						conn_tPostgresqlInput_3.commit();

						conn_tPostgresqlInput_3.close();

					}

				}
				globalMap.put("tPostgresqlInput_3_NB_LINE",
						nb_line_tPostgresqlInput_3);

				ok_Hash.put("tPostgresqlInput_3", true);
				end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_cesearch end ] start
				 */

				currentComponent = "tAdvancedHash_cesearch";

				tHash_Lookup_cesearch.endPut();

				ok_Hash.put("tAdvancedHash_cesearch", true);
				end_Hash.put("tAdvancedHash_cesearch",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_cesearch end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_3 finally ] start
				 */

				currentComponent = "tPostgresqlInput_3";

				/**
				 * [tPostgresqlInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_cesearch finally ] start
				 */

				currentComponent = "tAdvancedHash_cesearch";

				/**
				 * [tAdvancedHash_cesearch finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class cesearch2Struct implements
			routines.system.IPersistableComparableLookupRow<cesearch2Struct> {
		final static byte[] commonByteArrayLock_SEARCHMIGRATION_TradePostModelMigration = new byte[0];
		static byte[] commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long programcategoryid;

		public long getProgramcategoryid() {
			return this.programcategoryid;
		}

		public String programname;

		public String getProgramname() {
			return this.programname;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.programname == null) ? 0 : this.programname
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final cesearch2Struct other = (cesearch2Struct) obj;

			if (this.programname == null) {
				if (other.programname != null)
					return false;

			} else if (!this.programname.equals(other.programname))

				return false;

			return true;
		}

		public void copyDataTo(cesearch2Struct other) {

			other.programcategoryid = this.programcategoryid;
			other.programname = this.programname;

		}

		public void copyKeysDataTo(cesearch2Struct other) {

			other.programname = this.programname;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEARCHMIGRATION_TradePostModelMigration.length) {
					if (length < 1024
							&& commonByteArray_SEARCHMIGRATION_TradePostModelMigration.length == 0) {
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[1024];
					} else {
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration,
						0, length);
				strReturn = new String(
						commonByteArray_SEARCHMIGRATION_TradePostModelMigration,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEARCHMIGRATION_TradePostModelMigration) {

				try {

					int length = 0;

					this.programname = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.programname, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.programcategoryid = dis.readLong();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.programcategoryid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("programcategoryid=" + String.valueOf(programcategoryid));
			sb.append(",programname=" + programname);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(cesearch2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.programname,
					other.programname);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				cesearch2Struct cesearch2 = new cesearch2Struct();

				/**
				 * [tAdvancedHash_cesearch2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_cesearch2", false);
				start_Hash.put("tAdvancedHash_cesearch2",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_cesearch2";

				int tos_count_tAdvancedHash_cesearch2 = 0;

				// connection name:cesearch2
				// source node:tPostgresqlInput_4 -
				// inputs:(after_tPostgresqlInput_1)
				// outputs:(cesearch2,cesearch2) | target
				// node:tAdvancedHash_cesearch2 - inputs:(cesearch2) outputs:()
				// linked node: tMap_5 -
				// inputs:(row1,cesearch1,ceadmin1,cesearch,cesearch2)
				// outputs:(networkout)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_cesearch2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cesearch2Struct> tHash_Lookup_cesearch2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<cesearch2Struct> getLookup(matchingModeEnum_cesearch2);

				globalMap.put("tHash_Lookup_cesearch2", tHash_Lookup_cesearch2);

				/**
				 * [tAdvancedHash_cesearch2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_4", false);
				start_Hash
						.put("tPostgresqlInput_4", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_4";

				int tos_count_tPostgresqlInput_4 = 0;

				int nb_line_tPostgresqlInput_4 = 0;
				java.sql.Connection conn_tPostgresqlInput_4 = null;
				String driverClass_tPostgresqlInput_4 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_4);
				String dbUser_tPostgresqlInput_4 = context.cesearch_Login;

				final String decryptedPassword_tPostgresqlInput_4 = context.cesearch_Password;

				String dbPwd_tPostgresqlInput_4 = decryptedPassword_tPostgresqlInput_4;

				String url_tPostgresqlInput_4 = "jdbc:postgresql://"
						+ context.cesearch_Server + ":" + context.cesearch_Port
						+ "/" + context.cesearch_Database;

				conn_tPostgresqlInput_4 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_4, dbUser_tPostgresqlInput_4,
						dbPwd_tPostgresqlInput_4);

				conn_tPostgresqlInput_4.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4
						.createStatement();

				String dbquery_tPostgresqlInput_4 = "select  programcategoryid,programname from ref_program_category  pc join \nref_program p on (pc.programid=p.programid) where categoryid=1";

				globalMap.put("tPostgresqlInput_4_QUERY",
						dbquery_tPostgresqlInput_4);
				java.sql.ResultSet rs_tPostgresqlInput_4 = null;
				try {
					rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4
							.executeQuery(dbquery_tPostgresqlInput_4);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4
							.getColumnCount();

					String tmpContent_tPostgresqlInput_4 = null;

					while (rs_tPostgresqlInput_4.next()) {
						nb_line_tPostgresqlInput_4++;

						if (colQtyInRs_tPostgresqlInput_4 < 1) {
							cesearch2.programcategoryid = 0;
						} else {

							if (rs_tPostgresqlInput_4.getObject(1) != null) {
								cesearch2.programcategoryid = rs_tPostgresqlInput_4
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 2) {
							cesearch2.programname = null;
						} else {

							tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
									.getString(2);
							if (tmpContent_tPostgresqlInput_4 != null) {
								cesearch2.programname = tmpContent_tPostgresqlInput_4;
							} else {
								cesearch2.programname = null;
							}
						}

						/**
						 * [tPostgresqlInput_4 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_4 main ] start
						 */

						currentComponent = "tPostgresqlInput_4";

						tos_count_tPostgresqlInput_4++;

						/**
						 * [tPostgresqlInput_4 main ] stop
						 */

						/**
						 * [tAdvancedHash_cesearch2 main ] start
						 */

						currentComponent = "tAdvancedHash_cesearch2";

						cesearch2Struct cesearch2_HashRow = new cesearch2Struct();

						cesearch2_HashRow.programcategoryid = cesearch2.programcategoryid;

						cesearch2_HashRow.programname = cesearch2.programname;

						tHash_Lookup_cesearch2.put(cesearch2_HashRow);

						tos_count_tAdvancedHash_cesearch2++;

						/**
						 * [tAdvancedHash_cesearch2 main ] stop
						 */

						/**
						 * [tPostgresqlInput_4 end ] start
						 */

						currentComponent = "tPostgresqlInput_4";

					}
				} finally {
					stmt_tPostgresqlInput_4.close();

					if (conn_tPostgresqlInput_4 != null
							&& !conn_tPostgresqlInput_4.isClosed()) {

						conn_tPostgresqlInput_4.commit();

						conn_tPostgresqlInput_4.close();

					}

				}
				globalMap.put("tPostgresqlInput_4_NB_LINE",
						nb_line_tPostgresqlInput_4);

				ok_Hash.put("tPostgresqlInput_4", true);
				end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_cesearch2 end ] start
				 */

				currentComponent = "tAdvancedHash_cesearch2";

				tHash_Lookup_cesearch2.endPut();

				ok_Hash.put("tAdvancedHash_cesearch2", true);
				end_Hash.put("tAdvancedHash_cesearch2",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_cesearch2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_4 finally ] start
				 */

				currentComponent = "tPostgresqlInput_4";

				/**
				 * [tPostgresqlInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_cesearch2 finally ] start
				 */

				currentComponent = "tAdvancedHash_cesearch2";

				/**
				 * [tAdvancedHash_cesearch2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final TradePostModelMigration TradePostModelMigrationClass = new TradePostModelMigration();

		int exitCode = TradePostModelMigrationClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = TradePostModelMigration.class
					.getClassLoader().getResourceAsStream(contextStr.toLowerCase() + ".talend.properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.ceadmindb_Database = (String) context
					.getProperty("ceadmindb_Database");
			context.ceadmindb_Login = (String) context
					.getProperty("ceadmindb_Login");
			String pwd_ceadmindb_Password_value = context
					.getProperty("ceadmindb_Password");
			context.ceadmindb_Password = null;
			if (pwd_ceadmindb_Password_value != null) {
				if (context_param.containsKey("ceadmindb_Password")) {// no need
																		// to
																		// decrypt
																		// if it
																		// come
																		// from
																		// program
																		// argument
																		// or
																		// parent
																		// job
																		// runtime
					context.ceadmindb_Password = pwd_ceadmindb_Password_value;
				} else if (!pwd_ceadmindb_Password_value.isEmpty()) {
					try {
						context.ceadmindb_Password = pwd_ceadmindb_Password_value;
						context.put("ceadmindb_Password",
								context.ceadmindb_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.ceadmindb_Port = (String) context
					.getProperty("ceadmindb_Port");
			context.ceadmindb_Schema = (String) context
					.getProperty("ceadmindb_Schema");
			context.ceadmindb_Server = (String) context
					.getProperty("ceadmindb_Server");
			context.cesearch_Database = (String) context
					.getProperty("cesearch_Database");
			context.cesearch_Login = (String) context
					.getProperty("cesearch_Login");
			String pwd_cesearch_Password_value = context
					.getProperty("cesearch_Password");
			context.cesearch_Password = null;
			if (pwd_cesearch_Password_value != null) {
				if (context_param.containsKey("cesearch_Password")) {// no need
																		// to
																		// decrypt
																		// if it
																		// come
																		// from
																		// program
																		// argument
																		// or
																		// parent
																		// job
																		// runtime
					context.cesearch_Password = pwd_cesearch_Password_value;
				} else if (!pwd_cesearch_Password_value.isEmpty()) {
					try {
						context.cesearch_Password = pwd_cesearch_Password_value;
						context.put("cesearch_Password",
								context.cesearch_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.cesearch_Port = (String) context
					.getProperty("cesearch_Port");
			context.cesearch_Schema = (String) context
					.getProperty("cesearch_Schema");
			context.cesearch_Server = (String) context
					.getProperty("cesearch_Server");
			context.categorystring = (String) context
					.getProperty("categorystring");
			try {
				context.ce_dealercategoryid = routines.system.ParserUtils
						.parseTo_Long(context
								.getProperty("ce_dealercategoryid"));
			} catch (NumberFormatException e) {
				context.ce_dealercategoryid = null;
			}
			try {
				context.cesearchbatchuser = routines.system.ParserUtils
						.parseTo_Long(context.getProperty("cesearchbatchuser"));
			} catch (NumberFormatException e) {
				context.cesearchbatchuser = null;
			}
			try {
				context.cew_dealercategoryid = routines.system.ParserUtils
						.parseTo_Long(context
								.getProperty("cew_dealercategoryid"));
			} catch (NumberFormatException e) {
				context.cew_dealercategoryid = null;
			}
			try {
				String context_jobdate_value = context.getProperty("jobdate");
				if (context_jobdate_value == null) {
					context_jobdate_value = "";
				}
				int context_jobdate_pos = context_jobdate_value.indexOf(";");
				String context_jobdate_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_jobdate_pos > -1) {
					context_jobdate_pattern = context_jobdate_value.substring(
							0, context_jobdate_pos);
					context_jobdate_value = context_jobdate_value
							.substring(context_jobdate_pos + 1);
				}

				context.jobdate = (java.util.Date) (new java.text.SimpleDateFormat(
						context_jobdate_pattern).parse(context_jobdate_value));

			} catch (ParseException e) {
				context.jobdate = null;
			}
			context.programname = (String) context.getProperty("programname");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ceadmindb_Database")) {
				context.ceadmindb_Database = (String) parentContextMap
						.get("ceadmindb_Database");
			}
			if (parentContextMap.containsKey("ceadmindb_Login")) {
				context.ceadmindb_Login = (String) parentContextMap
						.get("ceadmindb_Login");
			}
			if (parentContextMap.containsKey("ceadmindb_Password")) {
				context.ceadmindb_Password = (java.lang.String) parentContextMap
						.get("ceadmindb_Password");
			}
			if (parentContextMap.containsKey("ceadmindb_Port")) {
				context.ceadmindb_Port = (String) parentContextMap
						.get("ceadmindb_Port");
			}
			if (parentContextMap.containsKey("ceadmindb_Schema")) {
				context.ceadmindb_Schema = (String) parentContextMap
						.get("ceadmindb_Schema");
			}
			if (parentContextMap.containsKey("ceadmindb_Server")) {
				context.ceadmindb_Server = (String) parentContextMap
						.get("ceadmindb_Server");
			}
			if (parentContextMap.containsKey("cesearch_Database")) {
				context.cesearch_Database = (String) parentContextMap
						.get("cesearch_Database");
			}
			if (parentContextMap.containsKey("cesearch_Login")) {
				context.cesearch_Login = (String) parentContextMap
						.get("cesearch_Login");
			}
			if (parentContextMap.containsKey("cesearch_Password")) {
				context.cesearch_Password = (java.lang.String) parentContextMap
						.get("cesearch_Password");
			}
			if (parentContextMap.containsKey("cesearch_Port")) {
				context.cesearch_Port = (String) parentContextMap
						.get("cesearch_Port");
			}
			if (parentContextMap.containsKey("cesearch_Schema")) {
				context.cesearch_Schema = (String) parentContextMap
						.get("cesearch_Schema");
			}
			if (parentContextMap.containsKey("cesearch_Server")) {
				context.cesearch_Server = (String) parentContextMap
						.get("cesearch_Server");
			}
			if (parentContextMap.containsKey("categorystring")) {
				context.categorystring = (String) parentContextMap
						.get("categorystring");
			}
			if (parentContextMap.containsKey("ce_dealercategoryid")) {
				context.ce_dealercategoryid = (Long) parentContextMap
						.get("ce_dealercategoryid");
			}
			if (parentContextMap.containsKey("cesearchbatchuser")) {
				context.cesearchbatchuser = (Long) parentContextMap
						.get("cesearchbatchuser");
			}
			if (parentContextMap.containsKey("cew_dealercategoryid")) {
				context.cew_dealercategoryid = (Long) parentContextMap
						.get("cew_dealercategoryid");
			}
			if (parentContextMap.containsKey("jobdate")) {
				context.jobdate = (java.util.Date) parentContextMap
						.get("jobdate");
			}
			if (parentContextMap.containsKey("programname")) {
				context.programname = (String) parentContextMap
						.get("programname");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("ceadmindb_Password");
		parametersToEncrypt.add("cesearch_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlInput_1) {
			globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", -1);

			e_tPostgresqlInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : TradePostModelMigration");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 154276 characters generated by Talend Open Studio for Data Integration on the
 * 21 November, 2014 6:59:45 PM IST
 ************************************************************************************************/
